
F103_ILI9225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  08006cb0  08006cb0  00016cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007564  08007564  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007564  08007564  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007564  08007564  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800756c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001d4  08007740  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08007740  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000927b  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bbf  00000000  00000000  000294bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  0002b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bc  00000000  00000000  0002baa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183ee  00000000  00000000  0002c25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c5b2  00000000  00000000  0004464a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008638f  00000000  00000000  00050bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a48  00000000  00000000  000d6f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000da9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c94 	.word	0x08006c94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006c94 	.word	0x08006c94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000a92:	1df9      	adds	r1, r7, #7
 8000a94:	2364      	movs	r3, #100	; 0x64
 8000a96:	2201      	movs	r2, #1
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <spi_write+0x20>)
 8000a9a:	f003 f8b5 	bl	8003c08 <HAL_SPI_Transmit>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000244 	.word	0x20000244

08000aac <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <lcd_write_data+0x3c>)
 8000abc:	f001 fbd8 	bl	8002270 <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac6:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <lcd_write_data+0x3c>)
 8000ac8:	f001 fbd2 	bl	8002270 <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ffda 	bl	8000a88 <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2180      	movs	r1, #128	; 0x80
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <lcd_write_data+0x3c>)
 8000ada:	f001 fbc9 	bl	8002270 <HAL_GPIO_WritePin>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010c00 	.word	0x40010c00

08000aec <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <lcd_write_command+0x3c>)
 8000afe:	f001 fbb7 	bl	8002270 <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	4808      	ldr	r0, [pc, #32]	; (8000b28 <lcd_write_command+0x3c>)
 8000b08:	f001 fbb2 	bl	8002270 <HAL_GPIO_WritePin>
    spi_write(data);
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffba 	bl	8000a88 <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <lcd_write_command+0x3c>)
 8000b1a:	f001 fba9 	bl	8002270 <HAL_GPIO_WritePin>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40010c00 	.word	0x40010c00

08000b2c <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffd5 	bl	8000aec <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ffd0 	bl	8000aec <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	0a1b      	lsrs	r3, r3, #8
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ffaa 	bl	8000aac <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ffa5 	bl	8000aac <lcd_write_data>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 8000b6a:	b480      	push	{r7}
 8000b6c:	b085      	sub	sp, #20
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	7bfa      	ldrb	r2, [r7, #15]
 8000b86:	701a      	strb	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	e9c7 0100 	strd	r0, r1, [r7]
    int multiplier = 4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	617b      	str	r3, [r7, #20]
    double counter = millis;
 8000ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ba6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000baa:	e01c      	b.n	8000be6 <delay_ms+0x52>
        while(counter--);
 8000bac:	bf00      	nop
 8000bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <delay_ms+0x68>)
 8000bb8:	4620      	mov	r0, r4
 8000bba:	4629      	mov	r1, r5
 8000bbc:	f7ff fad4 	bl	8000168 <__aeabi_dsub>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	f7ff fee8 	bl	80009a8 <__aeabi_dcmpeq>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0e7      	beq.n	8000bae <delay_ms+0x1a>
        counter = millis;
 8000bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000be2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	617a      	str	r2, [r7, #20]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1dd      	bne.n	8000bac <delay_ms+0x18>
    }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	3ff00000 	.word	0x3ff00000

08000c00 <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	4814      	ldr	r0, [pc, #80]	; (8000c5c <lcd_init+0x5c>)
 8000c0a:	f001 fb31 	bl	8002270 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <lcd_init+0x5c>)
 8000c16:	f001 fb2b 	bl	8002270 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c20:	480e      	ldr	r0, [pc, #56]	; (8000c5c <lcd_init+0x5c>)
 8000c22:	f001 fb25 	bl	8002270 <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <lcd_init+0x5c>)
 8000c2e:	f001 fb1f 	bl	8002270 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	490a      	ldr	r1, [pc, #40]	; (8000c60 <lcd_init+0x60>)
 8000c38:	f7ff ffac 	bl	8000b94 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <lcd_init+0x5c>)
 8000c44:	f001 fb14 	bl	8002270 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4904      	ldr	r1, [pc, #16]	; (8000c60 <lcd_init+0x60>)
 8000c4e:	f7ff ffa1 	bl	8000b94 <delay_ms>
    
    lcd_init_command_list();
 8000c52:	f000 f807 	bl	8000c64 <lcd_init_command_list>
    
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40010c00 	.word	0x40010c00
 8000c60:	407f4000 	.word	0x407f4000

08000c64 <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2010      	movs	r0, #16
 8000c6c:	f7ff ff5e 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 8000c70:	2100      	movs	r1, #0
 8000c72:	2011      	movs	r0, #17
 8000c74:	f7ff ff5a 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2012      	movs	r0, #18
 8000c7c:	f7ff ff56 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 8000c80:	2100      	movs	r1, #0
 8000c82:	2013      	movs	r0, #19
 8000c84:	f7ff ff52 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2014      	movs	r0, #20
 8000c8c:	f7ff ff4e 	bl	8000b2c <lcd_write_register>
    
    delay_ms(10);
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4960      	ldr	r1, [pc, #384]	; (8000e18 <lcd_init_command_list+0x1b4>)
 8000c96:	f7ff ff7d 	bl	8000b94 <delay_ms>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 8000c9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c9e:	2011      	movs	r0, #17
 8000ca0:	f7ff ff44 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 8000ca4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000ca8:	2012      	movs	r0, #18
 8000caa:	f7ff ff3f 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 8000cae:	216f      	movs	r1, #111	; 0x6f
 8000cb0:	2013      	movs	r0, #19
 8000cb2:	f7ff ff3b 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 8000cb6:	f644 115f 	movw	r1, #18783	; 0x495f
 8000cba:	2014      	movs	r0, #20
 8000cbc:	f7ff ff36 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 8000cc0:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000cc4:	2010      	movs	r0, #16
 8000cc6:	f7ff ff31 	bl	8000b2c <lcd_write_register>
    
    delay_ms(10);
 8000cca:	f04f 0000 	mov.w	r0, #0
 8000cce:	4952      	ldr	r1, [pc, #328]	; (8000e18 <lcd_init_command_list+0x1b4>)
 8000cd0:	f7ff ff60 	bl	8000b94 <delay_ms>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 8000cd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cd8:	2011      	movs	r0, #17
 8000cda:	f7ff ff27 	bl	8000b2c <lcd_write_register>

    delay_ms(50);
 8000cde:	f04f 0000 	mov.w	r0, #0
 8000ce2:	494e      	ldr	r1, [pc, #312]	; (8000e1c <lcd_init_command_list+0x1b8>)
 8000ce4:	f7ff ff56 	bl	8000b94 <delay_ms>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 8000ce8:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff ff1d 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f7ff ff18 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 8000cfc:	f241 0130 	movw	r1, #4144	; 0x1030
 8000d00:	2003      	movs	r0, #3
 8000d02:	f7ff ff13 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8000d06:	2100      	movs	r1, #0
 8000d08:	2007      	movs	r0, #7
 8000d0a:	f7ff ff0f 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 8000d0e:	f240 2102 	movw	r1, #514	; 0x202
 8000d12:	2008      	movs	r0, #8
 8000d14:	f7ff ff0a 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 8000d18:	2100      	movs	r1, #0
 8000d1a:	200b      	movs	r0, #11
 8000d1c:	f7ff ff06 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8000d20:	2100      	movs	r1, #0
 8000d22:	200c      	movs	r0, #12
 8000d24:	f7ff ff02 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 8000d28:	f640 7101 	movw	r1, #3841	; 0xf01
 8000d2c:	200f      	movs	r0, #15
 8000d2e:	f7ff fefd 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8000d32:	2100      	movs	r1, #0
 8000d34:	2015      	movs	r0, #21
 8000d36:	f7ff fef9 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2020      	movs	r0, #32
 8000d3e:	f7ff fef5 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8000d42:	2100      	movs	r1, #0
 8000d44:	2021      	movs	r0, #33	; 0x21
 8000d46:	f7ff fef1 	bl	8000b2c <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2030      	movs	r0, #48	; 0x30
 8000d4e:	f7ff feed 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); 
 8000d52:	21db      	movs	r1, #219	; 0xdb
 8000d54:	2031      	movs	r0, #49	; 0x31
 8000d56:	f7ff fee9 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); 
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2032      	movs	r0, #50	; 0x32
 8000d5e:	f7ff fee5 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); 
 8000d62:	2100      	movs	r1, #0
 8000d64:	2033      	movs	r0, #51	; 0x33
 8000d66:	f7ff fee1 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); 
 8000d6a:	21db      	movs	r1, #219	; 0xdb
 8000d6c:	2034      	movs	r0, #52	; 0x34
 8000d6e:	f7ff fedd 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); 
 8000d72:	2100      	movs	r1, #0
 8000d74:	2035      	movs	r0, #53	; 0x35
 8000d76:	f7ff fed9 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); 
 8000d7a:	21af      	movs	r1, #175	; 0xaf
 8000d7c:	2036      	movs	r0, #54	; 0x36
 8000d7e:	f7ff fed5 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); 
 8000d82:	2100      	movs	r1, #0
 8000d84:	2037      	movs	r0, #55	; 0x37
 8000d86:	f7ff fed1 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); 
 8000d8a:	21db      	movs	r1, #219	; 0xdb
 8000d8c:	2038      	movs	r0, #56	; 0x38
 8000d8e:	f7ff fecd 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); 
 8000d92:	2100      	movs	r1, #0
 8000d94:	2039      	movs	r0, #57	; 0x39
 8000d96:	f7ff fec9 	bl	8000b2c <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2050      	movs	r0, #80	; 0x50
 8000d9e:	f7ff fec5 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 8000da2:	f640 0108 	movw	r1, #2056	; 0x808
 8000da6:	2051      	movs	r0, #81	; 0x51
 8000da8:	f7ff fec0 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 8000dac:	f640 010a 	movw	r1, #2058	; 0x80a
 8000db0:	2052      	movs	r0, #82	; 0x52
 8000db2:	f7ff febb 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 8000db6:	210a      	movs	r1, #10
 8000db8:	2053      	movs	r0, #83	; 0x53
 8000dba:	f7ff feb7 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 8000dbe:	f640 2108 	movw	r1, #2568	; 0xa08
 8000dc2:	2054      	movs	r0, #84	; 0x54
 8000dc4:	f7ff feb2 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 8000dc8:	f640 0108 	movw	r1, #2056	; 0x808
 8000dcc:	2055      	movs	r0, #85	; 0x55
 8000dce:	f7ff fead 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2056      	movs	r0, #86	; 0x56
 8000dd6:	f7ff fea9 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 8000dda:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8000dde:	2057      	movs	r0, #87	; 0x57
 8000de0:	f7ff fea4 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 8000de4:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8000de8:	2058      	movs	r0, #88	; 0x58
 8000dea:	f7ff fe9f 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 8000dee:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8000df2:	2059      	movs	r0, #89	; 0x59
 8000df4:	f7ff fe9a 	bl	8000b2c <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 8000df8:	2112      	movs	r1, #18
 8000dfa:	2007      	movs	r0, #7
 8000dfc:	f7ff fe96 	bl	8000b2c <lcd_write_register>

    delay_ms(50); 
 8000e00:	f04f 0000 	mov.w	r0, #0
 8000e04:	4905      	ldr	r1, [pc, #20]	; (8000e1c <lcd_init_command_list+0x1b8>)
 8000e06:	f7ff fec5 	bl	8000b94 <delay_ms>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 8000e0a:	f241 0117 	movw	r1, #4119	; 0x1017
 8000e0e:	2007      	movs	r0, #7
 8000e10:	f7ff fe8c 	bl	8000b2c <lcd_write_register>

    
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40240000 	.word	0x40240000
 8000e1c:	40490000 	.word	0x40490000

08000e20 <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with 
 * Colour.
 * 
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(char x, char y, unsigned int colour) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	603a      	str	r2, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	71bb      	strb	r3, [r7, #6]
    //If we are in landscape view then translate -90 degrees
    if(LANDSCAPE) {
        swap_char(&x, &y);
 8000e30:	1dba      	adds	r2, r7, #6
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fe97 	bl	8000b6a <swap_char>
        y = WIDTH - y;
 8000e3c:	79ba      	ldrb	r2, [r7, #6]
 8000e3e:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	71bb      	strb	r3, [r7, #6]
    }
    
    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 8000e48:	79f8      	ldrb	r0, [r7, #7]
 8000e4a:	79b9      	ldrb	r1, [r7, #6]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f000 f87a 	bl	8000f50 <set_draw_window>
    lcd_write_data(colour >> 8);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fe22 	bl	8000aac <lcd_write_data>
    lcd_write_data(colour & 0xFF);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fe1d 	bl	8000aac <lcd_write_data>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour){
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4604      	mov	r4, r0
 8000e84:	4608      	mov	r0, r1
 8000e86:	4611      	mov	r1, r2
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71bb      	strb	r3, [r7, #6]
 8000e92:	460b      	mov	r3, r1
 8000e94:	717b      	strb	r3, [r7, #5]
 8000e96:	4613      	mov	r3, r2
 8000e98:	713b      	strb	r3, [r7, #4]
    //If landscape view then translate everyting -90 degrees
    if(LANDSCAPE) {
        swap_char(&x1, &y1);
 8000e9a:	1dba      	adds	r2, r7, #6
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe62 	bl	8000b6a <swap_char>
        swap_char(&x2, &y2);
 8000ea6:	1d3a      	adds	r2, r7, #4
 8000ea8:	1d7b      	adds	r3, r7, #5
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe5c 	bl	8000b6a <swap_char>
        y1 = WIDTH - y1;
 8000eb2:	79ba      	ldrb	r2, [r7, #6]
 8000eb4:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	71bb      	strb	r3, [r7, #6]
        y2 = WIDTH - y2;
 8000ebe:	793a      	ldrb	r2, [r7, #4]
 8000ec0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8000ec4:	1a9b      	subs	r3, r3, r2
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	713b      	strb	r3, [r7, #4]
        swap_char(&y2, &y1);
 8000eca:	1dba      	adds	r2, r7, #6
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fe4a 	bl	8000b6a <swap_char>
    }
    
    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 8000ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 8000edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ede:	73bb      	strb	r3, [r7, #14]
    
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8000ee0:	79f8      	ldrb	r0, [r7, #7]
 8000ee2:	79b9      	ldrb	r1, [r7, #6]
 8000ee4:	797a      	ldrb	r2, [r7, #5]
 8000ee6:	793b      	ldrb	r3, [r7, #4]
 8000ee8:	f000 f832 	bl	8000f50 <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between 
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	4816      	ldr	r0, [pc, #88]	; (8000f4c <fill_rectangle+0xd0>)
 8000ef2:	f001 f9bd 	bl	8002270 <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e017      	b.n	8000f2c <fill_rectangle+0xb0>
        for(int x = 0; x < x2-x1+1; x++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	e00a      	b.n	8000f18 <fill_rectangle+0x9c>
            lcd_write_data(colour_high);
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fdd1 	bl	8000aac <lcd_write_data>
            lcd_write_data(colour_low);
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fdcd 	bl	8000aac <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++) {
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	3301      	adds	r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	797b      	ldrb	r3, [r7, #5]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dded      	ble.n	8000f02 <fill_rectangle+0x86>
    for(int y = 0; y < y2-y1+1 ; y++) {
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	793b      	ldrb	r3, [r7, #4]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	dde0      	ble.n	8000efc <fill_rectangle+0x80>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <fill_rectangle+0xd0>)
 8000f40:	f001 f996 	bl	8002270 <HAL_GPIO_WritePin>
}
 8000f44:	bf00      	nop
 8000f46:	371c      	adds	r7, #28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd90      	pop	{r4, r7, pc}
 8000f4c:	40010c00 	.word	0x40010c00

08000f50 <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4604      	mov	r4, r0
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4623      	mov	r3, r4
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	4603      	mov	r3, r0
 8000f64:	71bb      	strb	r3, [r7, #6]
 8000f66:	460b      	mov	r3, r1
 8000f68:	717b      	strb	r3, [r7, #5]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 8000f6e:	797a      	ldrb	r2, [r7, #5]
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d205      	bcs.n	8000f82 <set_draw_window+0x32>
        swap_char(&x2, &x1);
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	1d7b      	adds	r3, r7, #5
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fdf4 	bl	8000b6a <swap_char>
    if(y2 < y1)
 8000f82:	793a      	ldrb	r2, [r7, #4]
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d205      	bcs.n	8000f96 <set_draw_window+0x46>
        swap_char(&y2, &y1);
 8000f8a:	1dba      	adds	r2, r7, #6
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fdea 	bl	8000b6a <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 8000f96:	797b      	ldrb	r3, [r7, #5]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2036      	movs	r0, #54	; 0x36
 8000f9c:	f7ff fdc6 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	2037      	movs	r0, #55	; 0x37
 8000fa6:	f7ff fdc1 	bl	8000b2c <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 8000faa:	793b      	ldrb	r3, [r7, #4]
 8000fac:	4619      	mov	r1, r3
 8000fae:	2038      	movs	r0, #56	; 0x38
 8000fb0:	f7ff fdbc 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	2039      	movs	r0, #57	; 0x39
 8000fba:	f7ff fdb7 	bl	8000b2c <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2020      	movs	r0, #32
 8000fc4:	f7ff fdb2 	bl	8000b2c <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	2021      	movs	r0, #33	; 0x21
 8000fce:	f7ff fdad 	bl	8000b2c <lcd_write_register>

    lcd_write_command(0x00);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff fd8a 	bl	8000aec <lcd_write_command>
    lcd_write_command(0x22);
 8000fd8:	2022      	movs	r0, #34	; 0x22
 8000fda:	f7ff fd87 	bl	8000aec <lcd_write_command>
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <draw_line>:

void draw_line(char x1, char y1, char x2, char y2, unsigned int colour){
 8000fe6:	b590      	push	{r4, r7, lr}
 8000fe8:	b087      	sub	sp, #28
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4604      	mov	r4, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71bb      	strb	r3, [r7, #6]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	717b      	strb	r3, [r7, #5]
 8001000:	4613      	mov	r3, r2
 8001002:	713b      	strb	r3, [r7, #4]

	  int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001004:	793b      	ldrb	r3, [r7, #4]
 8001006:	461a      	mov	r2, r3
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001010:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001014:	797b      	ldrb	r3, [r7, #5]
 8001016:	4619      	mov	r1, r3
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	1acb      	subs	r3, r1, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	bfb8      	it	lt
 8001020:	425b      	neglt	r3, r3
 8001022:	429a      	cmp	r2, r3
 8001024:	bfcc      	ite	gt
 8001026:	2301      	movgt	r3, #1
 8001028:	2300      	movle	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	827b      	strh	r3, [r7, #18]
	  if(x2 < x1)
 800102e:	797a      	ldrb	r2, [r7, #5]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	429a      	cmp	r2, r3
 8001034:	d205      	bcs.n	8001042 <draw_line+0x5c>
	          swap_char(&x2, &x1);
 8001036:	1dfa      	adds	r2, r7, #7
 8001038:	1d7b      	adds	r3, r7, #5
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fd94 	bl	8000b6a <swap_char>
	      if(y2 < y1)
 8001042:	793a      	ldrb	r2, [r7, #4]
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	429a      	cmp	r2, r3
 8001048:	d205      	bcs.n	8001056 <draw_line+0x70>
	          swap_char(&y2, &y1);
 800104a:	1dba      	adds	r2, r7, #6
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fd8a 	bl	8000b6a <swap_char>

	  int16_t dx, dy;
	  dx = x2 - x1;
 8001056:	797b      	ldrb	r3, [r7, #5]
 8001058:	b29a      	uxth	r2, r3
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	b29b      	uxth	r3, r3
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	b29b      	uxth	r3, r3
 8001062:	823b      	strh	r3, [r7, #16]
	  dy = abs(y2 - y1);
 8001064:	793b      	ldrb	r3, [r7, #4]
 8001066:	461a      	mov	r2, r3
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	bfb8      	it	lt
 8001070:	425b      	neglt	r3, r3
 8001072:	81fb      	strh	r3, [r7, #14]

	  int16_t err = dx / 2;
 8001074:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001078:	0fda      	lsrs	r2, r3, #31
 800107a:	4413      	add	r3, r2
 800107c:	105b      	asrs	r3, r3, #1
 800107e:	82fb      	strh	r3, [r7, #22]
	  int16_t ystep;

	  if (y1 < y2)
 8001080:	79ba      	ldrb	r2, [r7, #6]
 8001082:	793b      	ldrb	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d202      	bcs.n	800108e <draw_line+0xa8>
	  {
	    ystep = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	82bb      	strh	r3, [r7, #20]
 800108c:	e02c      	b.n	80010e8 <draw_line+0x102>
	  }
	  else
	  {
	    ystep = -1;
 800108e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001092:	82bb      	strh	r3, [r7, #20]
	  }

	  for (; x1<=x2; x1++)
 8001094:	e028      	b.n	80010e8 <draw_line+0x102>
	  {
	    if (steep)
 8001096:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <draw_line+0xc6>
	    {
	    	draw_pixel(x2, y2, colour);
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	7939      	ldrb	r1, [r7, #4]
 80010a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff febb 	bl	8000e20 <draw_pixel>
 80010aa:	e005      	b.n	80010b8 <draw_line+0xd2>
	    }
	    else
	    {
	    	draw_pixel(x1, y1, colour);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	79b9      	ldrb	r1, [r7, #6]
 80010b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff feb4 	bl	8000e20 <draw_pixel>
	    }
	    err -= dy;
 80010b8:	8afa      	ldrh	r2, [r7, #22]
 80010ba:	89fb      	ldrh	r3, [r7, #14]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	b29b      	uxth	r3, r3
 80010c0:	82fb      	strh	r3, [r7, #22]
	    if (err < 0)
 80010c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	da0a      	bge.n	80010e0 <draw_line+0xfa>
	    {
	      y1 += ystep;
 80010ca:	8abb      	ldrh	r3, [r7, #20]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	4413      	add	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	71bb      	strb	r3, [r7, #6]
	      err += dx;
 80010d6:	8afa      	ldrh	r2, [r7, #22]
 80010d8:	8a3b      	ldrh	r3, [r7, #16]
 80010da:	4413      	add	r3, r2
 80010dc:	b29b      	uxth	r3, r3
 80010de:	82fb      	strh	r3, [r7, #22]
	  for (; x1<=x2; x1++)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	3301      	adds	r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	79fa      	ldrb	r2, [r7, #7]
 80010ea:	797b      	ldrb	r3, [r7, #5]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d9d2      	bls.n	8001096 <draw_line+0xb0>
	    }
	  }
	}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	371c      	adds	r7, #28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
	...

080010fc <draw_char>:
 * 
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(char x, char y, char c, unsigned int colour, char size) {
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af02      	add	r7, sp, #8
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4603      	mov	r3, r0
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	460b      	mov	r3, r1
 800110a:	71bb      	strb	r3, [r7, #6]
 800110c:	4613      	mov	r3, r2
 800110e:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	3b20      	subs	r3, #32
 8001114:	60fb      	str	r3, [r7, #12]
    
    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	e070      	b.n	80011fe <draw_char+0x102>

        line = FontLarge[font_index][12 - i];
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f1c3 010c 	rsb	r1, r3, #12
 8001122:	483b      	ldr	r0, [pc, #236]	; (8001210 <draw_char+0x114>)
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	4403      	add	r3, r0
 8001132:	440b      	add	r3, r1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	72fb      	strb	r3, [r7, #11]
        
        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	e059      	b.n	80011f2 <draw_char+0xf6>
            if(line & (0x01 << j)) {
 800113e:	7afa      	ldrb	r2, [r7, #11]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	fa42 f303 	asr.w	r3, r2, r3
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b00      	cmp	r3, #0
 800114c:	d04e      	beq.n	80011ec <draw_char+0xf0>
                if(size == 1) {
 800114e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001152:	2b01      	cmp	r3, #1
 8001154:	d110      	bne.n	8001178 <draw_char+0x7c>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	79fa      	ldrb	r2, [r7, #7]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	3308      	adds	r3, #8
 8001162:	b2d8      	uxtb	r0, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	4413      	add	r3, r2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fe55 	bl	8000e20 <draw_pixel>
 8001176:	e039      	b.n	80011ec <draw_char+0xf0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	f1c3 0308 	rsb	r3, r3, #8
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	b2da      	uxtb	r2, r3
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4413      	add	r3, r2
 800118e:	b2d8      	uxtb	r0, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001198:	fb02 f303 	mul.w	r3, r2, r3
 800119c:	b2da      	uxtb	r2, r3
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	4413      	add	r3, r2
 80011a2:	b2d9      	uxtb	r1, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	f1c3 0308 	rsb	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4413      	add	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011c0:	4413      	add	r3, r2
 80011c2:	b2dc      	uxtb	r4, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	4413      	add	r3, r2
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011dc:	4413      	add	r3, r2
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	4622      	mov	r2, r4
 80011e8:	f7ff fe48 	bl	8000e7c <fill_rectangle>
        for(j=0; j<8; j++) {
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	3301      	adds	r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	2b07      	cmp	r3, #7
 80011f6:	dda2      	ble.n	800113e <draw_char+0x42>
    for(i=0; i<13; i++ ) {
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2b0c      	cmp	r3, #12
 8001202:	dd8b      	ble.n	800111c <draw_char+0x20>
                }
            }
        }
    }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	bf00      	nop
 8001210:	08006cf8 	.word	0x08006cf8

08001214 <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with 
 * a given colour and size.
 */
void draw_string(char x, char y, unsigned int colour, char size, char *str) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af02      	add	r7, sp, #8
 800121a:	603a      	str	r2, [r7, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	460b      	mov	r3, r1
 8001224:	71bb      	strb	r3, [r7, #6]
 8001226:	4613      	mov	r3, r2
 8001228:	717b      	strb	r3, [r7, #5]
    
    //Work out the size of each character
    int char_width = size * 9;
 800122a:	797a      	ldrb	r2, [r7, #5]
 800122c:	4613      	mov	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4413      	add	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
    //Iterate through each character in the string
    int counter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8001238:	e015      	b.n	8001266 <draw_string+0x52>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 800123a:	79fa      	ldrb	r2, [r7, #7]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	6939      	ldr	r1, [r7, #16]
 8001240:	fb01 f303 	mul.w	r3, r1, r3
 8001244:	4413      	add	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	b2d8      	uxtb	r0, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	6a3a      	ldr	r2, [r7, #32]
 8001250:	4413      	add	r3, r2
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	79b9      	ldrb	r1, [r7, #6]
 8001256:	797b      	ldrb	r3, [r7, #5]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f7ff ff4e 	bl	80010fc <draw_char>
        //Next character
        counter++;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	6a3a      	ldr	r2, [r7, #32]
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1e3      	bne.n	800123a <draw_string+0x26>
    }
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <Demical2BCD>:
extern I2C_HandleTypeDef hi2c2;

#define RTC_ADDR 0x68<<1

uint8_t Demical2BCD(uint8_t num)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	return (num/10)<<4|(num%10);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <Demical2BCD+0x44>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	b258      	sxtb	r0, r3
 8001296:	79fa      	ldrb	r2, [r7, #7]
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <Demical2BCD+0x44>)
 800129a:	fba3 1302 	umull	r1, r3, r3, r2
 800129e:	08d9      	lsrs	r1, r3, #3
 80012a0:	460b      	mov	r3, r1
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	4303      	orrs	r3, r0
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	cccccccd 	.word	0xcccccccd

080012c4 <BCD2Demical>:

uint8_t BCD2Demical(uint8_t num)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	return (num>>4)*10+(num&0x0F);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4413      	add	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <RTC_WriteTime>:

void RTC_WriteTime(DateTime *dt)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
	uint8_t buff[8];
	buff[0] = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	723b      	strb	r3, [r7, #8]
	buff[1] = Demical2BCD(dt->second);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffb9 	bl	800127c <Demical2BCD>
 800130a:	4603      	mov	r3, r0
 800130c:	727b      	strb	r3, [r7, #9]
	buff[2] = Demical2BCD(dt->min);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	785b      	ldrb	r3, [r3, #1]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffb2 	bl	800127c <Demical2BCD>
 8001318:	4603      	mov	r3, r0
 800131a:	72bb      	strb	r3, [r7, #10]
	buff[3] = Demical2BCD(dt->hour);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ffab 	bl	800127c <Demical2BCD>
 8001326:	4603      	mov	r3, r0
 8001328:	72fb      	strb	r3, [r7, #11]
	buff[4] = Demical2BCD(dt->day);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	78db      	ldrb	r3, [r3, #3]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ffa4 	bl	800127c <Demical2BCD>
 8001334:	4603      	mov	r3, r0
 8001336:	733b      	strb	r3, [r7, #12]
	buff[5] = Demical2BCD(dt->date);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	791b      	ldrb	r3, [r3, #4]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff9d 	bl	800127c <Demical2BCD>
 8001342:	4603      	mov	r3, r0
 8001344:	737b      	strb	r3, [r7, #13]
	buff[6] = Demical2BCD(dt->month);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	795b      	ldrb	r3, [r3, #5]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff96 	bl	800127c <Demical2BCD>
 8001350:	4603      	mov	r3, r0
 8001352:	73bb      	strb	r3, [r7, #14]
	buff[7] = Demical2BCD(dt->year);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	799b      	ldrb	r3, [r3, #6]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff8f 	bl	800127c <Demical2BCD>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, RTC_ADDR, buff, 8, 100);
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2308      	movs	r3, #8
 800136c:	21d0      	movs	r1, #208	; 0xd0
 800136e:	4803      	ldr	r0, [pc, #12]	; (800137c <RTC_WriteTime+0x88>)
 8001370:	f001 f8da 	bl	8002528 <HAL_I2C_Master_Transmit>
}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200001f0 	.word	0x200001f0

08001380 <RTC_ReadTime>:

void RTC_ReadTime(DateTime *dt)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af02      	add	r7, sp, #8
 8001386:	6078      	str	r0, [r7, #4]
	uint8_t buff[7];
	uint8_t ADD_reg = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, RTC_ADDR, &ADD_reg, 1, 100);
 800138c:	f107 020f 	add.w	r2, r7, #15
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2301      	movs	r3, #1
 8001396:	21d0      	movs	r1, #208	; 0xd0
 8001398:	4823      	ldr	r0, [pc, #140]	; (8001428 <RTC_ReadTime+0xa8>)
 800139a:	f001 f8c5 	bl	8002528 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, RTC_ADDR, buff, 7, 100);
 800139e:	f107 0210 	add.w	r2, r7, #16
 80013a2:	2364      	movs	r3, #100	; 0x64
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2307      	movs	r3, #7
 80013a8:	21d0      	movs	r1, #208	; 0xd0
 80013aa:	481f      	ldr	r0, [pc, #124]	; (8001428 <RTC_ReadTime+0xa8>)
 80013ac:	f001 f9ba 	bl	8002724 <HAL_I2C_Master_Receive>
	dt->second = BCD2Demical(buff[0]);
 80013b0:	7c3b      	ldrb	r3, [r7, #16]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff86 	bl	80012c4 <BCD2Demical>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	701a      	strb	r2, [r3, #0]
	dt->min = BCD2Demical(buff[1]);
 80013c0:	7c7b      	ldrb	r3, [r7, #17]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff7e 	bl	80012c4 <BCD2Demical>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	705a      	strb	r2, [r3, #1]
	dt->hour = BCD2Demical(buff[2]);
 80013d0:	7cbb      	ldrb	r3, [r7, #18]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff76 	bl	80012c4 <BCD2Demical>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	709a      	strb	r2, [r3, #2]
	dt->day = BCD2Demical(buff[3]);
 80013e0:	7cfb      	ldrb	r3, [r7, #19]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff6e 	bl	80012c4 <BCD2Demical>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	70da      	strb	r2, [r3, #3]
	dt->date = BCD2Demical(buff[4]);
 80013f0:	7d3b      	ldrb	r3, [r7, #20]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff66 	bl	80012c4 <BCD2Demical>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	711a      	strb	r2, [r3, #4]
	dt->month = BCD2Demical(buff[5]);
 8001400:	7d7b      	ldrb	r3, [r7, #21]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff5e 	bl	80012c4 <BCD2Demical>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	715a      	strb	r2, [r3, #5]
	dt->year = BCD2Demical(buff[6]);
 8001410:	7dbb      	ldrb	r3, [r7, #22]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff56 	bl	80012c4 <BCD2Demical>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	719a      	strb	r2, [r3, #6]
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001f0 	.word	0x200001f0

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001432:	f000 fc2f 	bl	8001c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001436:	f000 f96b 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143a:	f000 fa13 	bl	8001864 <MX_GPIO_Init>
  MX_SPI2_Init();
 800143e:	f000 f9db 	bl	80017f8 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001442:	f000 f9ab 	bl	800179c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
   datetime.second = 0;
 8001446:	4baa      	ldr	r3, [pc, #680]	; (80016f0 <main+0x2c4>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
   datetime.min = 32;
 800144c:	4ba8      	ldr	r3, [pc, #672]	; (80016f0 <main+0x2c4>)
 800144e:	2220      	movs	r2, #32
 8001450:	705a      	strb	r2, [r3, #1]
   datetime.hour = 17;
 8001452:	4ba7      	ldr	r3, [pc, #668]	; (80016f0 <main+0x2c4>)
 8001454:	2211      	movs	r2, #17
 8001456:	709a      	strb	r2, [r3, #2]
   datetime.day = 8;
 8001458:	4ba5      	ldr	r3, [pc, #660]	; (80016f0 <main+0x2c4>)
 800145a:	2208      	movs	r2, #8
 800145c:	70da      	strb	r2, [r3, #3]
   datetime.date = 53;
 800145e:	4ba4      	ldr	r3, [pc, #656]	; (80016f0 <main+0x2c4>)
 8001460:	2235      	movs	r2, #53	; 0x35
 8001462:	711a      	strb	r2, [r3, #4]
   datetime.month = 12;
 8001464:	4ba2      	ldr	r3, [pc, #648]	; (80016f0 <main+0x2c4>)
 8001466:	220c      	movs	r2, #12
 8001468:	715a      	strb	r2, [r3, #5]
   datetime.year = 23;
 800146a:	4ba1      	ldr	r3, [pc, #644]	; (80016f0 <main+0x2c4>)
 800146c:	2217      	movs	r2, #23
 800146e:	719a      	strb	r2, [r3, #6]
   RTC_WriteTime(&datetime);
 8001470:	489f      	ldr	r0, [pc, #636]	; (80016f0 <main+0x2c4>)
 8001472:	f7ff ff3f 	bl	80012f4 <RTC_WriteTime>

  	  	lcd_init();
 8001476:	f7ff fbc3 	bl	8000c00 <lcd_init>
		fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
 800147a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	23b0      	movs	r3, #176	; 0xb0
 8001482:	22dc      	movs	r2, #220	; 0xdc
 8001484:	2100      	movs	r1, #0
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fcf8 	bl	8000e7c <fill_rectangle>
		draw_string(50, 50, COLOR_BLUE, 5, "PIF");
 800148c:	4b99      	ldr	r3, [pc, #612]	; (80016f4 <main+0x2c8>)
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2305      	movs	r3, #5
 8001492:	221f      	movs	r2, #31
 8001494:	2132      	movs	r1, #50	; 0x32
 8001496:	2032      	movs	r0, #50	; 0x32
 8001498:	f7ff febc 	bl	8001214 <draw_string>
		HAL_Delay(100);
 800149c:	2064      	movs	r0, #100	; 0x64
 800149e:	f000 fc5b 	bl	8001d58 <HAL_Delay>
		fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_WHITE);
 80014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	23b0      	movs	r3, #176	; 0xb0
 80014aa:	22dc      	movs	r2, #220	; 0xdc
 80014ac:	2100      	movs	r1, #0
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fce4 	bl	8000e7c <fill_rectangle>
		HAL_Delay(100);
 80014b4:	2064      	movs	r0, #100	; 0x64
 80014b6:	f000 fc4f 	bl	8001d58 <HAL_Delay>
		fill_rectangle(20, 20, 200, 45, COLOR_RED);
 80014ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	232d      	movs	r3, #45	; 0x2d
 80014c2:	22c8      	movs	r2, #200	; 0xc8
 80014c4:	2114      	movs	r1, #20
 80014c6:	2014      	movs	r0, #20
 80014c8:	f7ff fcd8 	bl	8000e7c <fill_rectangle>
		HAL_Delay(100);
 80014cc:	2064      	movs	r0, #100	; 0x64
 80014ce:	f000 fc43 	bl	8001d58 <HAL_Delay>
		draw_string(22, 25, COLOR_GOLD, 1.5, "Temperature:");
 80014d2:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <main+0x2cc>)
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80014dc:	2119      	movs	r1, #25
 80014de:	2016      	movs	r0, #22
 80014e0:	f7ff fe98 	bl	8001214 <draw_string>
		HAL_Delay(100);
 80014e4:	2064      	movs	r0, #100	; 0x64
 80014e6:	f000 fc37 	bl	8001d58 <HAL_Delay>
		fill_rectangle(20, 50, 200, 75, COLOR_BLUE);
 80014ea:	231f      	movs	r3, #31
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	234b      	movs	r3, #75	; 0x4b
 80014f0:	22c8      	movs	r2, #200	; 0xc8
 80014f2:	2132      	movs	r1, #50	; 0x32
 80014f4:	2014      	movs	r0, #20
 80014f6:	f7ff fcc1 	bl	8000e7c <fill_rectangle>
		HAL_Delay(100);
 80014fa:	2064      	movs	r0, #100	; 0x64
 80014fc:	f000 fc2c 	bl	8001d58 <HAL_Delay>
		draw_string(22, 57, COLOR_GOLD, 1.5, "Humidity:");
 8001500:	4b7e      	ldr	r3, [pc, #504]	; (80016fc <main+0x2d0>)
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 800150a:	2139      	movs	r1, #57	; 0x39
 800150c:	2016      	movs	r0, #22
 800150e:	f7ff fe81 	bl	8001214 <draw_string>
		HAL_Delay(100);
 8001512:	2064      	movs	r0, #100	; 0x64
 8001514:	f000 fc20 	bl	8001d58 <HAL_Delay>
		//draw_line(5, 20, 50, 50, COLOR_BLACK);
		draw_line(5, 5, 215, 5, COLOR_BLACK);
 8001518:	2300      	movs	r3, #0
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2305      	movs	r3, #5
 800151e:	22d7      	movs	r2, #215	; 0xd7
 8001520:	2105      	movs	r1, #5
 8001522:	2005      	movs	r0, #5
 8001524:	f7ff fd5f 	bl	8000fe6 <draw_line>
		draw_line(5, 171, 215 , 171, COLOR_BLACK);
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	23ab      	movs	r3, #171	; 0xab
 800152e:	22d7      	movs	r2, #215	; 0xd7
 8001530:	21ab      	movs	r1, #171	; 0xab
 8001532:	2005      	movs	r0, #5
 8001534:	f7ff fd57 	bl	8000fe6 <draw_line>
		draw_line(5, 171, 5 , 85, COLOR_BLACK);
 8001538:	2300      	movs	r3, #0
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2355      	movs	r3, #85	; 0x55
 800153e:	2205      	movs	r2, #5
 8001540:	21ab      	movs	r1, #171	; 0xab
 8001542:	2005      	movs	r0, #5
 8001544:	f7ff fd4f 	bl	8000fe6 <draw_line>

  /* USER CODE END 2 */
uint8_t second_temp = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	727b      	strb	r3, [r7, #9]
uint8_t second_present = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
uint8_t min_temp = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	723b      	strb	r3, [r7, #8]
uint8_t min_present = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	73bb      	strb	r3, [r7, #14]
uint8_t hour_temp = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	71fb      	strb	r3, [r7, #7]
uint8_t hour_present = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	737b      	strb	r3, [r7, #13]
uint8_t date_temp = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	71bb      	strb	r3, [r7, #6]
uint8_t date_present = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	733b      	strb	r3, [r7, #12]
uint8_t month_temp = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	717b      	strb	r3, [r7, #5]
uint8_t month_present = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	72fb      	strb	r3, [r7, #11]
uint8_t year_temp = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	713b      	strb	r3, [r7, #4]
uint8_t year_present = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	72bb      	strb	r3, [r7, #10]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 RTC_ReadTime(&datetime);
 8001578:	485d      	ldr	r0, [pc, #372]	; (80016f0 <main+0x2c4>)
 800157a:	f7ff ff01 	bl	8001380 <RTC_ReadTime>
	  second_temp = datetime.second;
 800157e:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <main+0x2c4>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	727b      	strb	r3, [r7, #9]
	  min_temp = datetime.min;
 8001584:	4b5a      	ldr	r3, [pc, #360]	; (80016f0 <main+0x2c4>)
 8001586:	785b      	ldrb	r3, [r3, #1]
 8001588:	723b      	strb	r3, [r7, #8]
	  hour_temp = datetime.hour;
 800158a:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <main+0x2c4>)
 800158c:	789b      	ldrb	r3, [r3, #2]
 800158e:	71fb      	strb	r3, [r7, #7]
	  date_temp = datetime.date;
 8001590:	4b57      	ldr	r3, [pc, #348]	; (80016f0 <main+0x2c4>)
 8001592:	791b      	ldrb	r3, [r3, #4]
 8001594:	71bb      	strb	r3, [r7, #6]
	  month_temp = datetime.month;
 8001596:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <main+0x2c4>)
 8001598:	795b      	ldrb	r3, [r3, #5]
 800159a:	717b      	strb	r3, [r7, #5]
	  year_temp = datetime.year;
 800159c:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <main+0x2c4>)
 800159e:	799b      	ldrb	r3, [r3, #6]
 80015a0:	713b      	strb	r3, [r7, #4]
	  sprintf(str1,"Time %.2d:%.2d:%.2d",datetime.hour,datetime.min,datetime.second );
 80015a2:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <main+0x2c4>)
 80015a4:	789b      	ldrb	r3, [r3, #2]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <main+0x2c4>)
 80015aa:	785b      	ldrb	r3, [r3, #1]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <main+0x2c4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	460b      	mov	r3, r1
 80015b6:	4952      	ldr	r1, [pc, #328]	; (8001700 <main+0x2d4>)
 80015b8:	4852      	ldr	r0, [pc, #328]	; (8001704 <main+0x2d8>)
 80015ba:	f003 fa1d 	bl	80049f8 <siprintf>

	  if(second_temp != second_present)
 80015be:	7a7a      	ldrb	r2, [r7, #9]
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d00a      	beq.n	80015dc <main+0x1b0>
	  {
		  fill_rectangle(140, 100, 160, 110, COLOR_WHITE);
 80015c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	236e      	movs	r3, #110	; 0x6e
 80015ce:	22a0      	movs	r2, #160	; 0xa0
 80015d0:	2164      	movs	r1, #100	; 0x64
 80015d2:	208c      	movs	r0, #140	; 0x8c
 80015d4:	f7ff fc52 	bl	8000e7c <fill_rectangle>
		  second_present = second_temp;
 80015d8:	7a7b      	ldrb	r3, [r7, #9]
 80015da:	73fb      	strb	r3, [r7, #15]
	  }
	  draw_string(40, 100, COLOR_BLACK, 1, str1);
 80015dc:	4b49      	ldr	r3, [pc, #292]	; (8001704 <main+0x2d8>)
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	2200      	movs	r2, #0
 80015e4:	2164      	movs	r1, #100	; 0x64
 80015e6:	2028      	movs	r0, #40	; 0x28
 80015e8:	f7ff fe14 	bl	8001214 <draw_string>

	  if(min_temp != min_present)
 80015ec:	7a3a      	ldrb	r2, [r7, #8]
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d00a      	beq.n	800160a <main+0x1de>
	  	  {
	  		  fill_rectangle(110, 100, 130, 110, COLOR_WHITE);
 80015f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	236e      	movs	r3, #110	; 0x6e
 80015fc:	2282      	movs	r2, #130	; 0x82
 80015fe:	2164      	movs	r1, #100	; 0x64
 8001600:	206e      	movs	r0, #110	; 0x6e
 8001602:	f7ff fc3b 	bl	8000e7c <fill_rectangle>
	  		  min_present = min_temp;
 8001606:	7a3b      	ldrb	r3, [r7, #8]
 8001608:	73bb      	strb	r3, [r7, #14]
	  	  }
	  draw_string(40, 100, COLOR_BLACK, 1, str1);
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <main+0x2d8>)
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2301      	movs	r3, #1
 8001610:	2200      	movs	r2, #0
 8001612:	2164      	movs	r1, #100	; 0x64
 8001614:	2028      	movs	r0, #40	; 0x28
 8001616:	f7ff fdfd 	bl	8001214 <draw_string>

	  if(hour_temp != hour_present)
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	7b7b      	ldrb	r3, [r7, #13]
 800161e:	429a      	cmp	r2, r3
 8001620:	d00a      	beq.n	8001638 <main+0x20c>
	 	  	  {
	 	  		  fill_rectangle(85, 100, 105, 110, COLOR_WHITE);
 8001622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	236e      	movs	r3, #110	; 0x6e
 800162a:	2269      	movs	r2, #105	; 0x69
 800162c:	2164      	movs	r1, #100	; 0x64
 800162e:	2055      	movs	r0, #85	; 0x55
 8001630:	f7ff fc24 	bl	8000e7c <fill_rectangle>
	 	  		  hour_present = hour_temp;
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	737b      	strb	r3, [r7, #13]
	 	  	  }
	  draw_string(40, 100, COLOR_BLACK, 1, str1);
 8001638:	4b32      	ldr	r3, [pc, #200]	; (8001704 <main+0x2d8>)
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	2200      	movs	r2, #0
 8001640:	2164      	movs	r1, #100	; 0x64
 8001642:	2028      	movs	r0, #40	; 0x28
 8001644:	f7ff fde6 	bl	8001214 <draw_string>

	  sprintf(str2,"Date %.2d/%.2d/%.2d",datetime.date,datetime.month,datetime.year );
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <main+0x2c4>)
 800164a:	791b      	ldrb	r3, [r3, #4]
 800164c:	461a      	mov	r2, r3
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <main+0x2c4>)
 8001650:	795b      	ldrb	r3, [r3, #5]
 8001652:	4619      	mov	r1, r3
 8001654:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <main+0x2c4>)
 8001656:	799b      	ldrb	r3, [r3, #6]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	460b      	mov	r3, r1
 800165c:	492a      	ldr	r1, [pc, #168]	; (8001708 <main+0x2dc>)
 800165e:	482b      	ldr	r0, [pc, #172]	; (800170c <main+0x2e0>)
 8001660:	f003 f9ca 	bl	80049f8 <siprintf>

	  if(date_temp != date_present)
 8001664:	79ba      	ldrb	r2, [r7, #6]
 8001666:	7b3b      	ldrb	r3, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d00a      	beq.n	8001682 <main+0x256>
	  	 	  	  {
	  	 	  		  fill_rectangle(85, 115, 105, 135, COLOR_WHITE);
 800166c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2387      	movs	r3, #135	; 0x87
 8001674:	2269      	movs	r2, #105	; 0x69
 8001676:	2173      	movs	r1, #115	; 0x73
 8001678:	2055      	movs	r0, #85	; 0x55
 800167a:	f7ff fbff 	bl	8000e7c <fill_rectangle>
	  	 	  		  date_present = date_temp;
 800167e:	79bb      	ldrb	r3, [r7, #6]
 8001680:	733b      	strb	r3, [r7, #12]
	  	 	  	  }
	  	  draw_string(40, 120, COLOR_BLACK, 1, str2);
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <main+0x2e0>)
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2301      	movs	r3, #1
 8001688:	2200      	movs	r2, #0
 800168a:	2178      	movs	r1, #120	; 0x78
 800168c:	2028      	movs	r0, #40	; 0x28
 800168e:	f7ff fdc1 	bl	8001214 <draw_string>

	  	if(month_temp != month_present)
 8001692:	797a      	ldrb	r2, [r7, #5]
 8001694:	7afb      	ldrb	r3, [r7, #11]
 8001696:	429a      	cmp	r2, r3
 8001698:	d00a      	beq.n	80016b0 <main+0x284>
	  		 	  	  {
	  		 	  		  fill_rectangle(110, 115, 130, 135, COLOR_WHITE);
 800169a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2387      	movs	r3, #135	; 0x87
 80016a2:	2282      	movs	r2, #130	; 0x82
 80016a4:	2173      	movs	r1, #115	; 0x73
 80016a6:	206e      	movs	r0, #110	; 0x6e
 80016a8:	f7ff fbe8 	bl	8000e7c <fill_rectangle>
	  		 	  		  month_present = month_temp;
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	72fb      	strb	r3, [r7, #11]
	  		 	  	  }
	  		  draw_string(40, 120, COLOR_BLACK, 1, str2);
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <main+0x2e0>)
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2301      	movs	r3, #1
 80016b6:	2200      	movs	r2, #0
 80016b8:	2178      	movs	r1, #120	; 0x78
 80016ba:	2028      	movs	r0, #40	; 0x28
 80016bc:	f7ff fdaa 	bl	8001214 <draw_string>

	  		if(year_temp != year_present)
 80016c0:	793a      	ldrb	r2, [r7, #4]
 80016c2:	7abb      	ldrb	r3, [r7, #10]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d00a      	beq.n	80016de <main+0x2b2>
	  			 	  	  {
	  			 	  		  fill_rectangle(135, 115, 160, 135, COLOR_WHITE);
 80016c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2387      	movs	r3, #135	; 0x87
 80016d0:	22a0      	movs	r2, #160	; 0xa0
 80016d2:	2173      	movs	r1, #115	; 0x73
 80016d4:	2087      	movs	r0, #135	; 0x87
 80016d6:	f7ff fbd1 	bl	8000e7c <fill_rectangle>
	  			 	  		  year_present = year_temp;
 80016da:	793b      	ldrb	r3, [r7, #4]
 80016dc:	72bb      	strb	r3, [r7, #10]
	  			 	  	  }
	  			  draw_string(40, 120, COLOR_BLACK, 1, str2);
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <main+0x2e0>)
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2301      	movs	r3, #1
 80016e4:	2200      	movs	r2, #0
 80016e6:	2178      	movs	r1, #120	; 0x78
 80016e8:	2028      	movs	r0, #40	; 0x28
 80016ea:	f7ff fd93 	bl	8001214 <draw_string>
	 RTC_ReadTime(&datetime);
 80016ee:	e743      	b.n	8001578 <main+0x14c>
 80016f0:	200002b4 	.word	0x200002b4
 80016f4:	08006cb0 	.word	0x08006cb0
 80016f8:	08006cb4 	.word	0x08006cb4
 80016fc:	08006cc4 	.word	0x08006cc4
 8001700:	08006cd0 	.word	0x08006cd0
 8001704:	2000029c 	.word	0x2000029c
 8001708:	08006ce4 	.word	0x08006ce4
 800170c:	200002a8 	.word	0x200002a8

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b090      	sub	sp, #64	; 0x40
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	2228      	movs	r2, #40	; 0x28
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f003 f9cd 	bl	8004abe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001732:	2301      	movs	r3, #1
 8001734:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001744:	2302      	movs	r3, #2
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800174e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0318 	add.w	r3, r7, #24
 8001758:	4618      	mov	r0, r3
 800175a:	f001 fdd5 	bl	8003308 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001764:	f000 f8ca 	bl	80018fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	230f      	movs	r3, #15
 800176a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2302      	movs	r3, #2
 800176e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f002 f842 	bl	800380c <HAL_RCC_ClockConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800178e:	f000 f8b5 	bl	80018fc <Error_Handler>
  }
}
 8001792:	bf00      	nop
 8001794:	3740      	adds	r7, #64	; 0x40
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_I2C2_Init+0x50>)
 80017a2:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <MX_I2C2_Init+0x54>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_I2C2_Init+0x50>)
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <MX_I2C2_Init+0x58>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_I2C2_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_I2C2_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_I2C2_Init+0x50>)
 80017ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <MX_I2C2_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_I2C2_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_I2C2_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_I2C2_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_I2C2_Init+0x50>)
 80017da:	f000 fd61 	bl	80022a0 <HAL_I2C_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017e4:	f000 f88a 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200001f0 	.word	0x200001f0
 80017f0:	40005800 	.word	0x40005800
 80017f4:	000186a0 	.word	0x000186a0

080017f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_SPI2_Init+0x64>)
 80017fe:	4a18      	ldr	r2, [pc, #96]	; (8001860 <MX_SPI2_Init+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_SPI2_Init+0x64>)
 8001804:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001808:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_SPI2_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <MX_SPI2_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_SPI2_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_SPI2_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_SPI2_Init+0x64>)
 8001824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001828:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_SPI2_Init+0x64>)
 800182c:	2228      	movs	r2, #40	; 0x28
 800182e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <MX_SPI2_Init+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_SPI2_Init+0x64>)
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <MX_SPI2_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_SPI2_Init+0x64>)
 8001844:	220a      	movs	r2, #10
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_SPI2_Init+0x64>)
 800184a:	f002 f959 	bl	8003b00 <HAL_SPI_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001854:	f000 f852 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000244 	.word	0x20000244
 8001860:	40003800 	.word	0x40003800

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <MX_GPIO_Init+0x90>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <MX_GPIO_Init+0x90>)
 800187e:	f043 0320 	orr.w	r3, r3, #32
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <MX_GPIO_Init+0x90>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_GPIO_Init+0x90>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <MX_GPIO_Init+0x90>)
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_GPIO_Init+0x90>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_GPIO_Init+0x90>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <MX_GPIO_Init+0x90>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_GPIO_Init+0x90>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSX_Pin|RESX_Pin|CMD_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 7160 	mov.w	r1, #896	; 0x380
 80018c6:	480c      	ldr	r0, [pc, #48]	; (80018f8 <MX_GPIO_Init+0x94>)
 80018c8:	f000 fcd2 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSX_Pin RESX_Pin CMD_Pin */
  GPIO_InitStruct.Pin = CSX_Pin|RESX_Pin|CMD_Pin;
 80018cc:	f44f 7360 	mov.w	r3, #896	; 0x380
 80018d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2302      	movs	r3, #2
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4619      	mov	r1, r3
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_GPIO_Init+0x94>)
 80018e6:	f000 fb3f 	bl	8001f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ea:	bf00      	nop
 80018ec:	3720      	adds	r7, #32
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010c00 	.word	0x40010c00

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_MspInit+0x5c>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <HAL_MspInit+0x5c>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_MspInit+0x5c>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_MspInit+0x5c>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_MspInit+0x5c>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_MspInit+0x5c>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_MspInit+0x60>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_MspInit+0x60>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000

0800196c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <HAL_I2C_MspInit+0x74>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d124      	bne.n	80019d6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_I2C_MspInit+0x78>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <HAL_I2C_MspInit+0x78>)
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_I2C_MspInit+0x78>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019aa:	2312      	movs	r3, #18
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4619      	mov	r1, r3
 80019b8:	480b      	ldr	r0, [pc, #44]	; (80019e8 <HAL_I2C_MspInit+0x7c>)
 80019ba:	f000 fad5 	bl	8001f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_I2C_MspInit+0x78>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_I2C_MspInit+0x78>)
 80019c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_I2C_MspInit+0x78>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40005800 	.word	0x40005800
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010c00 	.word	0x40010c00

080019ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_SPI_MspInit+0x74>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d124      	bne.n	8001a56 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_SPI_MspInit+0x78>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <HAL_SPI_MspInit+0x78>)
 8001a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a16:	61d3      	str	r3, [r2, #28]
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_SPI_MspInit+0x78>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_SPI_MspInit+0x78>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_SPI_MspInit+0x78>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_SPI_MspInit+0x78>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a3c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <HAL_SPI_MspInit+0x7c>)
 8001a52:	f000 fa89 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40003800 	.word	0x40003800
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010c00 	.word	0x40010c00

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <NMI_Handler+0x4>

08001a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <MemManage_Handler+0x4>

08001a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab2:	f000 f935 	bl	8001d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <_kill>:

int _kill(int pid, int sig)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ad2:	f003 f847 	bl	8004b64 <__errno>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2216      	movs	r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
  return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_exit>:

void _exit (int status)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ffe7 	bl	8001ac8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001afa:	e7fe      	b.n	8001afa <_exit+0x12>

08001afc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e00a      	b.n	8001b24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b0e:	f3af 8000 	nop.w
 8001b12:	4601      	mov	r1, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	60ba      	str	r2, [r7, #8]
 8001b1a:	b2ca      	uxtb	r2, r1
 8001b1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbf0      	blt.n	8001b0e <_read+0x12>
  }

  return len;
 8001b2c:	687b      	ldr	r3, [r7, #4]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e009      	b.n	8001b5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60ba      	str	r2, [r7, #8]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dbf1      	blt.n	8001b48 <_write+0x12>
  }
  return len;
 8001b64:	687b      	ldr	r3, [r7, #4]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_close>:

int _close(int file)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b94:	605a      	str	r2, [r3, #4]
  return 0;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <_isatty>:

int _isatty(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
	...

08001bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <_sbrk+0x5c>)
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <_sbrk+0x60>)
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <_sbrk+0x64>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <_sbrk+0x68>)
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d207      	bcs.n	8001c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c00:	f002 ffb0 	bl	8004b64 <__errno>
 8001c04:	4603      	mov	r3, r0
 8001c06:	220c      	movs	r2, #12
 8001c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e009      	b.n	8001c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <_sbrk+0x64>)
 8001c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20005000 	.word	0x20005000
 8001c30:	00000400 	.word	0x00000400
 8001c34:	200002bc 	.word	0x200002bc
 8001c38:	20000410 	.word	0x20000410

08001c3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c48:	f7ff fff8 	bl	8001c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c4c:	480b      	ldr	r0, [pc, #44]	; (8001c7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c4e:	490c      	ldr	r1, [pc, #48]	; (8001c80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c50:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c54:	e002      	b.n	8001c5c <LoopCopyDataInit>

08001c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5a:	3304      	adds	r3, #4

08001c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c60:	d3f9      	bcc.n	8001c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c64:	4c09      	ldr	r4, [pc, #36]	; (8001c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c68:	e001      	b.n	8001c6e <LoopFillZerobss>

08001c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c6c:	3204      	adds	r2, #4

08001c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c70:	d3fb      	bcc.n	8001c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c72:	f002 ff7d 	bl	8004b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c76:	f7ff fbd9 	bl	800142c <main>
  bx lr
 8001c7a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c80:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c84:	0800756c 	.word	0x0800756c
  ldr r2, =_sbss
 8001c88:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c8c:	20000410 	.word	0x20000410

08001c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC1_2_IRQHandler>
	...

08001c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_Init+0x28>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_Init+0x28>)
 8001c9e:	f043 0310 	orr.w	r3, r3, #16
 8001ca2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f000 f92b 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001caa:	200f      	movs	r0, #15
 8001cac:	f000 f808 	bl	8001cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb0:	f7ff fe2a 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40022000 	.word	0x40022000

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x54>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x58>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f935 	bl	8001f4e <HAL_SYSTICK_Config>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00e      	b.n	8001d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d80a      	bhi.n	8001d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f000 f90b 	bl	8001f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <HAL_InitTick+0x5c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_IncTick+0x1c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_IncTick+0x20>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a03      	ldr	r2, [pc, #12]	; (8001d40 <HAL_IncTick+0x20>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	200002c0 	.word	0x200002c0

08001d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b02      	ldr	r3, [pc, #8]	; (8001d54 <HAL_GetTick+0x10>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	200002c0 	.word	0x200002c0

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff fff0 	bl	8001d44 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffe0 	bl	8001d44 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ecc:	d301      	bcc.n	8001ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00f      	b.n	8001ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <SysTick_Config+0x40>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eda:	210f      	movs	r1, #15
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f7ff ff90 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <SysTick_Config+0x40>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <SysTick_Config+0x40>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff49 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f28:	f7ff ff5e 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff90 	bl	8001e58 <NVIC_EncodePriority>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5f 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffb0 	bl	8001ebc <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b08b      	sub	sp, #44	; 0x2c
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7a:	e169      	b.n	8002250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	f040 8158 	bne.w	800224a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4a9a      	ldr	r2, [pc, #616]	; (8002208 <HAL_GPIO_Init+0x2a0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d05e      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
 8001fa4:	4a98      	ldr	r2, [pc, #608]	; (8002208 <HAL_GPIO_Init+0x2a0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d875      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001faa:	4a98      	ldr	r2, [pc, #608]	; (800220c <HAL_GPIO_Init+0x2a4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d058      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
 8001fb0:	4a96      	ldr	r2, [pc, #600]	; (800220c <HAL_GPIO_Init+0x2a4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d86f      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001fb6:	4a96      	ldr	r2, [pc, #600]	; (8002210 <HAL_GPIO_Init+0x2a8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d052      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
 8001fbc:	4a94      	ldr	r2, [pc, #592]	; (8002210 <HAL_GPIO_Init+0x2a8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d869      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001fc2:	4a94      	ldr	r2, [pc, #592]	; (8002214 <HAL_GPIO_Init+0x2ac>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d04c      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
 8001fc8:	4a92      	ldr	r2, [pc, #584]	; (8002214 <HAL_GPIO_Init+0x2ac>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d863      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001fce:	4a92      	ldr	r2, [pc, #584]	; (8002218 <HAL_GPIO_Init+0x2b0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d046      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
 8001fd4:	4a90      	ldr	r2, [pc, #576]	; (8002218 <HAL_GPIO_Init+0x2b0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d85d      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001fda:	2b12      	cmp	r3, #18
 8001fdc:	d82a      	bhi.n	8002034 <HAL_GPIO_Init+0xcc>
 8001fde:	2b12      	cmp	r3, #18
 8001fe0:	d859      	bhi.n	8002096 <HAL_GPIO_Init+0x12e>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <HAL_GPIO_Init+0x80>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08002063 	.word	0x08002063
 8001fec:	0800203d 	.word	0x0800203d
 8001ff0:	0800204f 	.word	0x0800204f
 8001ff4:	08002091 	.word	0x08002091
 8001ff8:	08002097 	.word	0x08002097
 8001ffc:	08002097 	.word	0x08002097
 8002000:	08002097 	.word	0x08002097
 8002004:	08002097 	.word	0x08002097
 8002008:	08002097 	.word	0x08002097
 800200c:	08002097 	.word	0x08002097
 8002010:	08002097 	.word	0x08002097
 8002014:	08002097 	.word	0x08002097
 8002018:	08002097 	.word	0x08002097
 800201c:	08002097 	.word	0x08002097
 8002020:	08002097 	.word	0x08002097
 8002024:	08002097 	.word	0x08002097
 8002028:	08002097 	.word	0x08002097
 800202c:	08002045 	.word	0x08002045
 8002030:	08002059 	.word	0x08002059
 8002034:	4a79      	ldr	r2, [pc, #484]	; (800221c <HAL_GPIO_Init+0x2b4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800203a:	e02c      	b.n	8002096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	623b      	str	r3, [r7, #32]
          break;
 8002042:	e029      	b.n	8002098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	3304      	adds	r3, #4
 800204a:	623b      	str	r3, [r7, #32]
          break;
 800204c:	e024      	b.n	8002098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	3308      	adds	r3, #8
 8002054:	623b      	str	r3, [r7, #32]
          break;
 8002056:	e01f      	b.n	8002098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	330c      	adds	r3, #12
 800205e:	623b      	str	r3, [r7, #32]
          break;
 8002060:	e01a      	b.n	8002098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800206a:	2304      	movs	r3, #4
 800206c:	623b      	str	r3, [r7, #32]
          break;
 800206e:	e013      	b.n	8002098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002078:	2308      	movs	r3, #8
 800207a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69fa      	ldr	r2, [r7, #28]
 8002080:	611a      	str	r2, [r3, #16]
          break;
 8002082:	e009      	b.n	8002098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002084:	2308      	movs	r3, #8
 8002086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	615a      	str	r2, [r3, #20]
          break;
 800208e:	e003      	b.n	8002098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
          break;
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x130>
          break;
 8002096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2bff      	cmp	r3, #255	; 0xff
 800209c:	d801      	bhi.n	80020a2 <HAL_GPIO_Init+0x13a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	e001      	b.n	80020a6 <HAL_GPIO_Init+0x13e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2bff      	cmp	r3, #255	; 0xff
 80020ac:	d802      	bhi.n	80020b4 <HAL_GPIO_Init+0x14c>
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	e002      	b.n	80020ba <HAL_GPIO_Init+0x152>
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	3b08      	subs	r3, #8
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	210f      	movs	r1, #15
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	401a      	ands	r2, r3
 80020cc:	6a39      	ldr	r1, [r7, #32]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	431a      	orrs	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80b1 	beq.w	800224a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020e8:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <HAL_GPIO_Init+0x2b8>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a4c      	ldr	r2, [pc, #304]	; (8002220 <HAL_GPIO_Init+0x2b8>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b4a      	ldr	r3, [pc, #296]	; (8002220 <HAL_GPIO_Init+0x2b8>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002100:	4a48      	ldr	r2, [pc, #288]	; (8002224 <HAL_GPIO_Init+0x2bc>)
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a40      	ldr	r2, [pc, #256]	; (8002228 <HAL_GPIO_Init+0x2c0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <HAL_GPIO_Init+0x1ec>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3f      	ldr	r2, [pc, #252]	; (800222c <HAL_GPIO_Init+0x2c4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00d      	beq.n	8002150 <HAL_GPIO_Init+0x1e8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3e      	ldr	r2, [pc, #248]	; (8002230 <HAL_GPIO_Init+0x2c8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <HAL_GPIO_Init+0x1e4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3d      	ldr	r2, [pc, #244]	; (8002234 <HAL_GPIO_Init+0x2cc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_GPIO_Init+0x1e0>
 8002144:	2303      	movs	r3, #3
 8002146:	e006      	b.n	8002156 <HAL_GPIO_Init+0x1ee>
 8002148:	2304      	movs	r3, #4
 800214a:	e004      	b.n	8002156 <HAL_GPIO_Init+0x1ee>
 800214c:	2302      	movs	r3, #2
 800214e:	e002      	b.n	8002156 <HAL_GPIO_Init+0x1ee>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_GPIO_Init+0x1ee>
 8002154:	2300      	movs	r3, #0
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4093      	lsls	r3, r2
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002166:	492f      	ldr	r1, [pc, #188]	; (8002224 <HAL_GPIO_Init+0x2bc>)
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	492c      	ldr	r1, [pc, #176]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	43db      	mvns	r3, r3
 8002196:	4928      	ldr	r1, [pc, #160]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 8002198:	4013      	ands	r3, r2
 800219a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	4922      	ldr	r1, [pc, #136]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60cb      	str	r3, [r1, #12]
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	43db      	mvns	r3, r3
 80021be:	491e      	ldr	r1, [pc, #120]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4918      	ldr	r1, [pc, #96]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4914      	ldr	r1, [pc, #80]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d021      	beq.n	800223c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	490e      	ldr	r1, [pc, #56]	; (8002238 <HAL_GPIO_Init+0x2d0>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]
 8002204:	e021      	b.n	800224a <HAL_GPIO_Init+0x2e2>
 8002206:	bf00      	nop
 8002208:	10320000 	.word	0x10320000
 800220c:	10310000 	.word	0x10310000
 8002210:	10220000 	.word	0x10220000
 8002214:	10210000 	.word	0x10210000
 8002218:	10120000 	.word	0x10120000
 800221c:	10110000 	.word	0x10110000
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000
 8002228:	40010800 	.word	0x40010800
 800222c:	40010c00 	.word	0x40010c00
 8002230:	40011000 	.word	0x40011000
 8002234:	40011400 	.word	0x40011400
 8002238:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_GPIO_Init+0x304>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	43db      	mvns	r3, r3
 8002244:	4909      	ldr	r1, [pc, #36]	; (800226c <HAL_GPIO_Init+0x304>)
 8002246:	4013      	ands	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	3301      	adds	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	f47f ae8e 	bne.w	8001f7c <HAL_GPIO_Init+0x14>
  }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	372c      	adds	r7, #44	; 0x2c
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e12b      	b.n	800250a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fb50 	bl	800196c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2224      	movs	r2, #36	; 0x24
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002304:	f001 fbca 	bl	8003a9c <HAL_RCC_GetPCLK1Freq>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a81      	ldr	r2, [pc, #516]	; (8002514 <HAL_I2C_Init+0x274>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d807      	bhi.n	8002324 <HAL_I2C_Init+0x84>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4a80      	ldr	r2, [pc, #512]	; (8002518 <HAL_I2C_Init+0x278>)
 8002318:	4293      	cmp	r3, r2
 800231a:	bf94      	ite	ls
 800231c:	2301      	movls	r3, #1
 800231e:	2300      	movhi	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e006      	b.n	8002332 <HAL_I2C_Init+0x92>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a7d      	ldr	r2, [pc, #500]	; (800251c <HAL_I2C_Init+0x27c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0e7      	b.n	800250a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4a78      	ldr	r2, [pc, #480]	; (8002520 <HAL_I2C_Init+0x280>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0c9b      	lsrs	r3, r3, #18
 8002344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a6a      	ldr	r2, [pc, #424]	; (8002514 <HAL_I2C_Init+0x274>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d802      	bhi.n	8002374 <HAL_I2C_Init+0xd4>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3301      	adds	r3, #1
 8002372:	e009      	b.n	8002388 <HAL_I2C_Init+0xe8>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	4a69      	ldr	r2, [pc, #420]	; (8002524 <HAL_I2C_Init+0x284>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	3301      	adds	r3, #1
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	430b      	orrs	r3, r1
 800238e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800239a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	495c      	ldr	r1, [pc, #368]	; (8002514 <HAL_I2C_Init+0x274>)
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d819      	bhi.n	80023dc <HAL_I2C_Init+0x13c>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e59      	subs	r1, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b6:	1c59      	adds	r1, r3, #1
 80023b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023bc:	400b      	ands	r3, r1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_I2C_Init+0x138>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1e59      	subs	r1, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d6:	e051      	b.n	800247c <HAL_I2C_Init+0x1dc>
 80023d8:	2304      	movs	r3, #4
 80023da:	e04f      	b.n	800247c <HAL_I2C_Init+0x1dc>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <HAL_I2C_Init+0x168>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	440b      	add	r3, r1
 80023f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e012      	b.n	800242e <HAL_I2C_Init+0x18e>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e58      	subs	r0, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	0099      	lsls	r1, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	fbb0 f3f3 	udiv	r3, r0, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x196>
 8002432:	2301      	movs	r3, #1
 8002434:	e022      	b.n	800247c <HAL_I2C_Init+0x1dc>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10e      	bne.n	800245c <HAL_I2C_Init+0x1bc>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e58      	subs	r0, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	440b      	add	r3, r1
 800244c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245a:	e00f      	b.n	800247c <HAL_I2C_Init+0x1dc>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	6809      	ldr	r1, [r1, #0]
 8002480:	4313      	orrs	r3, r2
 8002482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6911      	ldr	r1, [r2, #16]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68d2      	ldr	r2, [r2, #12]
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	430b      	orrs	r3, r1
 80024be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	000186a0 	.word	0x000186a0
 8002518:	001e847f 	.word	0x001e847f
 800251c:	003d08ff 	.word	0x003d08ff
 8002520:	431bde83 	.word	0x431bde83
 8002524:	10624dd3 	.word	0x10624dd3

08002528 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	461a      	mov	r2, r3
 8002534:	460b      	mov	r3, r1
 8002536:	817b      	strh	r3, [r7, #10]
 8002538:	4613      	mov	r3, r2
 800253a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff fc02 	bl	8001d44 <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b20      	cmp	r3, #32
 800254c:	f040 80e0 	bne.w	8002710 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2319      	movs	r3, #25
 8002556:	2201      	movs	r2, #1
 8002558:	4970      	ldr	r1, [pc, #448]	; (800271c <HAL_I2C_Master_Transmit+0x1f4>)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fc9e 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002566:	2302      	movs	r3, #2
 8002568:	e0d3      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_I2C_Master_Transmit+0x50>
 8002574:	2302      	movs	r3, #2
 8002576:	e0cc      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d007      	beq.n	800259e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0201 	orr.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2221      	movs	r2, #33	; 0x21
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2210      	movs	r2, #16
 80025ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	893a      	ldrh	r2, [r7, #8]
 80025ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_I2C_Master_Transmit+0x1f8>)
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025e0:	8979      	ldrh	r1, [r7, #10]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	6a3a      	ldr	r2, [r7, #32]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fb08 	bl	8002bfc <I2C_MasterRequestWrite>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e08d      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800260c:	e066      	b.n	80026dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	6a39      	ldr	r1, [r7, #32]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fd5c 	bl	80030d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b04      	cmp	r3, #4
 8002624:	d107      	bne.n	8002636 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06b      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d11b      	bne.n	80026b0 <HAL_I2C_Master_Transmit+0x188>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d017      	beq.n	80026b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	6a39      	ldr	r1, [r7, #32]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fd53 	bl	8003160 <I2C_WaitOnBTFFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d107      	bne.n	80026d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e01a      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d194      	bne.n	800260e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	e000      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002710:	2302      	movs	r3, #2
  }
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	00100002 	.word	0x00100002
 8002720:	ffff0000 	.word	0xffff0000

08002724 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	461a      	mov	r2, r3
 8002730:	460b      	mov	r3, r1
 8002732:	817b      	strh	r3, [r7, #10]
 8002734:	4613      	mov	r3, r2
 8002736:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff fb02 	bl	8001d44 <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b20      	cmp	r3, #32
 800274c:	f040 824b 	bne.w	8002be6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2319      	movs	r3, #25
 8002756:	2201      	movs	r2, #1
 8002758:	497f      	ldr	r1, [pc, #508]	; (8002958 <HAL_I2C_Master_Receive+0x234>)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fb9e 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
 8002768:	e23e      	b.n	8002be8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_I2C_Master_Receive+0x54>
 8002774:	2302      	movs	r3, #2
 8002776:	e237      	b.n	8002be8 <HAL_I2C_Master_Receive+0x4c4>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d007      	beq.n	800279e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2222      	movs	r2, #34	; 0x22
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2210      	movs	r2, #16
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	893a      	ldrh	r2, [r7, #8]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a5f      	ldr	r2, [pc, #380]	; (800295c <HAL_I2C_Master_Receive+0x238>)
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027e0:	8979      	ldrh	r1, [r7, #10]
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fa8a 	bl	8002d00 <I2C_MasterRequestRead>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e1f8      	b.n	8002be8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d113      	bne.n	8002826 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e1cc      	b.n	8002bc0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	2b01      	cmp	r3, #1
 800282c:	d11e      	bne.n	800286c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800283e:	b672      	cpsid	i
}
 8002840:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002866:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002868:	b662      	cpsie	i
}
 800286a:	e035      	b.n	80028d8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	2b02      	cmp	r3, #2
 8002872:	d11e      	bne.n	80028b2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002882:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002884:	b672      	cpsid	i
}
 8002886:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028ae:	b662      	cpsie	i
}
 80028b0:	e012      	b.n	80028d8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80028d8:	e172      	b.n	8002bc0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	2b03      	cmp	r3, #3
 80028e0:	f200 811f 	bhi.w	8002b22 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d123      	bne.n	8002934 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fc7d 	bl	80031f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e173      	b.n	8002be8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002932:	e145      	b.n	8002bc0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	2b02      	cmp	r3, #2
 800293a:	d152      	bne.n	80029e2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	2200      	movs	r2, #0
 8002944:	4906      	ldr	r1, [pc, #24]	; (8002960 <HAL_I2C_Master_Receive+0x23c>)
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 faa8 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e148      	b.n	8002be8 <HAL_I2C_Master_Receive+0x4c4>
 8002956:	bf00      	nop
 8002958:	00100002 	.word	0x00100002
 800295c:	ffff0000 	.word	0xffff0000
 8002960:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002964:	b672      	cpsid	i
}
 8002966:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029aa:	b662      	cpsie	i
}
 80029ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029e0:	e0ee      	b.n	8002bc0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	2200      	movs	r2, #0
 80029ea:	4981      	ldr	r1, [pc, #516]	; (8002bf0 <HAL_I2C_Master_Receive+0x4cc>)
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fa55 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0f5      	b.n	8002be8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0c:	b672      	cpsid	i
}
 8002a0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a42:	4b6c      	ldr	r3, [pc, #432]	; (8002bf4 <HAL_I2C_Master_Receive+0x4d0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	08db      	lsrs	r3, r3, #3
 8002a48:	4a6b      	ldr	r2, [pc, #428]	; (8002bf8 <HAL_I2C_Master_Receive+0x4d4>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0a1a      	lsrs	r2, r3, #8
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00da      	lsls	r2, r3, #3
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d118      	bne.n	8002a9a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0220 	orr.w	r2, r3, #32
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a8a:	b662      	cpsie	i
}
 8002a8c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0a6      	b.n	8002be8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d1d9      	bne.n	8002a5c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002aea:	b662      	cpsie	i
}
 8002aec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b20:	e04e      	b.n	8002bc0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fb62 	bl	80031f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e058      	b.n	8002be8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d124      	bne.n	8002bc0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d107      	bne.n	8002b8e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f47f ae88 	bne.w	80028da <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
  }
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3728      	adds	r7, #40	; 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	00010004 	.word	0x00010004
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	14f8b589 	.word	0x14f8b589

08002bfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d006      	beq.n	8002c26 <I2C_MasterRequestWrite+0x2a>
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d003      	beq.n	8002c26 <I2C_MasterRequestWrite+0x2a>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c24:	d108      	bne.n	8002c38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e00b      	b.n	8002c50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d107      	bne.n	8002c50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f91d 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00d      	beq.n	8002c84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c76:	d103      	bne.n	8002c80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e035      	b.n	8002cf0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c8c:	d108      	bne.n	8002ca0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c8e:	897b      	ldrh	r3, [r7, #10]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c9c:	611a      	str	r2, [r3, #16]
 8002c9e:	e01b      	b.n	8002cd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ca0:	897b      	ldrh	r3, [r7, #10]
 8002ca2:	11db      	asrs	r3, r3, #7
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	f003 0306 	and.w	r3, r3, #6
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f063 030f 	orn	r3, r3, #15
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	490e      	ldr	r1, [pc, #56]	; (8002cf8 <I2C_MasterRequestWrite+0xfc>)
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f966 	bl	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e010      	b.n	8002cf0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4907      	ldr	r1, [pc, #28]	; (8002cfc <I2C_MasterRequestWrite+0x100>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f956 	bl	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	00010008 	.word	0x00010008
 8002cfc:	00010002 	.word	0x00010002

08002d00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d006      	beq.n	8002d3a <I2C_MasterRequestRead+0x3a>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d003      	beq.n	8002d3a <I2C_MasterRequestRead+0x3a>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d38:	d108      	bne.n	8002d4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e00b      	b.n	8002d64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	2b11      	cmp	r3, #17
 8002d52:	d107      	bne.n	8002d64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f893 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8a:	d103      	bne.n	8002d94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e079      	b.n	8002e8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da0:	d108      	bne.n	8002db4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	611a      	str	r2, [r3, #16]
 8002db2:	e05f      	b.n	8002e74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002db4:	897b      	ldrh	r3, [r7, #10]
 8002db6:	11db      	asrs	r3, r3, #7
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f003 0306 	and.w	r3, r3, #6
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f063 030f 	orn	r3, r3, #15
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4930      	ldr	r1, [pc, #192]	; (8002e94 <I2C_MasterRequestRead+0x194>)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f8dc 	bl	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e054      	b.n	8002e8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002de2:	897b      	ldrh	r3, [r7, #10]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4929      	ldr	r1, [pc, #164]	; (8002e98 <I2C_MasterRequestRead+0x198>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f8cc 	bl	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e044      	b.n	8002e8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f831 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00d      	beq.n	8002e5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4e:	d103      	bne.n	8002e58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e017      	b.n	8002e8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e5c:	897b      	ldrh	r3, [r7, #10]
 8002e5e:	11db      	asrs	r3, r3, #7
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f003 0306 	and.w	r3, r3, #6
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f063 030e 	orn	r3, r3, #14
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4907      	ldr	r1, [pc, #28]	; (8002e98 <I2C_MasterRequestRead+0x198>)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f888 	bl	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	00010008 	.word	0x00010008
 8002e98:	00010002 	.word	0x00010002

08002e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eac:	e048      	b.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d044      	beq.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb6:	f7fe ff45 	bl	8001d44 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d302      	bcc.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d139      	bne.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10d      	bne.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	43da      	mvns	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	e00c      	b.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d116      	bne.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e023      	b.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10d      	bne.n	8002f66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	43da      	mvns	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4013      	ands	r3, r2
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	e00c      	b.n	8002f80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	43da      	mvns	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d093      	beq.n	8002eae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f9e:	e071      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fae:	d123      	bne.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e067      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d041      	beq.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003000:	f7fe fea0 	bl	8001d44 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	d302      	bcc.n	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d136      	bne.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10c      	bne.n	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf14      	ite	ne
 8003032:	2301      	movne	r3, #1
 8003034:	2300      	moveq	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	e00b      	b.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	43da      	mvns	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4013      	ands	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e021      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10c      	bne.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	43da      	mvns	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4013      	ands	r3, r2
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e00b      	b.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf14      	ite	ne
 80030ba:	2301      	movne	r3, #1
 80030bc:	2300      	moveq	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f47f af6d 	bne.w	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030dc:	e034      	b.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f8e3 	bl	80032aa <I2C_IsAcknowledgeFailed>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e034      	b.n	8003158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d028      	beq.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7fe fe25 	bl	8001d44 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	429a      	cmp	r2, r3
 8003104:	d302      	bcc.n	800310c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d11d      	bne.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d016      	beq.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b80      	cmp	r3, #128	; 0x80
 8003154:	d1c3      	bne.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800316c:	e034      	b.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f89b 	bl	80032aa <I2C_IsAcknowledgeFailed>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e034      	b.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d028      	beq.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7fe fddd 	bl	8001d44 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11d      	bne.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d016      	beq.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f043 0220 	orr.w	r2, r3, #32
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e007      	b.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d1c3      	bne.n	800316e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031fc:	e049      	b.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b10      	cmp	r3, #16
 800320a:	d119      	bne.n	8003240 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0210 	mvn.w	r2, #16
 8003214:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e030      	b.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003240:	f7fe fd80 	bl	8001d44 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	429a      	cmp	r2, r3
 800324e:	d302      	bcc.n	8003256 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11d      	bne.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d016      	beq.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f043 0220 	orr.w	r2, r3, #32
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e007      	b.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	2b40      	cmp	r3, #64	; 0x40
 800329e:	d1ae      	bne.n	80031fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c0:	d11b      	bne.n	80032fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f043 0204 	orr.w	r2, r3, #4
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
	...

08003308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e272      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8087 	beq.w	8003436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003328:	4b92      	ldr	r3, [pc, #584]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b04      	cmp	r3, #4
 8003332:	d00c      	beq.n	800334e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003334:	4b8f      	ldr	r3, [pc, #572]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b08      	cmp	r3, #8
 800333e:	d112      	bne.n	8003366 <HAL_RCC_OscConfig+0x5e>
 8003340:	4b8c      	ldr	r3, [pc, #560]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	d10b      	bne.n	8003366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334e:	4b89      	ldr	r3, [pc, #548]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d06c      	beq.n	8003434 <HAL_RCC_OscConfig+0x12c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d168      	bne.n	8003434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e24c      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x76>
 8003370:	4b80      	ldr	r3, [pc, #512]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a7f      	ldr	r2, [pc, #508]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	e02e      	b.n	80033dc <HAL_RCC_OscConfig+0xd4>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b7b      	ldr	r3, [pc, #492]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7a      	ldr	r2, [pc, #488]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b78      	ldr	r3, [pc, #480]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a77      	ldr	r2, [pc, #476]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xd4>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0xbc>
 80033aa:	4b72      	ldr	r3, [pc, #456]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a71      	ldr	r2, [pc, #452]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b6f      	ldr	r3, [pc, #444]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6e      	ldr	r2, [pc, #440]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xd4>
 80033c4:	4b6b      	ldr	r3, [pc, #428]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6a      	ldr	r2, [pc, #424]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a67      	ldr	r2, [pc, #412]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fe fcae 	bl	8001d44 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe fcaa 	bl	8001d44 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e200      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b5d      	ldr	r3, [pc, #372]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xe4>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe fc9a 	bl	8001d44 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fc96 	bl	8001d44 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1ec      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	4b53      	ldr	r3, [pc, #332]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x10c>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003442:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800344e:	4b49      	ldr	r3, [pc, #292]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b08      	cmp	r3, #8
 8003458:	d11c      	bne.n	8003494 <HAL_RCC_OscConfig+0x18c>
 800345a:	4b46      	ldr	r3, [pc, #280]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d116      	bne.n	8003494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	4b43      	ldr	r3, [pc, #268]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x176>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e1c0      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4939      	ldr	r1, [pc, #228]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	e03a      	b.n	800350a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349c:	4b36      	ldr	r3, [pc, #216]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a2:	f7fe fc4f 	bl	8001d44 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034aa:	f7fe fc4b 	bl	8001d44 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e1a1      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4927      	ldr	r1, [pc, #156]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
 80034dc:	e015      	b.n	800350a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034de:	4b26      	ldr	r3, [pc, #152]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fe fc2e 	bl	8001d44 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fe fc2a 	bl	8001d44 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e180      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d03a      	beq.n	800358c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d019      	beq.n	8003552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_RCC_OscConfig+0x274>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003524:	f7fe fc0e 	bl	8001d44 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352c:	f7fe fc0a 	bl	8001d44 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e160      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <HAL_RCC_OscConfig+0x26c>)
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800354a:	2001      	movs	r0, #1
 800354c:	f000 faba 	bl	8003ac4 <RCC_Delay>
 8003550:	e01c      	b.n	800358c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_RCC_OscConfig+0x274>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003558:	f7fe fbf4 	bl	8001d44 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355e:	e00f      	b.n	8003580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003560:	f7fe fbf0 	bl	8001d44 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d908      	bls.n	8003580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e146      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	42420000 	.word	0x42420000
 800357c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	4b92      	ldr	r3, [pc, #584]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e9      	bne.n	8003560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a6 	beq.w	80036e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359a:	2300      	movs	r3, #0
 800359c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359e:	4b8b      	ldr	r3, [pc, #556]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035aa:	4b88      	ldr	r3, [pc, #544]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4a87      	ldr	r2, [pc, #540]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b4:	61d3      	str	r3, [r2, #28]
 80035b6:	4b85      	ldr	r3, [pc, #532]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c6:	4b82      	ldr	r3, [pc, #520]	; (80037d0 <HAL_RCC_OscConfig+0x4c8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d118      	bne.n	8003604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d2:	4b7f      	ldr	r3, [pc, #508]	; (80037d0 <HAL_RCC_OscConfig+0x4c8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a7e      	ldr	r2, [pc, #504]	; (80037d0 <HAL_RCC_OscConfig+0x4c8>)
 80035d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035de:	f7fe fbb1 	bl	8001d44 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e6:	f7fe fbad 	bl	8001d44 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b64      	cmp	r3, #100	; 0x64
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e103      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	4b75      	ldr	r3, [pc, #468]	; (80037d0 <HAL_RCC_OscConfig+0x4c8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x312>
 800360c:	4b6f      	ldr	r3, [pc, #444]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4a6e      	ldr	r2, [pc, #440]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6213      	str	r3, [r2, #32]
 8003618:	e02d      	b.n	8003676 <HAL_RCC_OscConfig+0x36e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x334>
 8003622:	4b6a      	ldr	r3, [pc, #424]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4a69      	ldr	r2, [pc, #420]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6213      	str	r3, [r2, #32]
 800362e:	4b67      	ldr	r3, [pc, #412]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4a66      	ldr	r2, [pc, #408]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	6213      	str	r3, [r2, #32]
 800363a:	e01c      	b.n	8003676 <HAL_RCC_OscConfig+0x36e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x356>
 8003644:	4b61      	ldr	r3, [pc, #388]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a60      	ldr	r2, [pc, #384]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6213      	str	r3, [r2, #32]
 8003650:	4b5e      	ldr	r3, [pc, #376]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4a5d      	ldr	r2, [pc, #372]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6213      	str	r3, [r2, #32]
 800365c:	e00b      	b.n	8003676 <HAL_RCC_OscConfig+0x36e>
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a5a      	ldr	r2, [pc, #360]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6213      	str	r3, [r2, #32]
 800366a:	4b58      	ldr	r3, [pc, #352]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a57      	ldr	r2, [pc, #348]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d015      	beq.n	80036aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367e:	f7fe fb61 	bl	8001d44 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fe fb5d 	bl	8001d44 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0b1      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	4b4b      	ldr	r3, [pc, #300]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ee      	beq.n	8003686 <HAL_RCC_OscConfig+0x37e>
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fe fb4b 	bl	8001d44 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe fb47 	bl	8001d44 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e09b      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	4b40      	ldr	r3, [pc, #256]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ee      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4b3c      	ldr	r3, [pc, #240]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	4a3b      	ldr	r2, [pc, #236]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8087 	beq.w	80037fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f0:	4b36      	ldr	r3, [pc, #216]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d061      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d146      	bne.n	8003792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003704:	4b33      	ldr	r3, [pc, #204]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe fb1b 	bl	8001d44 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe fb17 	bl	8001d44 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e06d      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003724:	4b29      	ldr	r3, [pc, #164]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d108      	bne.n	800374c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800373a:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4921      	ldr	r1, [pc, #132]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374c:	4b1f      	ldr	r3, [pc, #124]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a19      	ldr	r1, [r3, #32]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	430b      	orrs	r3, r1
 800375e:	491b      	ldr	r1, [pc, #108]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003766:	2201      	movs	r2, #1
 8003768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376a:	f7fe faeb 	bl	8001d44 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003772:	f7fe fae7 	bl	8001d44 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e03d      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x46a>
 8003790:	e035      	b.n	80037fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_RCC_OscConfig+0x4cc>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fad4 	bl	8001d44 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe fad0 	bl	8001d44 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e026      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x498>
 80037be:	e01e      	b.n	80037fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e019      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40007000 	.word	0x40007000
 80037d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCC_OscConfig+0x500>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d001      	beq.n	80037fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000

0800380c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0d0      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b6a      	ldr	r3, [pc, #424]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d910      	bls.n	8003850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b67      	ldr	r3, [pc, #412]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 0207 	bic.w	r2, r3, #7
 8003836:	4965      	ldr	r1, [pc, #404]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b63      	ldr	r3, [pc, #396]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0b8      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003868:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800388a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	494d      	ldr	r1, [pc, #308]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d040      	beq.n	800392c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d115      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e073      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038da:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06b      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ea:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f023 0203 	bic.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4936      	ldr	r1, [pc, #216]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038fc:	f7fe fa22 	bl	8001d44 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	e00a      	b.n	800391a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003904:	f7fe fa1e 	bl	8001d44 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e053      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	4b2d      	ldr	r3, [pc, #180]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 020c 	and.w	r2, r3, #12
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	429a      	cmp	r2, r3
 800392a:	d1eb      	bne.n	8003904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4b27      	ldr	r3, [pc, #156]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d210      	bcs.n	800395c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 0207 	bic.w	r2, r3, #7
 8003942:	4922      	ldr	r1, [pc, #136]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e032      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4916      	ldr	r1, [pc, #88]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490e      	ldr	r1, [pc, #56]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800399a:	f000 f821 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490a      	ldr	r1, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1c8>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x1cc>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1d0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe f980 	bl	8001cc0 <HAL_InitTick>

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40022000 	.word	0x40022000
 80039d0:	40021000 	.word	0x40021000
 80039d4:	080071cc 	.word	0x080071cc
 80039d8:	20000000 	.word	0x20000000
 80039dc:	20000004 	.word	0x20000004

080039e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039fa:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x94>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d002      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x30>
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x36>
 8003a0e:	e027      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a12:	613b      	str	r3, [r7, #16]
      break;
 8003a14:	e027      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	0c9b      	lsrs	r3, r3, #18
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a20:	5cd3      	ldrb	r3, [r2, r3]
 8003a22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	0c5b      	lsrs	r3, r3, #17
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a42:	fb03 f202 	mul.w	r2, r3, r2
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e004      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a54:	fb02 f303 	mul.w	r3, r2, r3
 8003a58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	613b      	str	r3, [r7, #16]
      break;
 8003a5e:	e002      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a62:	613b      	str	r3, [r7, #16]
      break;
 8003a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a66:	693b      	ldr	r3, [r7, #16]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
 8003a78:	007a1200 	.word	0x007a1200
 8003a7c:	080071e4 	.word	0x080071e4
 8003a80:	080071f4 	.word	0x080071f4
 8003a84:	003d0900 	.word	0x003d0900

08003a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a8c:	4b02      	ldr	r3, [pc, #8]	; (8003a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	20000000 	.word	0x20000000

08003a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aa0:	f7ff fff2 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	080071dc 	.word	0x080071dc

08003ac4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <RCC_Delay+0x34>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <RCC_Delay+0x38>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	0a5b      	lsrs	r3, r3, #9
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ae0:	bf00      	nop
  }
  while (Delay --);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1e5a      	subs	r2, r3, #1
 8003ae6:	60fa      	str	r2, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f9      	bne.n	8003ae0 <RCC_Delay+0x1c>
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	20000000 	.word	0x20000000
 8003afc:	10624dd3 	.word	0x10624dd3

08003b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e076      	b.n	8003c00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d009      	beq.n	8003b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
 8003b2a:	e005      	b.n	8003b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd ff4a 	bl	80019ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	ea42 0103 	orr.w	r1, r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	0c1a      	lsrs	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f002 0204 	and.w	r2, r2, #4
 8003bde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_SPI_Transmit+0x22>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e12d      	b.n	8003e86 <HAL_SPI_Transmit+0x27e>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c32:	f7fe f887 	bl	8001d44 <HAL_GetTick>
 8003c36:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d002      	beq.n	8003c4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c4c:	e116      	b.n	8003e7c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_SPI_Transmit+0x52>
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c5e:	e10d      	b.n	8003e7c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2203      	movs	r2, #3
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	88fa      	ldrh	r2, [r7, #6]
 8003c78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d007      	beq.n	8003ce6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cee:	d14f      	bne.n	8003d90 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_SPI_Transmit+0xf6>
 8003cf8:	8afb      	ldrh	r3, [r7, #22]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d142      	bne.n	8003d84 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	881a      	ldrh	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d22:	e02f      	b.n	8003d84 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d112      	bne.n	8003d58 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	881a      	ldrh	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	1c9a      	adds	r2, r3, #2
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d56:	e015      	b.n	8003d84 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d58:	f7fd fff4 	bl	8001d44 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d803      	bhi.n	8003d70 <HAL_SPI_Transmit+0x168>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d102      	bne.n	8003d76 <HAL_SPI_Transmit+0x16e>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d82:	e07b      	b.n	8003e7c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ca      	bne.n	8003d24 <HAL_SPI_Transmit+0x11c>
 8003d8e:	e050      	b.n	8003e32 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_SPI_Transmit+0x196>
 8003d98:	8afb      	ldrh	r3, [r7, #22]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d144      	bne.n	8003e28 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dc4:	e030      	b.n	8003e28 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d113      	bne.n	8003dfc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dfa:	e015      	b.n	8003e28 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dfc:	f7fd ffa2 	bl	8001d44 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d803      	bhi.n	8003e14 <HAL_SPI_Transmit+0x20c>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e12:	d102      	bne.n	8003e1a <HAL_SPI_Transmit+0x212>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e26:	e029      	b.n	8003e7c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1c9      	bne.n	8003dc6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f8b2 	bl	8003fa0 <SPI_EndRxTxTransaction>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e003      	b.n	8003e7c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ea0:	f7fd ff50 	bl	8001d44 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eb0:	f7fd ff48 	bl	8001d44 <HAL_GetTick>
 8003eb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eb6:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	015b      	lsls	r3, r3, #5
 8003ebc:	0d1b      	lsrs	r3, r3, #20
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ec6:	e054      	b.n	8003f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d050      	beq.n	8003f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ed0:	f7fd ff38 	bl	8001d44 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d902      	bls.n	8003ee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d13d      	bne.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efe:	d111      	bne.n	8003f24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f08:	d004      	beq.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	d107      	bne.n	8003f24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2c:	d10f      	bne.n	8003f4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e017      	b.n	8003f92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d19b      	bne.n	8003ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3720      	adds	r7, #32
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000000 	.word	0x20000000

08003fa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff ff6a 	bl	8003e90 <SPI_WaitFlagStateUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d007      	beq.n	8003fd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	f043 0220 	orr.w	r2, r3, #32
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e000      	b.n	8003fd4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <__cvt>:
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe2:	461f      	mov	r7, r3
 8003fe4:	bfbb      	ittet	lt
 8003fe6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003fea:	461f      	movlt	r7, r3
 8003fec:	2300      	movge	r3, #0
 8003fee:	232d      	movlt	r3, #45	; 0x2d
 8003ff0:	b088      	sub	sp, #32
 8003ff2:	4614      	mov	r4, r2
 8003ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ff6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003ff8:	7013      	strb	r3, [r2, #0]
 8003ffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ffc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004000:	f023 0820 	bic.w	r8, r3, #32
 8004004:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004008:	d005      	beq.n	8004016 <__cvt+0x3a>
 800400a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800400e:	d100      	bne.n	8004012 <__cvt+0x36>
 8004010:	3501      	adds	r5, #1
 8004012:	2302      	movs	r3, #2
 8004014:	e000      	b.n	8004018 <__cvt+0x3c>
 8004016:	2303      	movs	r3, #3
 8004018:	aa07      	add	r2, sp, #28
 800401a:	9204      	str	r2, [sp, #16]
 800401c:	aa06      	add	r2, sp, #24
 800401e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004022:	e9cd 3500 	strd	r3, r5, [sp]
 8004026:	4622      	mov	r2, r4
 8004028:	463b      	mov	r3, r7
 800402a:	f000 fe61 	bl	8004cf0 <_dtoa_r>
 800402e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004032:	4606      	mov	r6, r0
 8004034:	d102      	bne.n	800403c <__cvt+0x60>
 8004036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004038:	07db      	lsls	r3, r3, #31
 800403a:	d522      	bpl.n	8004082 <__cvt+0xa6>
 800403c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004040:	eb06 0905 	add.w	r9, r6, r5
 8004044:	d110      	bne.n	8004068 <__cvt+0x8c>
 8004046:	7833      	ldrb	r3, [r6, #0]
 8004048:	2b30      	cmp	r3, #48	; 0x30
 800404a:	d10a      	bne.n	8004062 <__cvt+0x86>
 800404c:	2200      	movs	r2, #0
 800404e:	2300      	movs	r3, #0
 8004050:	4620      	mov	r0, r4
 8004052:	4639      	mov	r1, r7
 8004054:	f7fc fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8004058:	b918      	cbnz	r0, 8004062 <__cvt+0x86>
 800405a:	f1c5 0501 	rsb	r5, r5, #1
 800405e:	f8ca 5000 	str.w	r5, [sl]
 8004062:	f8da 3000 	ldr.w	r3, [sl]
 8004066:	4499      	add	r9, r3
 8004068:	2200      	movs	r2, #0
 800406a:	2300      	movs	r3, #0
 800406c:	4620      	mov	r0, r4
 800406e:	4639      	mov	r1, r7
 8004070:	f7fc fc9a 	bl	80009a8 <__aeabi_dcmpeq>
 8004074:	b108      	cbz	r0, 800407a <__cvt+0x9e>
 8004076:	f8cd 901c 	str.w	r9, [sp, #28]
 800407a:	2230      	movs	r2, #48	; 0x30
 800407c:	9b07      	ldr	r3, [sp, #28]
 800407e:	454b      	cmp	r3, r9
 8004080:	d307      	bcc.n	8004092 <__cvt+0xb6>
 8004082:	4630      	mov	r0, r6
 8004084:	9b07      	ldr	r3, [sp, #28]
 8004086:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004088:	1b9b      	subs	r3, r3, r6
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	b008      	add	sp, #32
 800408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	9107      	str	r1, [sp, #28]
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e7f0      	b.n	800407c <__cvt+0xa0>

0800409a <__exponent>:
 800409a:	4603      	mov	r3, r0
 800409c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800409e:	2900      	cmp	r1, #0
 80040a0:	f803 2b02 	strb.w	r2, [r3], #2
 80040a4:	bfb6      	itet	lt
 80040a6:	222d      	movlt	r2, #45	; 0x2d
 80040a8:	222b      	movge	r2, #43	; 0x2b
 80040aa:	4249      	neglt	r1, r1
 80040ac:	2909      	cmp	r1, #9
 80040ae:	7042      	strb	r2, [r0, #1]
 80040b0:	dd2a      	ble.n	8004108 <__exponent+0x6e>
 80040b2:	f10d 0207 	add.w	r2, sp, #7
 80040b6:	4617      	mov	r7, r2
 80040b8:	260a      	movs	r6, #10
 80040ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80040be:	4694      	mov	ip, r2
 80040c0:	fb06 1415 	mls	r4, r6, r5, r1
 80040c4:	3430      	adds	r4, #48	; 0x30
 80040c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80040ca:	460c      	mov	r4, r1
 80040cc:	2c63      	cmp	r4, #99	; 0x63
 80040ce:	4629      	mov	r1, r5
 80040d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80040d4:	dcf1      	bgt.n	80040ba <__exponent+0x20>
 80040d6:	3130      	adds	r1, #48	; 0x30
 80040d8:	f1ac 0402 	sub.w	r4, ip, #2
 80040dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80040e0:	4622      	mov	r2, r4
 80040e2:	1c41      	adds	r1, r0, #1
 80040e4:	42ba      	cmp	r2, r7
 80040e6:	d30a      	bcc.n	80040fe <__exponent+0x64>
 80040e8:	f10d 0209 	add.w	r2, sp, #9
 80040ec:	eba2 020c 	sub.w	r2, r2, ip
 80040f0:	42bc      	cmp	r4, r7
 80040f2:	bf88      	it	hi
 80040f4:	2200      	movhi	r2, #0
 80040f6:	4413      	add	r3, r2
 80040f8:	1a18      	subs	r0, r3, r0
 80040fa:	b003      	add	sp, #12
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004102:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004106:	e7ed      	b.n	80040e4 <__exponent+0x4a>
 8004108:	2330      	movs	r3, #48	; 0x30
 800410a:	3130      	adds	r1, #48	; 0x30
 800410c:	7083      	strb	r3, [r0, #2]
 800410e:	70c1      	strb	r1, [r0, #3]
 8004110:	1d03      	adds	r3, r0, #4
 8004112:	e7f1      	b.n	80040f8 <__exponent+0x5e>

08004114 <_printf_float>:
 8004114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004118:	b091      	sub	sp, #68	; 0x44
 800411a:	460c      	mov	r4, r1
 800411c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004120:	4616      	mov	r6, r2
 8004122:	461f      	mov	r7, r3
 8004124:	4605      	mov	r5, r0
 8004126:	f000 fcd3 	bl	8004ad0 <_localeconv_r>
 800412a:	6803      	ldr	r3, [r0, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	9309      	str	r3, [sp, #36]	; 0x24
 8004130:	f7fc f80e 	bl	8000150 <strlen>
 8004134:	2300      	movs	r3, #0
 8004136:	930e      	str	r3, [sp, #56]	; 0x38
 8004138:	f8d8 3000 	ldr.w	r3, [r8]
 800413c:	900a      	str	r0, [sp, #40]	; 0x28
 800413e:	3307      	adds	r3, #7
 8004140:	f023 0307 	bic.w	r3, r3, #7
 8004144:	f103 0208 	add.w	r2, r3, #8
 8004148:	f894 9018 	ldrb.w	r9, [r4, #24]
 800414c:	f8d4 b000 	ldr.w	fp, [r4]
 8004150:	f8c8 2000 	str.w	r2, [r8]
 8004154:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004158:	4652      	mov	r2, sl
 800415a:	4643      	mov	r3, r8
 800415c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004160:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004164:	930b      	str	r3, [sp, #44]	; 0x2c
 8004166:	f04f 32ff 	mov.w	r2, #4294967295
 800416a:	4650      	mov	r0, sl
 800416c:	4b9c      	ldr	r3, [pc, #624]	; (80043e0 <_printf_float+0x2cc>)
 800416e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004170:	f7fc fc4c 	bl	8000a0c <__aeabi_dcmpun>
 8004174:	bb70      	cbnz	r0, 80041d4 <_printf_float+0xc0>
 8004176:	f04f 32ff 	mov.w	r2, #4294967295
 800417a:	4650      	mov	r0, sl
 800417c:	4b98      	ldr	r3, [pc, #608]	; (80043e0 <_printf_float+0x2cc>)
 800417e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004180:	f7fc fc26 	bl	80009d0 <__aeabi_dcmple>
 8004184:	bb30      	cbnz	r0, 80041d4 <_printf_float+0xc0>
 8004186:	2200      	movs	r2, #0
 8004188:	2300      	movs	r3, #0
 800418a:	4650      	mov	r0, sl
 800418c:	4641      	mov	r1, r8
 800418e:	f7fc fc15 	bl	80009bc <__aeabi_dcmplt>
 8004192:	b110      	cbz	r0, 800419a <_printf_float+0x86>
 8004194:	232d      	movs	r3, #45	; 0x2d
 8004196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800419a:	4a92      	ldr	r2, [pc, #584]	; (80043e4 <_printf_float+0x2d0>)
 800419c:	4b92      	ldr	r3, [pc, #584]	; (80043e8 <_printf_float+0x2d4>)
 800419e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80041a2:	bf94      	ite	ls
 80041a4:	4690      	movls	r8, r2
 80041a6:	4698      	movhi	r8, r3
 80041a8:	2303      	movs	r3, #3
 80041aa:	f04f 0a00 	mov.w	sl, #0
 80041ae:	6123      	str	r3, [r4, #16]
 80041b0:	f02b 0304 	bic.w	r3, fp, #4
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	4633      	mov	r3, r6
 80041b8:	4621      	mov	r1, r4
 80041ba:	4628      	mov	r0, r5
 80041bc:	9700      	str	r7, [sp, #0]
 80041be:	aa0f      	add	r2, sp, #60	; 0x3c
 80041c0:	f000 f9d6 	bl	8004570 <_printf_common>
 80041c4:	3001      	adds	r0, #1
 80041c6:	f040 8090 	bne.w	80042ea <_printf_float+0x1d6>
 80041ca:	f04f 30ff 	mov.w	r0, #4294967295
 80041ce:	b011      	add	sp, #68	; 0x44
 80041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d4:	4652      	mov	r2, sl
 80041d6:	4643      	mov	r3, r8
 80041d8:	4650      	mov	r0, sl
 80041da:	4641      	mov	r1, r8
 80041dc:	f7fc fc16 	bl	8000a0c <__aeabi_dcmpun>
 80041e0:	b148      	cbz	r0, 80041f6 <_printf_float+0xe2>
 80041e2:	f1b8 0f00 	cmp.w	r8, #0
 80041e6:	bfb8      	it	lt
 80041e8:	232d      	movlt	r3, #45	; 0x2d
 80041ea:	4a80      	ldr	r2, [pc, #512]	; (80043ec <_printf_float+0x2d8>)
 80041ec:	bfb8      	it	lt
 80041ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041f2:	4b7f      	ldr	r3, [pc, #508]	; (80043f0 <_printf_float+0x2dc>)
 80041f4:	e7d3      	b.n	800419e <_printf_float+0x8a>
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	d142      	bne.n	8004286 <_printf_float+0x172>
 8004200:	2306      	movs	r3, #6
 8004202:	6063      	str	r3, [r4, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	9206      	str	r2, [sp, #24]
 8004208:	aa0e      	add	r2, sp, #56	; 0x38
 800420a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800420e:	aa0d      	add	r2, sp, #52	; 0x34
 8004210:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004214:	9203      	str	r2, [sp, #12]
 8004216:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800421a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	6863      	ldr	r3, [r4, #4]
 8004222:	4652      	mov	r2, sl
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	4628      	mov	r0, r5
 8004228:	4643      	mov	r3, r8
 800422a:	910b      	str	r1, [sp, #44]	; 0x2c
 800422c:	f7ff fed6 	bl	8003fdc <__cvt>
 8004230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004232:	4680      	mov	r8, r0
 8004234:	2947      	cmp	r1, #71	; 0x47
 8004236:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004238:	d108      	bne.n	800424c <_printf_float+0x138>
 800423a:	1cc8      	adds	r0, r1, #3
 800423c:	db02      	blt.n	8004244 <_printf_float+0x130>
 800423e:	6863      	ldr	r3, [r4, #4]
 8004240:	4299      	cmp	r1, r3
 8004242:	dd40      	ble.n	80042c6 <_printf_float+0x1b2>
 8004244:	f1a9 0902 	sub.w	r9, r9, #2
 8004248:	fa5f f989 	uxtb.w	r9, r9
 800424c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004250:	d81f      	bhi.n	8004292 <_printf_float+0x17e>
 8004252:	464a      	mov	r2, r9
 8004254:	3901      	subs	r1, #1
 8004256:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800425a:	910d      	str	r1, [sp, #52]	; 0x34
 800425c:	f7ff ff1d 	bl	800409a <__exponent>
 8004260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004262:	4682      	mov	sl, r0
 8004264:	1813      	adds	r3, r2, r0
 8004266:	2a01      	cmp	r2, #1
 8004268:	6123      	str	r3, [r4, #16]
 800426a:	dc02      	bgt.n	8004272 <_printf_float+0x15e>
 800426c:	6822      	ldr	r2, [r4, #0]
 800426e:	07d2      	lsls	r2, r2, #31
 8004270:	d501      	bpl.n	8004276 <_printf_float+0x162>
 8004272:	3301      	adds	r3, #1
 8004274:	6123      	str	r3, [r4, #16]
 8004276:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800427a:	2b00      	cmp	r3, #0
 800427c:	d09b      	beq.n	80041b6 <_printf_float+0xa2>
 800427e:	232d      	movs	r3, #45	; 0x2d
 8004280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004284:	e797      	b.n	80041b6 <_printf_float+0xa2>
 8004286:	2947      	cmp	r1, #71	; 0x47
 8004288:	d1bc      	bne.n	8004204 <_printf_float+0xf0>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1ba      	bne.n	8004204 <_printf_float+0xf0>
 800428e:	2301      	movs	r3, #1
 8004290:	e7b7      	b.n	8004202 <_printf_float+0xee>
 8004292:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004296:	d118      	bne.n	80042ca <_printf_float+0x1b6>
 8004298:	2900      	cmp	r1, #0
 800429a:	6863      	ldr	r3, [r4, #4]
 800429c:	dd0b      	ble.n	80042b6 <_printf_float+0x1a2>
 800429e:	6121      	str	r1, [r4, #16]
 80042a0:	b913      	cbnz	r3, 80042a8 <_printf_float+0x194>
 80042a2:	6822      	ldr	r2, [r4, #0]
 80042a4:	07d0      	lsls	r0, r2, #31
 80042a6:	d502      	bpl.n	80042ae <_printf_float+0x19a>
 80042a8:	3301      	adds	r3, #1
 80042aa:	440b      	add	r3, r1
 80042ac:	6123      	str	r3, [r4, #16]
 80042ae:	f04f 0a00 	mov.w	sl, #0
 80042b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80042b4:	e7df      	b.n	8004276 <_printf_float+0x162>
 80042b6:	b913      	cbnz	r3, 80042be <_printf_float+0x1aa>
 80042b8:	6822      	ldr	r2, [r4, #0]
 80042ba:	07d2      	lsls	r2, r2, #31
 80042bc:	d501      	bpl.n	80042c2 <_printf_float+0x1ae>
 80042be:	3302      	adds	r3, #2
 80042c0:	e7f4      	b.n	80042ac <_printf_float+0x198>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e7f2      	b.n	80042ac <_printf_float+0x198>
 80042c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80042ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042cc:	4299      	cmp	r1, r3
 80042ce:	db05      	blt.n	80042dc <_printf_float+0x1c8>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	6121      	str	r1, [r4, #16]
 80042d4:	07d8      	lsls	r0, r3, #31
 80042d6:	d5ea      	bpl.n	80042ae <_printf_float+0x19a>
 80042d8:	1c4b      	adds	r3, r1, #1
 80042da:	e7e7      	b.n	80042ac <_printf_float+0x198>
 80042dc:	2900      	cmp	r1, #0
 80042de:	bfcc      	ite	gt
 80042e0:	2201      	movgt	r2, #1
 80042e2:	f1c1 0202 	rsble	r2, r1, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	e7e0      	b.n	80042ac <_printf_float+0x198>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	055a      	lsls	r2, r3, #21
 80042ee:	d407      	bmi.n	8004300 <_printf_float+0x1ec>
 80042f0:	6923      	ldr	r3, [r4, #16]
 80042f2:	4642      	mov	r2, r8
 80042f4:	4631      	mov	r1, r6
 80042f6:	4628      	mov	r0, r5
 80042f8:	47b8      	blx	r7
 80042fa:	3001      	adds	r0, #1
 80042fc:	d12b      	bne.n	8004356 <_printf_float+0x242>
 80042fe:	e764      	b.n	80041ca <_printf_float+0xb6>
 8004300:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004304:	f240 80dd 	bls.w	80044c2 <_printf_float+0x3ae>
 8004308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800430c:	2200      	movs	r2, #0
 800430e:	2300      	movs	r3, #0
 8004310:	f7fc fb4a 	bl	80009a8 <__aeabi_dcmpeq>
 8004314:	2800      	cmp	r0, #0
 8004316:	d033      	beq.n	8004380 <_printf_float+0x26c>
 8004318:	2301      	movs	r3, #1
 800431a:	4631      	mov	r1, r6
 800431c:	4628      	mov	r0, r5
 800431e:	4a35      	ldr	r2, [pc, #212]	; (80043f4 <_printf_float+0x2e0>)
 8004320:	47b8      	blx	r7
 8004322:	3001      	adds	r0, #1
 8004324:	f43f af51 	beq.w	80041ca <_printf_float+0xb6>
 8004328:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800432c:	429a      	cmp	r2, r3
 800432e:	db02      	blt.n	8004336 <_printf_float+0x222>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	07d8      	lsls	r0, r3, #31
 8004334:	d50f      	bpl.n	8004356 <_printf_float+0x242>
 8004336:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	f43f af42 	beq.w	80041ca <_printf_float+0xb6>
 8004346:	f04f 0800 	mov.w	r8, #0
 800434a:	f104 091a 	add.w	r9, r4, #26
 800434e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004350:	3b01      	subs	r3, #1
 8004352:	4543      	cmp	r3, r8
 8004354:	dc09      	bgt.n	800436a <_printf_float+0x256>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	079b      	lsls	r3, r3, #30
 800435a:	f100 8104 	bmi.w	8004566 <_printf_float+0x452>
 800435e:	68e0      	ldr	r0, [r4, #12]
 8004360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004362:	4298      	cmp	r0, r3
 8004364:	bfb8      	it	lt
 8004366:	4618      	movlt	r0, r3
 8004368:	e731      	b.n	80041ce <_printf_float+0xba>
 800436a:	2301      	movs	r3, #1
 800436c:	464a      	mov	r2, r9
 800436e:	4631      	mov	r1, r6
 8004370:	4628      	mov	r0, r5
 8004372:	47b8      	blx	r7
 8004374:	3001      	adds	r0, #1
 8004376:	f43f af28 	beq.w	80041ca <_printf_float+0xb6>
 800437a:	f108 0801 	add.w	r8, r8, #1
 800437e:	e7e6      	b.n	800434e <_printf_float+0x23a>
 8004380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004382:	2b00      	cmp	r3, #0
 8004384:	dc38      	bgt.n	80043f8 <_printf_float+0x2e4>
 8004386:	2301      	movs	r3, #1
 8004388:	4631      	mov	r1, r6
 800438a:	4628      	mov	r0, r5
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <_printf_float+0x2e0>)
 800438e:	47b8      	blx	r7
 8004390:	3001      	adds	r0, #1
 8004392:	f43f af1a 	beq.w	80041ca <_printf_float+0xb6>
 8004396:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800439a:	4313      	orrs	r3, r2
 800439c:	d102      	bne.n	80043a4 <_printf_float+0x290>
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	07d9      	lsls	r1, r3, #31
 80043a2:	d5d8      	bpl.n	8004356 <_printf_float+0x242>
 80043a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043a8:	4631      	mov	r1, r6
 80043aa:	4628      	mov	r0, r5
 80043ac:	47b8      	blx	r7
 80043ae:	3001      	adds	r0, #1
 80043b0:	f43f af0b 	beq.w	80041ca <_printf_float+0xb6>
 80043b4:	f04f 0900 	mov.w	r9, #0
 80043b8:	f104 0a1a 	add.w	sl, r4, #26
 80043bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043be:	425b      	negs	r3, r3
 80043c0:	454b      	cmp	r3, r9
 80043c2:	dc01      	bgt.n	80043c8 <_printf_float+0x2b4>
 80043c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043c6:	e794      	b.n	80042f2 <_printf_float+0x1de>
 80043c8:	2301      	movs	r3, #1
 80043ca:	4652      	mov	r2, sl
 80043cc:	4631      	mov	r1, r6
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b8      	blx	r7
 80043d2:	3001      	adds	r0, #1
 80043d4:	f43f aef9 	beq.w	80041ca <_printf_float+0xb6>
 80043d8:	f109 0901 	add.w	r9, r9, #1
 80043dc:	e7ee      	b.n	80043bc <_printf_float+0x2a8>
 80043de:	bf00      	nop
 80043e0:	7fefffff 	.word	0x7fefffff
 80043e4:	080071f6 	.word	0x080071f6
 80043e8:	080071fa 	.word	0x080071fa
 80043ec:	080071fe 	.word	0x080071fe
 80043f0:	08007202 	.word	0x08007202
 80043f4:	08007206 	.word	0x08007206
 80043f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043fc:	429a      	cmp	r2, r3
 80043fe:	bfa8      	it	ge
 8004400:	461a      	movge	r2, r3
 8004402:	2a00      	cmp	r2, #0
 8004404:	4691      	mov	r9, r2
 8004406:	dc37      	bgt.n	8004478 <_printf_float+0x364>
 8004408:	f04f 0b00 	mov.w	fp, #0
 800440c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004410:	f104 021a 	add.w	r2, r4, #26
 8004414:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004418:	ebaa 0309 	sub.w	r3, sl, r9
 800441c:	455b      	cmp	r3, fp
 800441e:	dc33      	bgt.n	8004488 <_printf_float+0x374>
 8004420:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004424:	429a      	cmp	r2, r3
 8004426:	db3b      	blt.n	80044a0 <_printf_float+0x38c>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	07da      	lsls	r2, r3, #31
 800442c:	d438      	bmi.n	80044a0 <_printf_float+0x38c>
 800442e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004432:	eba2 0903 	sub.w	r9, r2, r3
 8004436:	eba2 020a 	sub.w	r2, r2, sl
 800443a:	4591      	cmp	r9, r2
 800443c:	bfa8      	it	ge
 800443e:	4691      	movge	r9, r2
 8004440:	f1b9 0f00 	cmp.w	r9, #0
 8004444:	dc34      	bgt.n	80044b0 <_printf_float+0x39c>
 8004446:	f04f 0800 	mov.w	r8, #0
 800444a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800444e:	f104 0a1a 	add.w	sl, r4, #26
 8004452:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	eba3 0309 	sub.w	r3, r3, r9
 800445c:	4543      	cmp	r3, r8
 800445e:	f77f af7a 	ble.w	8004356 <_printf_float+0x242>
 8004462:	2301      	movs	r3, #1
 8004464:	4652      	mov	r2, sl
 8004466:	4631      	mov	r1, r6
 8004468:	4628      	mov	r0, r5
 800446a:	47b8      	blx	r7
 800446c:	3001      	adds	r0, #1
 800446e:	f43f aeac 	beq.w	80041ca <_printf_float+0xb6>
 8004472:	f108 0801 	add.w	r8, r8, #1
 8004476:	e7ec      	b.n	8004452 <_printf_float+0x33e>
 8004478:	4613      	mov	r3, r2
 800447a:	4631      	mov	r1, r6
 800447c:	4642      	mov	r2, r8
 800447e:	4628      	mov	r0, r5
 8004480:	47b8      	blx	r7
 8004482:	3001      	adds	r0, #1
 8004484:	d1c0      	bne.n	8004408 <_printf_float+0x2f4>
 8004486:	e6a0      	b.n	80041ca <_printf_float+0xb6>
 8004488:	2301      	movs	r3, #1
 800448a:	4631      	mov	r1, r6
 800448c:	4628      	mov	r0, r5
 800448e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	f43f ae99 	beq.w	80041ca <_printf_float+0xb6>
 8004498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800449a:	f10b 0b01 	add.w	fp, fp, #1
 800449e:	e7b9      	b.n	8004414 <_printf_float+0x300>
 80044a0:	4631      	mov	r1, r6
 80044a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	d1bf      	bne.n	800442e <_printf_float+0x31a>
 80044ae:	e68c      	b.n	80041ca <_printf_float+0xb6>
 80044b0:	464b      	mov	r3, r9
 80044b2:	4631      	mov	r1, r6
 80044b4:	4628      	mov	r0, r5
 80044b6:	eb08 020a 	add.w	r2, r8, sl
 80044ba:	47b8      	blx	r7
 80044bc:	3001      	adds	r0, #1
 80044be:	d1c2      	bne.n	8004446 <_printf_float+0x332>
 80044c0:	e683      	b.n	80041ca <_printf_float+0xb6>
 80044c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044c4:	2a01      	cmp	r2, #1
 80044c6:	dc01      	bgt.n	80044cc <_printf_float+0x3b8>
 80044c8:	07db      	lsls	r3, r3, #31
 80044ca:	d539      	bpl.n	8004540 <_printf_float+0x42c>
 80044cc:	2301      	movs	r3, #1
 80044ce:	4642      	mov	r2, r8
 80044d0:	4631      	mov	r1, r6
 80044d2:	4628      	mov	r0, r5
 80044d4:	47b8      	blx	r7
 80044d6:	3001      	adds	r0, #1
 80044d8:	f43f ae77 	beq.w	80041ca <_printf_float+0xb6>
 80044dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044e0:	4631      	mov	r1, r6
 80044e2:	4628      	mov	r0, r5
 80044e4:	47b8      	blx	r7
 80044e6:	3001      	adds	r0, #1
 80044e8:	f43f ae6f 	beq.w	80041ca <_printf_float+0xb6>
 80044ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044f0:	2200      	movs	r2, #0
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80044f8:	f7fc fa56 	bl	80009a8 <__aeabi_dcmpeq>
 80044fc:	b9d8      	cbnz	r0, 8004536 <_printf_float+0x422>
 80044fe:	f109 33ff 	add.w	r3, r9, #4294967295
 8004502:	f108 0201 	add.w	r2, r8, #1
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	d10e      	bne.n	800452e <_printf_float+0x41a>
 8004510:	e65b      	b.n	80041ca <_printf_float+0xb6>
 8004512:	2301      	movs	r3, #1
 8004514:	464a      	mov	r2, r9
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	f43f ae54 	beq.w	80041ca <_printf_float+0xb6>
 8004522:	f108 0801 	add.w	r8, r8, #1
 8004526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004528:	3b01      	subs	r3, #1
 800452a:	4543      	cmp	r3, r8
 800452c:	dcf1      	bgt.n	8004512 <_printf_float+0x3fe>
 800452e:	4653      	mov	r3, sl
 8004530:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004534:	e6de      	b.n	80042f4 <_printf_float+0x1e0>
 8004536:	f04f 0800 	mov.w	r8, #0
 800453a:	f104 091a 	add.w	r9, r4, #26
 800453e:	e7f2      	b.n	8004526 <_printf_float+0x412>
 8004540:	2301      	movs	r3, #1
 8004542:	4642      	mov	r2, r8
 8004544:	e7df      	b.n	8004506 <_printf_float+0x3f2>
 8004546:	2301      	movs	r3, #1
 8004548:	464a      	mov	r2, r9
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f ae3a 	beq.w	80041ca <_printf_float+0xb6>
 8004556:	f108 0801 	add.w	r8, r8, #1
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800455e:	1a5b      	subs	r3, r3, r1
 8004560:	4543      	cmp	r3, r8
 8004562:	dcf0      	bgt.n	8004546 <_printf_float+0x432>
 8004564:	e6fb      	b.n	800435e <_printf_float+0x24a>
 8004566:	f04f 0800 	mov.w	r8, #0
 800456a:	f104 0919 	add.w	r9, r4, #25
 800456e:	e7f4      	b.n	800455a <_printf_float+0x446>

08004570 <_printf_common>:
 8004570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004574:	4616      	mov	r6, r2
 8004576:	4699      	mov	r9, r3
 8004578:	688a      	ldr	r2, [r1, #8]
 800457a:	690b      	ldr	r3, [r1, #16]
 800457c:	4607      	mov	r7, r0
 800457e:	4293      	cmp	r3, r2
 8004580:	bfb8      	it	lt
 8004582:	4613      	movlt	r3, r2
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800458a:	460c      	mov	r4, r1
 800458c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004590:	b10a      	cbz	r2, 8004596 <_printf_common+0x26>
 8004592:	3301      	adds	r3, #1
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	0699      	lsls	r1, r3, #26
 800459a:	bf42      	ittt	mi
 800459c:	6833      	ldrmi	r3, [r6, #0]
 800459e:	3302      	addmi	r3, #2
 80045a0:	6033      	strmi	r3, [r6, #0]
 80045a2:	6825      	ldr	r5, [r4, #0]
 80045a4:	f015 0506 	ands.w	r5, r5, #6
 80045a8:	d106      	bne.n	80045b8 <_printf_common+0x48>
 80045aa:	f104 0a19 	add.w	sl, r4, #25
 80045ae:	68e3      	ldr	r3, [r4, #12]
 80045b0:	6832      	ldr	r2, [r6, #0]
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	42ab      	cmp	r3, r5
 80045b6:	dc2b      	bgt.n	8004610 <_printf_common+0xa0>
 80045b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045bc:	1e13      	subs	r3, r2, #0
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	bf18      	it	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	0692      	lsls	r2, r2, #26
 80045c6:	d430      	bmi.n	800462a <_printf_common+0xba>
 80045c8:	4649      	mov	r1, r9
 80045ca:	4638      	mov	r0, r7
 80045cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045d0:	47c0      	blx	r8
 80045d2:	3001      	adds	r0, #1
 80045d4:	d023      	beq.n	800461e <_printf_common+0xae>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	6922      	ldr	r2, [r4, #16]
 80045da:	f003 0306 	and.w	r3, r3, #6
 80045de:	2b04      	cmp	r3, #4
 80045e0:	bf14      	ite	ne
 80045e2:	2500      	movne	r5, #0
 80045e4:	6833      	ldreq	r3, [r6, #0]
 80045e6:	f04f 0600 	mov.w	r6, #0
 80045ea:	bf08      	it	eq
 80045ec:	68e5      	ldreq	r5, [r4, #12]
 80045ee:	f104 041a 	add.w	r4, r4, #26
 80045f2:	bf08      	it	eq
 80045f4:	1aed      	subeq	r5, r5, r3
 80045f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80045fa:	bf08      	it	eq
 80045fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004600:	4293      	cmp	r3, r2
 8004602:	bfc4      	itt	gt
 8004604:	1a9b      	subgt	r3, r3, r2
 8004606:	18ed      	addgt	r5, r5, r3
 8004608:	42b5      	cmp	r5, r6
 800460a:	d11a      	bne.n	8004642 <_printf_common+0xd2>
 800460c:	2000      	movs	r0, #0
 800460e:	e008      	b.n	8004622 <_printf_common+0xb2>
 8004610:	2301      	movs	r3, #1
 8004612:	4652      	mov	r2, sl
 8004614:	4649      	mov	r1, r9
 8004616:	4638      	mov	r0, r7
 8004618:	47c0      	blx	r8
 800461a:	3001      	adds	r0, #1
 800461c:	d103      	bne.n	8004626 <_printf_common+0xb6>
 800461e:	f04f 30ff 	mov.w	r0, #4294967295
 8004622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004626:	3501      	adds	r5, #1
 8004628:	e7c1      	b.n	80045ae <_printf_common+0x3e>
 800462a:	2030      	movs	r0, #48	; 0x30
 800462c:	18e1      	adds	r1, r4, r3
 800462e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004638:	4422      	add	r2, r4
 800463a:	3302      	adds	r3, #2
 800463c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004640:	e7c2      	b.n	80045c8 <_printf_common+0x58>
 8004642:	2301      	movs	r3, #1
 8004644:	4622      	mov	r2, r4
 8004646:	4649      	mov	r1, r9
 8004648:	4638      	mov	r0, r7
 800464a:	47c0      	blx	r8
 800464c:	3001      	adds	r0, #1
 800464e:	d0e6      	beq.n	800461e <_printf_common+0xae>
 8004650:	3601      	adds	r6, #1
 8004652:	e7d9      	b.n	8004608 <_printf_common+0x98>

08004654 <_printf_i>:
 8004654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	7e0f      	ldrb	r7, [r1, #24]
 800465a:	4691      	mov	r9, r2
 800465c:	2f78      	cmp	r7, #120	; 0x78
 800465e:	4680      	mov	r8, r0
 8004660:	460c      	mov	r4, r1
 8004662:	469a      	mov	sl, r3
 8004664:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800466a:	d807      	bhi.n	800467c <_printf_i+0x28>
 800466c:	2f62      	cmp	r7, #98	; 0x62
 800466e:	d80a      	bhi.n	8004686 <_printf_i+0x32>
 8004670:	2f00      	cmp	r7, #0
 8004672:	f000 80d5 	beq.w	8004820 <_printf_i+0x1cc>
 8004676:	2f58      	cmp	r7, #88	; 0x58
 8004678:	f000 80c1 	beq.w	80047fe <_printf_i+0x1aa>
 800467c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004684:	e03a      	b.n	80046fc <_printf_i+0xa8>
 8004686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800468a:	2b15      	cmp	r3, #21
 800468c:	d8f6      	bhi.n	800467c <_printf_i+0x28>
 800468e:	a101      	add	r1, pc, #4	; (adr r1, 8004694 <_printf_i+0x40>)
 8004690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004694:	080046ed 	.word	0x080046ed
 8004698:	08004701 	.word	0x08004701
 800469c:	0800467d 	.word	0x0800467d
 80046a0:	0800467d 	.word	0x0800467d
 80046a4:	0800467d 	.word	0x0800467d
 80046a8:	0800467d 	.word	0x0800467d
 80046ac:	08004701 	.word	0x08004701
 80046b0:	0800467d 	.word	0x0800467d
 80046b4:	0800467d 	.word	0x0800467d
 80046b8:	0800467d 	.word	0x0800467d
 80046bc:	0800467d 	.word	0x0800467d
 80046c0:	08004807 	.word	0x08004807
 80046c4:	0800472d 	.word	0x0800472d
 80046c8:	080047c1 	.word	0x080047c1
 80046cc:	0800467d 	.word	0x0800467d
 80046d0:	0800467d 	.word	0x0800467d
 80046d4:	08004829 	.word	0x08004829
 80046d8:	0800467d 	.word	0x0800467d
 80046dc:	0800472d 	.word	0x0800472d
 80046e0:	0800467d 	.word	0x0800467d
 80046e4:	0800467d 	.word	0x0800467d
 80046e8:	080047c9 	.word	0x080047c9
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	1d1a      	adds	r2, r3, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	602a      	str	r2, [r5, #0]
 80046f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0a0      	b.n	8004842 <_printf_i+0x1ee>
 8004700:	6820      	ldr	r0, [r4, #0]
 8004702:	682b      	ldr	r3, [r5, #0]
 8004704:	0607      	lsls	r7, r0, #24
 8004706:	f103 0104 	add.w	r1, r3, #4
 800470a:	6029      	str	r1, [r5, #0]
 800470c:	d501      	bpl.n	8004712 <_printf_i+0xbe>
 800470e:	681e      	ldr	r6, [r3, #0]
 8004710:	e003      	b.n	800471a <_printf_i+0xc6>
 8004712:	0646      	lsls	r6, r0, #25
 8004714:	d5fb      	bpl.n	800470e <_printf_i+0xba>
 8004716:	f9b3 6000 	ldrsh.w	r6, [r3]
 800471a:	2e00      	cmp	r6, #0
 800471c:	da03      	bge.n	8004726 <_printf_i+0xd2>
 800471e:	232d      	movs	r3, #45	; 0x2d
 8004720:	4276      	negs	r6, r6
 8004722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004726:	230a      	movs	r3, #10
 8004728:	4859      	ldr	r0, [pc, #356]	; (8004890 <_printf_i+0x23c>)
 800472a:	e012      	b.n	8004752 <_printf_i+0xfe>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	6820      	ldr	r0, [r4, #0]
 8004730:	1d19      	adds	r1, r3, #4
 8004732:	6029      	str	r1, [r5, #0]
 8004734:	0605      	lsls	r5, r0, #24
 8004736:	d501      	bpl.n	800473c <_printf_i+0xe8>
 8004738:	681e      	ldr	r6, [r3, #0]
 800473a:	e002      	b.n	8004742 <_printf_i+0xee>
 800473c:	0641      	lsls	r1, r0, #25
 800473e:	d5fb      	bpl.n	8004738 <_printf_i+0xe4>
 8004740:	881e      	ldrh	r6, [r3, #0]
 8004742:	2f6f      	cmp	r7, #111	; 0x6f
 8004744:	bf0c      	ite	eq
 8004746:	2308      	moveq	r3, #8
 8004748:	230a      	movne	r3, #10
 800474a:	4851      	ldr	r0, [pc, #324]	; (8004890 <_printf_i+0x23c>)
 800474c:	2100      	movs	r1, #0
 800474e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004752:	6865      	ldr	r5, [r4, #4]
 8004754:	2d00      	cmp	r5, #0
 8004756:	bfa8      	it	ge
 8004758:	6821      	ldrge	r1, [r4, #0]
 800475a:	60a5      	str	r5, [r4, #8]
 800475c:	bfa4      	itt	ge
 800475e:	f021 0104 	bicge.w	r1, r1, #4
 8004762:	6021      	strge	r1, [r4, #0]
 8004764:	b90e      	cbnz	r6, 800476a <_printf_i+0x116>
 8004766:	2d00      	cmp	r5, #0
 8004768:	d04b      	beq.n	8004802 <_printf_i+0x1ae>
 800476a:	4615      	mov	r5, r2
 800476c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004770:	fb03 6711 	mls	r7, r3, r1, r6
 8004774:	5dc7      	ldrb	r7, [r0, r7]
 8004776:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800477a:	4637      	mov	r7, r6
 800477c:	42bb      	cmp	r3, r7
 800477e:	460e      	mov	r6, r1
 8004780:	d9f4      	bls.n	800476c <_printf_i+0x118>
 8004782:	2b08      	cmp	r3, #8
 8004784:	d10b      	bne.n	800479e <_printf_i+0x14a>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	07de      	lsls	r6, r3, #31
 800478a:	d508      	bpl.n	800479e <_printf_i+0x14a>
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	6861      	ldr	r1, [r4, #4]
 8004790:	4299      	cmp	r1, r3
 8004792:	bfde      	ittt	le
 8004794:	2330      	movle	r3, #48	; 0x30
 8004796:	f805 3c01 	strble.w	r3, [r5, #-1]
 800479a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800479e:	1b52      	subs	r2, r2, r5
 80047a0:	6122      	str	r2, [r4, #16]
 80047a2:	464b      	mov	r3, r9
 80047a4:	4621      	mov	r1, r4
 80047a6:	4640      	mov	r0, r8
 80047a8:	f8cd a000 	str.w	sl, [sp]
 80047ac:	aa03      	add	r2, sp, #12
 80047ae:	f7ff fedf 	bl	8004570 <_printf_common>
 80047b2:	3001      	adds	r0, #1
 80047b4:	d14a      	bne.n	800484c <_printf_i+0x1f8>
 80047b6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ba:	b004      	add	sp, #16
 80047bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	f043 0320 	orr.w	r3, r3, #32
 80047c6:	6023      	str	r3, [r4, #0]
 80047c8:	2778      	movs	r7, #120	; 0x78
 80047ca:	4832      	ldr	r0, [pc, #200]	; (8004894 <_printf_i+0x240>)
 80047cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	6829      	ldr	r1, [r5, #0]
 80047d4:	061f      	lsls	r7, r3, #24
 80047d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80047da:	d402      	bmi.n	80047e2 <_printf_i+0x18e>
 80047dc:	065f      	lsls	r7, r3, #25
 80047de:	bf48      	it	mi
 80047e0:	b2b6      	uxthmi	r6, r6
 80047e2:	07df      	lsls	r7, r3, #31
 80047e4:	bf48      	it	mi
 80047e6:	f043 0320 	orrmi.w	r3, r3, #32
 80047ea:	6029      	str	r1, [r5, #0]
 80047ec:	bf48      	it	mi
 80047ee:	6023      	strmi	r3, [r4, #0]
 80047f0:	b91e      	cbnz	r6, 80047fa <_printf_i+0x1a6>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	f023 0320 	bic.w	r3, r3, #32
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	2310      	movs	r3, #16
 80047fc:	e7a6      	b.n	800474c <_printf_i+0xf8>
 80047fe:	4824      	ldr	r0, [pc, #144]	; (8004890 <_printf_i+0x23c>)
 8004800:	e7e4      	b.n	80047cc <_printf_i+0x178>
 8004802:	4615      	mov	r5, r2
 8004804:	e7bd      	b.n	8004782 <_printf_i+0x12e>
 8004806:	682b      	ldr	r3, [r5, #0]
 8004808:	6826      	ldr	r6, [r4, #0]
 800480a:	1d18      	adds	r0, r3, #4
 800480c:	6961      	ldr	r1, [r4, #20]
 800480e:	6028      	str	r0, [r5, #0]
 8004810:	0635      	lsls	r5, r6, #24
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	d501      	bpl.n	800481a <_printf_i+0x1c6>
 8004816:	6019      	str	r1, [r3, #0]
 8004818:	e002      	b.n	8004820 <_printf_i+0x1cc>
 800481a:	0670      	lsls	r0, r6, #25
 800481c:	d5fb      	bpl.n	8004816 <_printf_i+0x1c2>
 800481e:	8019      	strh	r1, [r3, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	4615      	mov	r5, r2
 8004824:	6123      	str	r3, [r4, #16]
 8004826:	e7bc      	b.n	80047a2 <_printf_i+0x14e>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	2100      	movs	r1, #0
 800482c:	1d1a      	adds	r2, r3, #4
 800482e:	602a      	str	r2, [r5, #0]
 8004830:	681d      	ldr	r5, [r3, #0]
 8004832:	6862      	ldr	r2, [r4, #4]
 8004834:	4628      	mov	r0, r5
 8004836:	f000 f9c1 	bl	8004bbc <memchr>
 800483a:	b108      	cbz	r0, 8004840 <_printf_i+0x1ec>
 800483c:	1b40      	subs	r0, r0, r5
 800483e:	6060      	str	r0, [r4, #4]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	2300      	movs	r3, #0
 8004846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800484a:	e7aa      	b.n	80047a2 <_printf_i+0x14e>
 800484c:	462a      	mov	r2, r5
 800484e:	4649      	mov	r1, r9
 8004850:	4640      	mov	r0, r8
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	47d0      	blx	sl
 8004856:	3001      	adds	r0, #1
 8004858:	d0ad      	beq.n	80047b6 <_printf_i+0x162>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	079b      	lsls	r3, r3, #30
 800485e:	d413      	bmi.n	8004888 <_printf_i+0x234>
 8004860:	68e0      	ldr	r0, [r4, #12]
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	4298      	cmp	r0, r3
 8004866:	bfb8      	it	lt
 8004868:	4618      	movlt	r0, r3
 800486a:	e7a6      	b.n	80047ba <_printf_i+0x166>
 800486c:	2301      	movs	r3, #1
 800486e:	4632      	mov	r2, r6
 8004870:	4649      	mov	r1, r9
 8004872:	4640      	mov	r0, r8
 8004874:	47d0      	blx	sl
 8004876:	3001      	adds	r0, #1
 8004878:	d09d      	beq.n	80047b6 <_printf_i+0x162>
 800487a:	3501      	adds	r5, #1
 800487c:	68e3      	ldr	r3, [r4, #12]
 800487e:	9903      	ldr	r1, [sp, #12]
 8004880:	1a5b      	subs	r3, r3, r1
 8004882:	42ab      	cmp	r3, r5
 8004884:	dcf2      	bgt.n	800486c <_printf_i+0x218>
 8004886:	e7eb      	b.n	8004860 <_printf_i+0x20c>
 8004888:	2500      	movs	r5, #0
 800488a:	f104 0619 	add.w	r6, r4, #25
 800488e:	e7f5      	b.n	800487c <_printf_i+0x228>
 8004890:	08007208 	.word	0x08007208
 8004894:	08007219 	.word	0x08007219

08004898 <std>:
 8004898:	2300      	movs	r3, #0
 800489a:	b510      	push	{r4, lr}
 800489c:	4604      	mov	r4, r0
 800489e:	e9c0 3300 	strd	r3, r3, [r0]
 80048a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048a6:	6083      	str	r3, [r0, #8]
 80048a8:	8181      	strh	r1, [r0, #12]
 80048aa:	6643      	str	r3, [r0, #100]	; 0x64
 80048ac:	81c2      	strh	r2, [r0, #14]
 80048ae:	6183      	str	r3, [r0, #24]
 80048b0:	4619      	mov	r1, r3
 80048b2:	2208      	movs	r2, #8
 80048b4:	305c      	adds	r0, #92	; 0x5c
 80048b6:	f000 f902 	bl	8004abe <memset>
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <std+0x38>)
 80048bc:	6224      	str	r4, [r4, #32]
 80048be:	6263      	str	r3, [r4, #36]	; 0x24
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <std+0x3c>)
 80048c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <std+0x40>)
 80048c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048c8:	4b04      	ldr	r3, [pc, #16]	; (80048dc <std+0x44>)
 80048ca:	6323      	str	r3, [r4, #48]	; 0x30
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	bf00      	nop
 80048d0:	08004a39 	.word	0x08004a39
 80048d4:	08004a5b 	.word	0x08004a5b
 80048d8:	08004a93 	.word	0x08004a93
 80048dc:	08004ab7 	.word	0x08004ab7

080048e0 <stdio_exit_handler>:
 80048e0:	4a02      	ldr	r2, [pc, #8]	; (80048ec <stdio_exit_handler+0xc>)
 80048e2:	4903      	ldr	r1, [pc, #12]	; (80048f0 <stdio_exit_handler+0x10>)
 80048e4:	4803      	ldr	r0, [pc, #12]	; (80048f4 <stdio_exit_handler+0x14>)
 80048e6:	f000 b869 	b.w	80049bc <_fwalk_sglue>
 80048ea:	bf00      	nop
 80048ec:	2000000c 	.word	0x2000000c
 80048f0:	08006555 	.word	0x08006555
 80048f4:	20000018 	.word	0x20000018

080048f8 <cleanup_stdio>:
 80048f8:	6841      	ldr	r1, [r0, #4]
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <cleanup_stdio+0x34>)
 80048fc:	b510      	push	{r4, lr}
 80048fe:	4299      	cmp	r1, r3
 8004900:	4604      	mov	r4, r0
 8004902:	d001      	beq.n	8004908 <cleanup_stdio+0x10>
 8004904:	f001 fe26 	bl	8006554 <_fflush_r>
 8004908:	68a1      	ldr	r1, [r4, #8]
 800490a:	4b09      	ldr	r3, [pc, #36]	; (8004930 <cleanup_stdio+0x38>)
 800490c:	4299      	cmp	r1, r3
 800490e:	d002      	beq.n	8004916 <cleanup_stdio+0x1e>
 8004910:	4620      	mov	r0, r4
 8004912:	f001 fe1f 	bl	8006554 <_fflush_r>
 8004916:	68e1      	ldr	r1, [r4, #12]
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <cleanup_stdio+0x3c>)
 800491a:	4299      	cmp	r1, r3
 800491c:	d004      	beq.n	8004928 <cleanup_stdio+0x30>
 800491e:	4620      	mov	r0, r4
 8004920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004924:	f001 be16 	b.w	8006554 <_fflush_r>
 8004928:	bd10      	pop	{r4, pc}
 800492a:	bf00      	nop
 800492c:	200002c4 	.word	0x200002c4
 8004930:	2000032c 	.word	0x2000032c
 8004934:	20000394 	.word	0x20000394

08004938 <global_stdio_init.part.0>:
 8004938:	b510      	push	{r4, lr}
 800493a:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <global_stdio_init.part.0+0x30>)
 800493c:	4c0b      	ldr	r4, [pc, #44]	; (800496c <global_stdio_init.part.0+0x34>)
 800493e:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <global_stdio_init.part.0+0x38>)
 8004940:	4620      	mov	r0, r4
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	2104      	movs	r1, #4
 8004946:	2200      	movs	r2, #0
 8004948:	f7ff ffa6 	bl	8004898 <std>
 800494c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004950:	2201      	movs	r2, #1
 8004952:	2109      	movs	r1, #9
 8004954:	f7ff ffa0 	bl	8004898 <std>
 8004958:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800495c:	2202      	movs	r2, #2
 800495e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004962:	2112      	movs	r1, #18
 8004964:	f7ff bf98 	b.w	8004898 <std>
 8004968:	200003fc 	.word	0x200003fc
 800496c:	200002c4 	.word	0x200002c4
 8004970:	080048e1 	.word	0x080048e1

08004974 <__sfp_lock_acquire>:
 8004974:	4801      	ldr	r0, [pc, #4]	; (800497c <__sfp_lock_acquire+0x8>)
 8004976:	f000 b91f 	b.w	8004bb8 <__retarget_lock_acquire_recursive>
 800497a:	bf00      	nop
 800497c:	20000405 	.word	0x20000405

08004980 <__sfp_lock_release>:
 8004980:	4801      	ldr	r0, [pc, #4]	; (8004988 <__sfp_lock_release+0x8>)
 8004982:	f000 b91a 	b.w	8004bba <__retarget_lock_release_recursive>
 8004986:	bf00      	nop
 8004988:	20000405 	.word	0x20000405

0800498c <__sinit>:
 800498c:	b510      	push	{r4, lr}
 800498e:	4604      	mov	r4, r0
 8004990:	f7ff fff0 	bl	8004974 <__sfp_lock_acquire>
 8004994:	6a23      	ldr	r3, [r4, #32]
 8004996:	b11b      	cbz	r3, 80049a0 <__sinit+0x14>
 8004998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800499c:	f7ff bff0 	b.w	8004980 <__sfp_lock_release>
 80049a0:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <__sinit+0x28>)
 80049a2:	6223      	str	r3, [r4, #32]
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__sinit+0x2c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f5      	bne.n	8004998 <__sinit+0xc>
 80049ac:	f7ff ffc4 	bl	8004938 <global_stdio_init.part.0>
 80049b0:	e7f2      	b.n	8004998 <__sinit+0xc>
 80049b2:	bf00      	nop
 80049b4:	080048f9 	.word	0x080048f9
 80049b8:	200003fc 	.word	0x200003fc

080049bc <_fwalk_sglue>:
 80049bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c0:	4607      	mov	r7, r0
 80049c2:	4688      	mov	r8, r1
 80049c4:	4614      	mov	r4, r2
 80049c6:	2600      	movs	r6, #0
 80049c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049cc:	f1b9 0901 	subs.w	r9, r9, #1
 80049d0:	d505      	bpl.n	80049de <_fwalk_sglue+0x22>
 80049d2:	6824      	ldr	r4, [r4, #0]
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	d1f7      	bne.n	80049c8 <_fwalk_sglue+0xc>
 80049d8:	4630      	mov	r0, r6
 80049da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049de:	89ab      	ldrh	r3, [r5, #12]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d907      	bls.n	80049f4 <_fwalk_sglue+0x38>
 80049e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049e8:	3301      	adds	r3, #1
 80049ea:	d003      	beq.n	80049f4 <_fwalk_sglue+0x38>
 80049ec:	4629      	mov	r1, r5
 80049ee:	4638      	mov	r0, r7
 80049f0:	47c0      	blx	r8
 80049f2:	4306      	orrs	r6, r0
 80049f4:	3568      	adds	r5, #104	; 0x68
 80049f6:	e7e9      	b.n	80049cc <_fwalk_sglue+0x10>

080049f8 <siprintf>:
 80049f8:	b40e      	push	{r1, r2, r3}
 80049fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049fe:	b500      	push	{lr}
 8004a00:	b09c      	sub	sp, #112	; 0x70
 8004a02:	ab1d      	add	r3, sp, #116	; 0x74
 8004a04:	9002      	str	r0, [sp, #8]
 8004a06:	9006      	str	r0, [sp, #24]
 8004a08:	9107      	str	r1, [sp, #28]
 8004a0a:	9104      	str	r1, [sp, #16]
 8004a0c:	4808      	ldr	r0, [pc, #32]	; (8004a30 <siprintf+0x38>)
 8004a0e:	4909      	ldr	r1, [pc, #36]	; (8004a34 <siprintf+0x3c>)
 8004a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a14:	9105      	str	r1, [sp, #20]
 8004a16:	6800      	ldr	r0, [r0, #0]
 8004a18:	a902      	add	r1, sp, #8
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	f001 fc1a 	bl	8006254 <_svfiprintf_r>
 8004a20:	2200      	movs	r2, #0
 8004a22:	9b02      	ldr	r3, [sp, #8]
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	b01c      	add	sp, #112	; 0x70
 8004a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a2c:	b003      	add	sp, #12
 8004a2e:	4770      	bx	lr
 8004a30:	20000064 	.word	0x20000064
 8004a34:	ffff0208 	.word	0xffff0208

08004a38 <__sread>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a40:	f000 f86c 	bl	8004b1c <_read_r>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	bfab      	itete	ge
 8004a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a4c:	181b      	addge	r3, r3, r0
 8004a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a52:	bfac      	ite	ge
 8004a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a56:	81a3      	strhlt	r3, [r4, #12]
 8004a58:	bd10      	pop	{r4, pc}

08004a5a <__swrite>:
 8004a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5e:	461f      	mov	r7, r3
 8004a60:	898b      	ldrh	r3, [r1, #12]
 8004a62:	4605      	mov	r5, r0
 8004a64:	05db      	lsls	r3, r3, #23
 8004a66:	460c      	mov	r4, r1
 8004a68:	4616      	mov	r6, r2
 8004a6a:	d505      	bpl.n	8004a78 <__swrite+0x1e>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	f000 f840 	bl	8004af8 <_lseek_r>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	4632      	mov	r2, r6
 8004a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	4628      	mov	r0, r5
 8004a84:	463b      	mov	r3, r7
 8004a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	f000 b857 	b.w	8004b40 <_write_r>

08004a92 <__sseek>:
 8004a92:	b510      	push	{r4, lr}
 8004a94:	460c      	mov	r4, r1
 8004a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9a:	f000 f82d 	bl	8004af8 <_lseek_r>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	bf15      	itete	ne
 8004aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aae:	81a3      	strheq	r3, [r4, #12]
 8004ab0:	bf18      	it	ne
 8004ab2:	81a3      	strhne	r3, [r4, #12]
 8004ab4:	bd10      	pop	{r4, pc}

08004ab6 <__sclose>:
 8004ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aba:	f000 b80d 	b.w	8004ad8 <_close_r>

08004abe <memset>:
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4402      	add	r2, r0
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d100      	bne.n	8004ac8 <memset+0xa>
 8004ac6:	4770      	bx	lr
 8004ac8:	f803 1b01 	strb.w	r1, [r3], #1
 8004acc:	e7f9      	b.n	8004ac2 <memset+0x4>
	...

08004ad0 <_localeconv_r>:
 8004ad0:	4800      	ldr	r0, [pc, #0]	; (8004ad4 <_localeconv_r+0x4>)
 8004ad2:	4770      	bx	lr
 8004ad4:	20000158 	.word	0x20000158

08004ad8 <_close_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	2300      	movs	r3, #0
 8004adc:	4d05      	ldr	r5, [pc, #20]	; (8004af4 <_close_r+0x1c>)
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	f7fd f843 	bl	8001b6e <_close>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_close_r+0x1a>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_close_r+0x1a>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	20000400 	.word	0x20000400

08004af8 <_lseek_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4604      	mov	r4, r0
 8004afc:	4608      	mov	r0, r1
 8004afe:	4611      	mov	r1, r2
 8004b00:	2200      	movs	r2, #0
 8004b02:	4d05      	ldr	r5, [pc, #20]	; (8004b18 <_lseek_r+0x20>)
 8004b04:	602a      	str	r2, [r5, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f7fd f855 	bl	8001bb6 <_lseek>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d102      	bne.n	8004b16 <_lseek_r+0x1e>
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	b103      	cbz	r3, 8004b16 <_lseek_r+0x1e>
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	20000400 	.word	0x20000400

08004b1c <_read_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	2200      	movs	r2, #0
 8004b26:	4d05      	ldr	r5, [pc, #20]	; (8004b3c <_read_r+0x20>)
 8004b28:	602a      	str	r2, [r5, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f7fc ffe6 	bl	8001afc <_read>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_read_r+0x1e>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_read_r+0x1e>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	20000400 	.word	0x20000400

08004b40 <_write_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	2200      	movs	r2, #0
 8004b4a:	4d05      	ldr	r5, [pc, #20]	; (8004b60 <_write_r+0x20>)
 8004b4c:	602a      	str	r2, [r5, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f7fc fff1 	bl	8001b36 <_write>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_write_r+0x1e>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_write_r+0x1e>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	20000400 	.word	0x20000400

08004b64 <__errno>:
 8004b64:	4b01      	ldr	r3, [pc, #4]	; (8004b6c <__errno+0x8>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000064 	.word	0x20000064

08004b70 <__libc_init_array>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	2600      	movs	r6, #0
 8004b74:	4d0c      	ldr	r5, [pc, #48]	; (8004ba8 <__libc_init_array+0x38>)
 8004b76:	4c0d      	ldr	r4, [pc, #52]	; (8004bac <__libc_init_array+0x3c>)
 8004b78:	1b64      	subs	r4, r4, r5
 8004b7a:	10a4      	asrs	r4, r4, #2
 8004b7c:	42a6      	cmp	r6, r4
 8004b7e:	d109      	bne.n	8004b94 <__libc_init_array+0x24>
 8004b80:	f002 f888 	bl	8006c94 <_init>
 8004b84:	2600      	movs	r6, #0
 8004b86:	4d0a      	ldr	r5, [pc, #40]	; (8004bb0 <__libc_init_array+0x40>)
 8004b88:	4c0a      	ldr	r4, [pc, #40]	; (8004bb4 <__libc_init_array+0x44>)
 8004b8a:	1b64      	subs	r4, r4, r5
 8004b8c:	10a4      	asrs	r4, r4, #2
 8004b8e:	42a6      	cmp	r6, r4
 8004b90:	d105      	bne.n	8004b9e <__libc_init_array+0x2e>
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
 8004b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b98:	4798      	blx	r3
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	e7ee      	b.n	8004b7c <__libc_init_array+0xc>
 8004b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba2:	4798      	blx	r3
 8004ba4:	3601      	adds	r6, #1
 8004ba6:	e7f2      	b.n	8004b8e <__libc_init_array+0x1e>
 8004ba8:	08007564 	.word	0x08007564
 8004bac:	08007564 	.word	0x08007564
 8004bb0:	08007564 	.word	0x08007564
 8004bb4:	08007568 	.word	0x08007568

08004bb8 <__retarget_lock_acquire_recursive>:
 8004bb8:	4770      	bx	lr

08004bba <__retarget_lock_release_recursive>:
 8004bba:	4770      	bx	lr

08004bbc <memchr>:
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	b510      	push	{r4, lr}
 8004bc0:	b2c9      	uxtb	r1, r1
 8004bc2:	4402      	add	r2, r0
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	d101      	bne.n	8004bce <memchr+0x12>
 8004bca:	2000      	movs	r0, #0
 8004bcc:	e003      	b.n	8004bd6 <memchr+0x1a>
 8004bce:	7804      	ldrb	r4, [r0, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	428c      	cmp	r4, r1
 8004bd4:	d1f6      	bne.n	8004bc4 <memchr+0x8>
 8004bd6:	bd10      	pop	{r4, pc}

08004bd8 <quorem>:
 8004bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	6903      	ldr	r3, [r0, #16]
 8004bde:	690c      	ldr	r4, [r1, #16]
 8004be0:	4607      	mov	r7, r0
 8004be2:	42a3      	cmp	r3, r4
 8004be4:	db7f      	blt.n	8004ce6 <quorem+0x10e>
 8004be6:	3c01      	subs	r4, #1
 8004be8:	f100 0514 	add.w	r5, r0, #20
 8004bec:	f101 0814 	add.w	r8, r1, #20
 8004bf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	429a      	cmp	r2, r3
 8004c02:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c06:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c0e:	d331      	bcc.n	8004c74 <quorem+0x9c>
 8004c10:	f04f 0e00 	mov.w	lr, #0
 8004c14:	4640      	mov	r0, r8
 8004c16:	46ac      	mov	ip, r5
 8004c18:	46f2      	mov	sl, lr
 8004c1a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c1e:	b293      	uxth	r3, r2
 8004c20:	fb06 e303 	mla	r3, r6, r3, lr
 8004c24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c28:	0c1a      	lsrs	r2, r3, #16
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	fb06 220e 	mla	r2, r6, lr, r2
 8004c30:	ebaa 0303 	sub.w	r3, sl, r3
 8004c34:	f8dc a000 	ldr.w	sl, [ip]
 8004c38:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c3c:	fa1f fa8a 	uxth.w	sl, sl
 8004c40:	4453      	add	r3, sl
 8004c42:	f8dc a000 	ldr.w	sl, [ip]
 8004c46:	b292      	uxth	r2, r2
 8004c48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c56:	4581      	cmp	r9, r0
 8004c58:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c5c:	f84c 3b04 	str.w	r3, [ip], #4
 8004c60:	d2db      	bcs.n	8004c1a <quorem+0x42>
 8004c62:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c66:	b92b      	cbnz	r3, 8004c74 <quorem+0x9c>
 8004c68:	9b01      	ldr	r3, [sp, #4]
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	429d      	cmp	r5, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	d32d      	bcc.n	8004cce <quorem+0xf6>
 8004c72:	613c      	str	r4, [r7, #16]
 8004c74:	4638      	mov	r0, r7
 8004c76:	f001 f995 	bl	8005fa4 <__mcmp>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	db23      	blt.n	8004cc6 <quorem+0xee>
 8004c7e:	4629      	mov	r1, r5
 8004c80:	2000      	movs	r0, #0
 8004c82:	3601      	adds	r6, #1
 8004c84:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c88:	f8d1 c000 	ldr.w	ip, [r1]
 8004c8c:	b293      	uxth	r3, r2
 8004c8e:	1ac3      	subs	r3, r0, r3
 8004c90:	0c12      	lsrs	r2, r2, #16
 8004c92:	fa1f f08c 	uxth.w	r0, ip
 8004c96:	4403      	add	r3, r0
 8004c98:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004c9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ca6:	45c1      	cmp	r9, r8
 8004ca8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004cac:	f841 3b04 	str.w	r3, [r1], #4
 8004cb0:	d2e8      	bcs.n	8004c84 <quorem+0xac>
 8004cb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cba:	b922      	cbnz	r2, 8004cc6 <quorem+0xee>
 8004cbc:	3b04      	subs	r3, #4
 8004cbe:	429d      	cmp	r5, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	d30a      	bcc.n	8004cda <quorem+0x102>
 8004cc4:	613c      	str	r4, [r7, #16]
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	b003      	add	sp, #12
 8004cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	3b04      	subs	r3, #4
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	d1cd      	bne.n	8004c72 <quorem+0x9a>
 8004cd6:	3c01      	subs	r4, #1
 8004cd8:	e7c8      	b.n	8004c6c <quorem+0x94>
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	3b04      	subs	r3, #4
 8004cde:	2a00      	cmp	r2, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <quorem+0xec>
 8004ce2:	3c01      	subs	r4, #1
 8004ce4:	e7eb      	b.n	8004cbe <quorem+0xe6>
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	e7ee      	b.n	8004cc8 <quorem+0xf0>
 8004cea:	0000      	movs	r0, r0
 8004cec:	0000      	movs	r0, r0
	...

08004cf0 <_dtoa_r>:
 8004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf4:	4616      	mov	r6, r2
 8004cf6:	461f      	mov	r7, r3
 8004cf8:	69c4      	ldr	r4, [r0, #28]
 8004cfa:	b099      	sub	sp, #100	; 0x64
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d06:	b974      	cbnz	r4, 8004d26 <_dtoa_r+0x36>
 8004d08:	2010      	movs	r0, #16
 8004d0a:	f000 fe1d 	bl	8005948 <malloc>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	61e8      	str	r0, [r5, #28]
 8004d12:	b920      	cbnz	r0, 8004d1e <_dtoa_r+0x2e>
 8004d14:	21ef      	movs	r1, #239	; 0xef
 8004d16:	4bac      	ldr	r3, [pc, #688]	; (8004fc8 <_dtoa_r+0x2d8>)
 8004d18:	48ac      	ldr	r0, [pc, #688]	; (8004fcc <_dtoa_r+0x2dc>)
 8004d1a:	f001 fc7b 	bl	8006614 <__assert_func>
 8004d1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004d22:	6004      	str	r4, [r0, #0]
 8004d24:	60c4      	str	r4, [r0, #12]
 8004d26:	69eb      	ldr	r3, [r5, #28]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	b151      	cbz	r1, 8004d42 <_dtoa_r+0x52>
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4093      	lsls	r3, r2
 8004d32:	604a      	str	r2, [r1, #4]
 8004d34:	608b      	str	r3, [r1, #8]
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 fefa 	bl	8005b30 <_Bfree>
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	69eb      	ldr	r3, [r5, #28]
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	1e3b      	subs	r3, r7, #0
 8004d44:	bfaf      	iteee	ge
 8004d46:	2300      	movge	r3, #0
 8004d48:	2201      	movlt	r2, #1
 8004d4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d4e:	9305      	strlt	r3, [sp, #20]
 8004d50:	bfa8      	it	ge
 8004d52:	f8c8 3000 	strge.w	r3, [r8]
 8004d56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004d5a:	4b9d      	ldr	r3, [pc, #628]	; (8004fd0 <_dtoa_r+0x2e0>)
 8004d5c:	bfb8      	it	lt
 8004d5e:	f8c8 2000 	strlt.w	r2, [r8]
 8004d62:	ea33 0309 	bics.w	r3, r3, r9
 8004d66:	d119      	bne.n	8004d9c <_dtoa_r+0xac>
 8004d68:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d74:	4333      	orrs	r3, r6
 8004d76:	f000 8589 	beq.w	800588c <_dtoa_r+0xb9c>
 8004d7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d7c:	b953      	cbnz	r3, 8004d94 <_dtoa_r+0xa4>
 8004d7e:	4b95      	ldr	r3, [pc, #596]	; (8004fd4 <_dtoa_r+0x2e4>)
 8004d80:	e023      	b.n	8004dca <_dtoa_r+0xda>
 8004d82:	4b95      	ldr	r3, [pc, #596]	; (8004fd8 <_dtoa_r+0x2e8>)
 8004d84:	9303      	str	r3, [sp, #12]
 8004d86:	3308      	adds	r3, #8
 8004d88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	9803      	ldr	r0, [sp, #12]
 8004d8e:	b019      	add	sp, #100	; 0x64
 8004d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d94:	4b8f      	ldr	r3, [pc, #572]	; (8004fd4 <_dtoa_r+0x2e4>)
 8004d96:	9303      	str	r3, [sp, #12]
 8004d98:	3303      	adds	r3, #3
 8004d9a:	e7f5      	b.n	8004d88 <_dtoa_r+0x98>
 8004d9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004da0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004da4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004da8:	2200      	movs	r2, #0
 8004daa:	2300      	movs	r3, #0
 8004dac:	f7fb fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8004db0:	4680      	mov	r8, r0
 8004db2:	b160      	cbz	r0, 8004dce <_dtoa_r+0xde>
 8004db4:	2301      	movs	r3, #1
 8004db6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8562 	beq.w	8005886 <_dtoa_r+0xb96>
 8004dc2:	4b86      	ldr	r3, [pc, #536]	; (8004fdc <_dtoa_r+0x2ec>)
 8004dc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	9303      	str	r3, [sp, #12]
 8004dcc:	e7de      	b.n	8004d8c <_dtoa_r+0x9c>
 8004dce:	ab16      	add	r3, sp, #88	; 0x58
 8004dd0:	9301      	str	r3, [sp, #4]
 8004dd2:	ab17      	add	r3, sp, #92	; 0x5c
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ddc:	f001 f98a 	bl	80060f4 <__d2b>
 8004de0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004de4:	4682      	mov	sl, r0
 8004de6:	2c00      	cmp	r4, #0
 8004de8:	d07e      	beq.n	8004ee8 <_dtoa_r+0x1f8>
 8004dea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004df0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004dfc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004e00:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e04:	4619      	mov	r1, r3
 8004e06:	2200      	movs	r2, #0
 8004e08:	4b75      	ldr	r3, [pc, #468]	; (8004fe0 <_dtoa_r+0x2f0>)
 8004e0a:	f7fb f9ad 	bl	8000168 <__aeabi_dsub>
 8004e0e:	a368      	add	r3, pc, #416	; (adr r3, 8004fb0 <_dtoa_r+0x2c0>)
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f7fb fb60 	bl	80004d8 <__aeabi_dmul>
 8004e18:	a367      	add	r3, pc, #412	; (adr r3, 8004fb8 <_dtoa_r+0x2c8>)
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f7fb f9a5 	bl	800016c <__adddf3>
 8004e22:	4606      	mov	r6, r0
 8004e24:	4620      	mov	r0, r4
 8004e26:	460f      	mov	r7, r1
 8004e28:	f7fb faec 	bl	8000404 <__aeabi_i2d>
 8004e2c:	a364      	add	r3, pc, #400	; (adr r3, 8004fc0 <_dtoa_r+0x2d0>)
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f7fb fb51 	bl	80004d8 <__aeabi_dmul>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	4639      	mov	r1, r7
 8004e3e:	f7fb f995 	bl	800016c <__adddf3>
 8004e42:	4606      	mov	r6, r0
 8004e44:	460f      	mov	r7, r1
 8004e46:	f7fb fdf7 	bl	8000a38 <__aeabi_d2iz>
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	4683      	mov	fp, r0
 8004e4e:	2300      	movs	r3, #0
 8004e50:	4630      	mov	r0, r6
 8004e52:	4639      	mov	r1, r7
 8004e54:	f7fb fdb2 	bl	80009bc <__aeabi_dcmplt>
 8004e58:	b148      	cbz	r0, 8004e6e <_dtoa_r+0x17e>
 8004e5a:	4658      	mov	r0, fp
 8004e5c:	f7fb fad2 	bl	8000404 <__aeabi_i2d>
 8004e60:	4632      	mov	r2, r6
 8004e62:	463b      	mov	r3, r7
 8004e64:	f7fb fda0 	bl	80009a8 <__aeabi_dcmpeq>
 8004e68:	b908      	cbnz	r0, 8004e6e <_dtoa_r+0x17e>
 8004e6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e6e:	f1bb 0f16 	cmp.w	fp, #22
 8004e72:	d857      	bhi.n	8004f24 <_dtoa_r+0x234>
 8004e74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e78:	4b5a      	ldr	r3, [pc, #360]	; (8004fe4 <_dtoa_r+0x2f4>)
 8004e7a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb fd9b 	bl	80009bc <__aeabi_dcmplt>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d04e      	beq.n	8004f28 <_dtoa_r+0x238>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e94:	1b1b      	subs	r3, r3, r4
 8004e96:	1e5a      	subs	r2, r3, #1
 8004e98:	bf46      	itte	mi
 8004e9a:	f1c3 0901 	rsbmi	r9, r3, #1
 8004e9e:	2300      	movmi	r3, #0
 8004ea0:	f04f 0900 	movpl.w	r9, #0
 8004ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ea6:	bf48      	it	mi
 8004ea8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004eaa:	f1bb 0f00 	cmp.w	fp, #0
 8004eae:	db3d      	blt.n	8004f2c <_dtoa_r+0x23c>
 8004eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004eb6:	445b      	add	r3, fp
 8004eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eba:	2300      	movs	r3, #0
 8004ebc:	930a      	str	r3, [sp, #40]	; 0x28
 8004ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ec0:	2b09      	cmp	r3, #9
 8004ec2:	d867      	bhi.n	8004f94 <_dtoa_r+0x2a4>
 8004ec4:	2b05      	cmp	r3, #5
 8004ec6:	bfc4      	itt	gt
 8004ec8:	3b04      	subgt	r3, #4
 8004eca:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ece:	bfc8      	it	gt
 8004ed0:	2400      	movgt	r4, #0
 8004ed2:	f1a3 0302 	sub.w	r3, r3, #2
 8004ed6:	bfd8      	it	le
 8004ed8:	2401      	movle	r4, #1
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	f200 8086 	bhi.w	8004fec <_dtoa_r+0x2fc>
 8004ee0:	e8df f003 	tbb	[pc, r3]
 8004ee4:	5637392c 	.word	0x5637392c
 8004ee8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004eec:	441c      	add	r4, r3
 8004eee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	bfc1      	itttt	gt
 8004ef6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004efa:	fa09 f903 	lslgt.w	r9, r9, r3
 8004efe:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004f02:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004f06:	bfd6      	itet	le
 8004f08:	f1c3 0320 	rsble	r3, r3, #32
 8004f0c:	ea49 0003 	orrgt.w	r0, r9, r3
 8004f10:	fa06 f003 	lslle.w	r0, r6, r3
 8004f14:	f7fb fa66 	bl	80003e4 <__aeabi_ui2d>
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004f1e:	3c01      	subs	r4, #1
 8004f20:	9213      	str	r2, [sp, #76]	; 0x4c
 8004f22:	e76f      	b.n	8004e04 <_dtoa_r+0x114>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e7b3      	b.n	8004e90 <_dtoa_r+0x1a0>
 8004f28:	900f      	str	r0, [sp, #60]	; 0x3c
 8004f2a:	e7b2      	b.n	8004e92 <_dtoa_r+0x1a2>
 8004f2c:	f1cb 0300 	rsb	r3, fp, #0
 8004f30:	930a      	str	r3, [sp, #40]	; 0x28
 8004f32:	2300      	movs	r3, #0
 8004f34:	eba9 090b 	sub.w	r9, r9, fp
 8004f38:	930e      	str	r3, [sp, #56]	; 0x38
 8004f3a:	e7c0      	b.n	8004ebe <_dtoa_r+0x1ce>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	dc55      	bgt.n	8004ff2 <_dtoa_r+0x302>
 8004f46:	2301      	movs	r3, #1
 8004f48:	461a      	mov	r2, r3
 8004f4a:	9306      	str	r3, [sp, #24]
 8004f4c:	9308      	str	r3, [sp, #32]
 8004f4e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f50:	e00b      	b.n	8004f6a <_dtoa_r+0x27a>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e7f3      	b.n	8004f3e <_dtoa_r+0x24e>
 8004f56:	2300      	movs	r3, #0
 8004f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f5c:	445b      	add	r3, fp
 8004f5e:	9306      	str	r3, [sp, #24]
 8004f60:	3301      	adds	r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	9308      	str	r3, [sp, #32]
 8004f66:	bfb8      	it	lt
 8004f68:	2301      	movlt	r3, #1
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	69e8      	ldr	r0, [r5, #28]
 8004f70:	f102 0614 	add.w	r6, r2, #20
 8004f74:	429e      	cmp	r6, r3
 8004f76:	d940      	bls.n	8004ffa <_dtoa_r+0x30a>
 8004f78:	6041      	str	r1, [r0, #4]
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 fd98 	bl	8005ab0 <_Balloc>
 8004f80:	9003      	str	r0, [sp, #12]
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d13c      	bne.n	8005000 <_dtoa_r+0x310>
 8004f86:	4602      	mov	r2, r0
 8004f88:	f240 11af 	movw	r1, #431	; 0x1af
 8004f8c:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <_dtoa_r+0x2f8>)
 8004f8e:	e6c3      	b.n	8004d18 <_dtoa_r+0x28>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e7e1      	b.n	8004f58 <_dtoa_r+0x268>
 8004f94:	2401      	movs	r4, #1
 8004f96:	2300      	movs	r3, #0
 8004f98:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f9a:	9322      	str	r3, [sp, #136]	; 0x88
 8004f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	9306      	str	r3, [sp, #24]
 8004fa4:	9308      	str	r3, [sp, #32]
 8004fa6:	2312      	movs	r3, #18
 8004fa8:	e7d1      	b.n	8004f4e <_dtoa_r+0x25e>
 8004faa:	bf00      	nop
 8004fac:	f3af 8000 	nop.w
 8004fb0:	636f4361 	.word	0x636f4361
 8004fb4:	3fd287a7 	.word	0x3fd287a7
 8004fb8:	8b60c8b3 	.word	0x8b60c8b3
 8004fbc:	3fc68a28 	.word	0x3fc68a28
 8004fc0:	509f79fb 	.word	0x509f79fb
 8004fc4:	3fd34413 	.word	0x3fd34413
 8004fc8:	08007237 	.word	0x08007237
 8004fcc:	0800724e 	.word	0x0800724e
 8004fd0:	7ff00000 	.word	0x7ff00000
 8004fd4:	08007233 	.word	0x08007233
 8004fd8:	0800722a 	.word	0x0800722a
 8004fdc:	08007207 	.word	0x08007207
 8004fe0:	3ff80000 	.word	0x3ff80000
 8004fe4:	08007338 	.word	0x08007338
 8004fe8:	080072a6 	.word	0x080072a6
 8004fec:	2301      	movs	r3, #1
 8004fee:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ff0:	e7d4      	b.n	8004f9c <_dtoa_r+0x2ac>
 8004ff2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ff4:	9306      	str	r3, [sp, #24]
 8004ff6:	9308      	str	r3, [sp, #32]
 8004ff8:	e7b7      	b.n	8004f6a <_dtoa_r+0x27a>
 8004ffa:	3101      	adds	r1, #1
 8004ffc:	0052      	lsls	r2, r2, #1
 8004ffe:	e7b7      	b.n	8004f70 <_dtoa_r+0x280>
 8005000:	69eb      	ldr	r3, [r5, #28]
 8005002:	9a03      	ldr	r2, [sp, #12]
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	9b08      	ldr	r3, [sp, #32]
 8005008:	2b0e      	cmp	r3, #14
 800500a:	f200 80a8 	bhi.w	800515e <_dtoa_r+0x46e>
 800500e:	2c00      	cmp	r4, #0
 8005010:	f000 80a5 	beq.w	800515e <_dtoa_r+0x46e>
 8005014:	f1bb 0f00 	cmp.w	fp, #0
 8005018:	dd34      	ble.n	8005084 <_dtoa_r+0x394>
 800501a:	4b9a      	ldr	r3, [pc, #616]	; (8005284 <_dtoa_r+0x594>)
 800501c:	f00b 020f 	and.w	r2, fp, #15
 8005020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005024:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005028:	e9d3 3400 	ldrd	r3, r4, [r3]
 800502c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005030:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005034:	d016      	beq.n	8005064 <_dtoa_r+0x374>
 8005036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800503a:	4b93      	ldr	r3, [pc, #588]	; (8005288 <_dtoa_r+0x598>)
 800503c:	2703      	movs	r7, #3
 800503e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005042:	f7fb fb73 	bl	800072c <__aeabi_ddiv>
 8005046:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800504a:	f004 040f 	and.w	r4, r4, #15
 800504e:	4e8e      	ldr	r6, [pc, #568]	; (8005288 <_dtoa_r+0x598>)
 8005050:	b954      	cbnz	r4, 8005068 <_dtoa_r+0x378>
 8005052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800505a:	f7fb fb67 	bl	800072c <__aeabi_ddiv>
 800505e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005062:	e029      	b.n	80050b8 <_dtoa_r+0x3c8>
 8005064:	2702      	movs	r7, #2
 8005066:	e7f2      	b.n	800504e <_dtoa_r+0x35e>
 8005068:	07e1      	lsls	r1, r4, #31
 800506a:	d508      	bpl.n	800507e <_dtoa_r+0x38e>
 800506c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005070:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005074:	f7fb fa30 	bl	80004d8 <__aeabi_dmul>
 8005078:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800507c:	3701      	adds	r7, #1
 800507e:	1064      	asrs	r4, r4, #1
 8005080:	3608      	adds	r6, #8
 8005082:	e7e5      	b.n	8005050 <_dtoa_r+0x360>
 8005084:	f000 80a5 	beq.w	80051d2 <_dtoa_r+0x4e2>
 8005088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800508c:	f1cb 0400 	rsb	r4, fp, #0
 8005090:	4b7c      	ldr	r3, [pc, #496]	; (8005284 <_dtoa_r+0x594>)
 8005092:	f004 020f 	and.w	r2, r4, #15
 8005096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f7fb fa1b 	bl	80004d8 <__aeabi_dmul>
 80050a2:	2702      	movs	r7, #2
 80050a4:	2300      	movs	r3, #0
 80050a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050aa:	4e77      	ldr	r6, [pc, #476]	; (8005288 <_dtoa_r+0x598>)
 80050ac:	1124      	asrs	r4, r4, #4
 80050ae:	2c00      	cmp	r4, #0
 80050b0:	f040 8084 	bne.w	80051bc <_dtoa_r+0x4cc>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1d2      	bne.n	800505e <_dtoa_r+0x36e>
 80050b8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8087 	beq.w	80051d6 <_dtoa_r+0x4e6>
 80050c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050cc:	2200      	movs	r2, #0
 80050ce:	4b6f      	ldr	r3, [pc, #444]	; (800528c <_dtoa_r+0x59c>)
 80050d0:	f7fb fc74 	bl	80009bc <__aeabi_dcmplt>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d07e      	beq.n	80051d6 <_dtoa_r+0x4e6>
 80050d8:	9b08      	ldr	r3, [sp, #32]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d07b      	beq.n	80051d6 <_dtoa_r+0x4e6>
 80050de:	9b06      	ldr	r3, [sp, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	dd38      	ble.n	8005156 <_dtoa_r+0x466>
 80050e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050e8:	2200      	movs	r2, #0
 80050ea:	4b69      	ldr	r3, [pc, #420]	; (8005290 <_dtoa_r+0x5a0>)
 80050ec:	f7fb f9f4 	bl	80004d8 <__aeabi_dmul>
 80050f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050f4:	9c06      	ldr	r4, [sp, #24]
 80050f6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80050fa:	3701      	adds	r7, #1
 80050fc:	4638      	mov	r0, r7
 80050fe:	f7fb f981 	bl	8000404 <__aeabi_i2d>
 8005102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005106:	f7fb f9e7 	bl	80004d8 <__aeabi_dmul>
 800510a:	2200      	movs	r2, #0
 800510c:	4b61      	ldr	r3, [pc, #388]	; (8005294 <_dtoa_r+0x5a4>)
 800510e:	f7fb f82d 	bl	800016c <__adddf3>
 8005112:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005116:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800511a:	9611      	str	r6, [sp, #68]	; 0x44
 800511c:	2c00      	cmp	r4, #0
 800511e:	d15d      	bne.n	80051dc <_dtoa_r+0x4ec>
 8005120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005124:	2200      	movs	r2, #0
 8005126:	4b5c      	ldr	r3, [pc, #368]	; (8005298 <_dtoa_r+0x5a8>)
 8005128:	f7fb f81e 	bl	8000168 <__aeabi_dsub>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005134:	4633      	mov	r3, r6
 8005136:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005138:	f7fb fc5e 	bl	80009f8 <__aeabi_dcmpgt>
 800513c:	2800      	cmp	r0, #0
 800513e:	f040 8295 	bne.w	800566c <_dtoa_r+0x97c>
 8005142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005146:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005148:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800514c:	f7fb fc36 	bl	80009bc <__aeabi_dcmplt>
 8005150:	2800      	cmp	r0, #0
 8005152:	f040 8289 	bne.w	8005668 <_dtoa_r+0x978>
 8005156:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800515a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800515e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005160:	2b00      	cmp	r3, #0
 8005162:	f2c0 8151 	blt.w	8005408 <_dtoa_r+0x718>
 8005166:	f1bb 0f0e 	cmp.w	fp, #14
 800516a:	f300 814d 	bgt.w	8005408 <_dtoa_r+0x718>
 800516e:	4b45      	ldr	r3, [pc, #276]	; (8005284 <_dtoa_r+0x594>)
 8005170:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005174:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005178:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800517c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800517e:	2b00      	cmp	r3, #0
 8005180:	f280 80da 	bge.w	8005338 <_dtoa_r+0x648>
 8005184:	9b08      	ldr	r3, [sp, #32]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f300 80d6 	bgt.w	8005338 <_dtoa_r+0x648>
 800518c:	f040 826b 	bne.w	8005666 <_dtoa_r+0x976>
 8005190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005194:	2200      	movs	r2, #0
 8005196:	4b40      	ldr	r3, [pc, #256]	; (8005298 <_dtoa_r+0x5a8>)
 8005198:	f7fb f99e 	bl	80004d8 <__aeabi_dmul>
 800519c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051a0:	f7fb fc20 	bl	80009e4 <__aeabi_dcmpge>
 80051a4:	9c08      	ldr	r4, [sp, #32]
 80051a6:	4626      	mov	r6, r4
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f040 8241 	bne.w	8005630 <_dtoa_r+0x940>
 80051ae:	2331      	movs	r3, #49	; 0x31
 80051b0:	9f03      	ldr	r7, [sp, #12]
 80051b2:	f10b 0b01 	add.w	fp, fp, #1
 80051b6:	f807 3b01 	strb.w	r3, [r7], #1
 80051ba:	e23d      	b.n	8005638 <_dtoa_r+0x948>
 80051bc:	07e2      	lsls	r2, r4, #31
 80051be:	d505      	bpl.n	80051cc <_dtoa_r+0x4dc>
 80051c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051c4:	f7fb f988 	bl	80004d8 <__aeabi_dmul>
 80051c8:	2301      	movs	r3, #1
 80051ca:	3701      	adds	r7, #1
 80051cc:	1064      	asrs	r4, r4, #1
 80051ce:	3608      	adds	r6, #8
 80051d0:	e76d      	b.n	80050ae <_dtoa_r+0x3be>
 80051d2:	2702      	movs	r7, #2
 80051d4:	e770      	b.n	80050b8 <_dtoa_r+0x3c8>
 80051d6:	46d8      	mov	r8, fp
 80051d8:	9c08      	ldr	r4, [sp, #32]
 80051da:	e78f      	b.n	80050fc <_dtoa_r+0x40c>
 80051dc:	9903      	ldr	r1, [sp, #12]
 80051de:	4b29      	ldr	r3, [pc, #164]	; (8005284 <_dtoa_r+0x594>)
 80051e0:	4421      	add	r1, r4
 80051e2:	9112      	str	r1, [sp, #72]	; 0x48
 80051e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051ea:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80051ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051f2:	2900      	cmp	r1, #0
 80051f4:	d054      	beq.n	80052a0 <_dtoa_r+0x5b0>
 80051f6:	2000      	movs	r0, #0
 80051f8:	4928      	ldr	r1, [pc, #160]	; (800529c <_dtoa_r+0x5ac>)
 80051fa:	f7fb fa97 	bl	800072c <__aeabi_ddiv>
 80051fe:	463b      	mov	r3, r7
 8005200:	4632      	mov	r2, r6
 8005202:	f7fa ffb1 	bl	8000168 <__aeabi_dsub>
 8005206:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800520a:	9f03      	ldr	r7, [sp, #12]
 800520c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005210:	f7fb fc12 	bl	8000a38 <__aeabi_d2iz>
 8005214:	4604      	mov	r4, r0
 8005216:	f7fb f8f5 	bl	8000404 <__aeabi_i2d>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005222:	f7fa ffa1 	bl	8000168 <__aeabi_dsub>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	3430      	adds	r4, #48	; 0x30
 800522c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005230:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005234:	f807 4b01 	strb.w	r4, [r7], #1
 8005238:	f7fb fbc0 	bl	80009bc <__aeabi_dcmplt>
 800523c:	2800      	cmp	r0, #0
 800523e:	d173      	bne.n	8005328 <_dtoa_r+0x638>
 8005240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005244:	2000      	movs	r0, #0
 8005246:	4911      	ldr	r1, [pc, #68]	; (800528c <_dtoa_r+0x59c>)
 8005248:	f7fa ff8e 	bl	8000168 <__aeabi_dsub>
 800524c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005250:	f7fb fbb4 	bl	80009bc <__aeabi_dcmplt>
 8005254:	2800      	cmp	r0, #0
 8005256:	f040 80b6 	bne.w	80053c6 <_dtoa_r+0x6d6>
 800525a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800525c:	429f      	cmp	r7, r3
 800525e:	f43f af7a 	beq.w	8005156 <_dtoa_r+0x466>
 8005262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005266:	2200      	movs	r2, #0
 8005268:	4b09      	ldr	r3, [pc, #36]	; (8005290 <_dtoa_r+0x5a0>)
 800526a:	f7fb f935 	bl	80004d8 <__aeabi_dmul>
 800526e:	2200      	movs	r2, #0
 8005270:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <_dtoa_r+0x5a0>)
 800527a:	f7fb f92d 	bl	80004d8 <__aeabi_dmul>
 800527e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005282:	e7c3      	b.n	800520c <_dtoa_r+0x51c>
 8005284:	08007338 	.word	0x08007338
 8005288:	08007310 	.word	0x08007310
 800528c:	3ff00000 	.word	0x3ff00000
 8005290:	40240000 	.word	0x40240000
 8005294:	401c0000 	.word	0x401c0000
 8005298:	40140000 	.word	0x40140000
 800529c:	3fe00000 	.word	0x3fe00000
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb f918 	bl	80004d8 <__aeabi_dmul>
 80052a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052ae:	9c03      	ldr	r4, [sp, #12]
 80052b0:	9314      	str	r3, [sp, #80]	; 0x50
 80052b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052b6:	f7fb fbbf 	bl	8000a38 <__aeabi_d2iz>
 80052ba:	9015      	str	r0, [sp, #84]	; 0x54
 80052bc:	f7fb f8a2 	bl	8000404 <__aeabi_i2d>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052c8:	f7fa ff4e 	bl	8000168 <__aeabi_dsub>
 80052cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052ce:	4606      	mov	r6, r0
 80052d0:	3330      	adds	r3, #48	; 0x30
 80052d2:	f804 3b01 	strb.w	r3, [r4], #1
 80052d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052d8:	460f      	mov	r7, r1
 80052da:	429c      	cmp	r4, r3
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	d124      	bne.n	800532c <_dtoa_r+0x63c>
 80052e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052e6:	4baf      	ldr	r3, [pc, #700]	; (80055a4 <_dtoa_r+0x8b4>)
 80052e8:	f7fa ff40 	bl	800016c <__adddf3>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4630      	mov	r0, r6
 80052f2:	4639      	mov	r1, r7
 80052f4:	f7fb fb80 	bl	80009f8 <__aeabi_dcmpgt>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d163      	bne.n	80053c4 <_dtoa_r+0x6d4>
 80052fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005300:	2000      	movs	r0, #0
 8005302:	49a8      	ldr	r1, [pc, #672]	; (80055a4 <_dtoa_r+0x8b4>)
 8005304:	f7fa ff30 	bl	8000168 <__aeabi_dsub>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4630      	mov	r0, r6
 800530e:	4639      	mov	r1, r7
 8005310:	f7fb fb54 	bl	80009bc <__aeabi_dcmplt>
 8005314:	2800      	cmp	r0, #0
 8005316:	f43f af1e 	beq.w	8005156 <_dtoa_r+0x466>
 800531a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800531c:	1e7b      	subs	r3, r7, #1
 800531e:	9314      	str	r3, [sp, #80]	; 0x50
 8005320:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005324:	2b30      	cmp	r3, #48	; 0x30
 8005326:	d0f8      	beq.n	800531a <_dtoa_r+0x62a>
 8005328:	46c3      	mov	fp, r8
 800532a:	e03b      	b.n	80053a4 <_dtoa_r+0x6b4>
 800532c:	4b9e      	ldr	r3, [pc, #632]	; (80055a8 <_dtoa_r+0x8b8>)
 800532e:	f7fb f8d3 	bl	80004d8 <__aeabi_dmul>
 8005332:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005336:	e7bc      	b.n	80052b2 <_dtoa_r+0x5c2>
 8005338:	9f03      	ldr	r7, [sp, #12]
 800533a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800533e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005342:	4640      	mov	r0, r8
 8005344:	4649      	mov	r1, r9
 8005346:	f7fb f9f1 	bl	800072c <__aeabi_ddiv>
 800534a:	f7fb fb75 	bl	8000a38 <__aeabi_d2iz>
 800534e:	4604      	mov	r4, r0
 8005350:	f7fb f858 	bl	8000404 <__aeabi_i2d>
 8005354:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005358:	f7fb f8be 	bl	80004d8 <__aeabi_dmul>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4640      	mov	r0, r8
 8005362:	4649      	mov	r1, r9
 8005364:	f7fa ff00 	bl	8000168 <__aeabi_dsub>
 8005368:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800536c:	f807 6b01 	strb.w	r6, [r7], #1
 8005370:	9e03      	ldr	r6, [sp, #12]
 8005372:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005376:	1bbe      	subs	r6, r7, r6
 8005378:	45b4      	cmp	ip, r6
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	d136      	bne.n	80053ee <_dtoa_r+0x6fe>
 8005380:	f7fa fef4 	bl	800016c <__adddf3>
 8005384:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005388:	4680      	mov	r8, r0
 800538a:	4689      	mov	r9, r1
 800538c:	f7fb fb34 	bl	80009f8 <__aeabi_dcmpgt>
 8005390:	bb58      	cbnz	r0, 80053ea <_dtoa_r+0x6fa>
 8005392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005396:	4640      	mov	r0, r8
 8005398:	4649      	mov	r1, r9
 800539a:	f7fb fb05 	bl	80009a8 <__aeabi_dcmpeq>
 800539e:	b108      	cbz	r0, 80053a4 <_dtoa_r+0x6b4>
 80053a0:	07e3      	lsls	r3, r4, #31
 80053a2:	d422      	bmi.n	80053ea <_dtoa_r+0x6fa>
 80053a4:	4651      	mov	r1, sl
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 fbc2 	bl	8005b30 <_Bfree>
 80053ac:	2300      	movs	r3, #0
 80053ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053b0:	703b      	strb	r3, [r7, #0]
 80053b2:	f10b 0301 	add.w	r3, fp, #1
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f43f ace6 	beq.w	8004d8c <_dtoa_r+0x9c>
 80053c0:	601f      	str	r7, [r3, #0]
 80053c2:	e4e3      	b.n	8004d8c <_dtoa_r+0x9c>
 80053c4:	4627      	mov	r7, r4
 80053c6:	463b      	mov	r3, r7
 80053c8:	461f      	mov	r7, r3
 80053ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053ce:	2a39      	cmp	r2, #57	; 0x39
 80053d0:	d107      	bne.n	80053e2 <_dtoa_r+0x6f2>
 80053d2:	9a03      	ldr	r2, [sp, #12]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d1f7      	bne.n	80053c8 <_dtoa_r+0x6d8>
 80053d8:	2230      	movs	r2, #48	; 0x30
 80053da:	9903      	ldr	r1, [sp, #12]
 80053dc:	f108 0801 	add.w	r8, r8, #1
 80053e0:	700a      	strb	r2, [r1, #0]
 80053e2:	781a      	ldrb	r2, [r3, #0]
 80053e4:	3201      	adds	r2, #1
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	e79e      	b.n	8005328 <_dtoa_r+0x638>
 80053ea:	46d8      	mov	r8, fp
 80053ec:	e7eb      	b.n	80053c6 <_dtoa_r+0x6d6>
 80053ee:	2200      	movs	r2, #0
 80053f0:	4b6d      	ldr	r3, [pc, #436]	; (80055a8 <_dtoa_r+0x8b8>)
 80053f2:	f7fb f871 	bl	80004d8 <__aeabi_dmul>
 80053f6:	2200      	movs	r2, #0
 80053f8:	2300      	movs	r3, #0
 80053fa:	4680      	mov	r8, r0
 80053fc:	4689      	mov	r9, r1
 80053fe:	f7fb fad3 	bl	80009a8 <__aeabi_dcmpeq>
 8005402:	2800      	cmp	r0, #0
 8005404:	d09b      	beq.n	800533e <_dtoa_r+0x64e>
 8005406:	e7cd      	b.n	80053a4 <_dtoa_r+0x6b4>
 8005408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800540a:	2a00      	cmp	r2, #0
 800540c:	f000 80c4 	beq.w	8005598 <_dtoa_r+0x8a8>
 8005410:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005412:	2a01      	cmp	r2, #1
 8005414:	f300 80a8 	bgt.w	8005568 <_dtoa_r+0x878>
 8005418:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800541a:	2a00      	cmp	r2, #0
 800541c:	f000 80a0 	beq.w	8005560 <_dtoa_r+0x870>
 8005420:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005424:	464f      	mov	r7, r9
 8005426:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800542a:	2101      	movs	r1, #1
 800542c:	441a      	add	r2, r3
 800542e:	4628      	mov	r0, r5
 8005430:	4499      	add	r9, r3
 8005432:	9209      	str	r2, [sp, #36]	; 0x24
 8005434:	f000 fc32 	bl	8005c9c <__i2b>
 8005438:	4606      	mov	r6, r0
 800543a:	b15f      	cbz	r7, 8005454 <_dtoa_r+0x764>
 800543c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	dd08      	ble.n	8005454 <_dtoa_r+0x764>
 8005442:	42bb      	cmp	r3, r7
 8005444:	bfa8      	it	ge
 8005446:	463b      	movge	r3, r7
 8005448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800544a:	eba9 0903 	sub.w	r9, r9, r3
 800544e:	1aff      	subs	r7, r7, r3
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	9309      	str	r3, [sp, #36]	; 0x24
 8005454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005456:	b1f3      	cbz	r3, 8005496 <_dtoa_r+0x7a6>
 8005458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80a0 	beq.w	80055a0 <_dtoa_r+0x8b0>
 8005460:	2c00      	cmp	r4, #0
 8005462:	dd10      	ble.n	8005486 <_dtoa_r+0x796>
 8005464:	4631      	mov	r1, r6
 8005466:	4622      	mov	r2, r4
 8005468:	4628      	mov	r0, r5
 800546a:	f000 fcd5 	bl	8005e18 <__pow5mult>
 800546e:	4652      	mov	r2, sl
 8005470:	4601      	mov	r1, r0
 8005472:	4606      	mov	r6, r0
 8005474:	4628      	mov	r0, r5
 8005476:	f000 fc27 	bl	8005cc8 <__multiply>
 800547a:	4680      	mov	r8, r0
 800547c:	4651      	mov	r1, sl
 800547e:	4628      	mov	r0, r5
 8005480:	f000 fb56 	bl	8005b30 <_Bfree>
 8005484:	46c2      	mov	sl, r8
 8005486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005488:	1b1a      	subs	r2, r3, r4
 800548a:	d004      	beq.n	8005496 <_dtoa_r+0x7a6>
 800548c:	4651      	mov	r1, sl
 800548e:	4628      	mov	r0, r5
 8005490:	f000 fcc2 	bl	8005e18 <__pow5mult>
 8005494:	4682      	mov	sl, r0
 8005496:	2101      	movs	r1, #1
 8005498:	4628      	mov	r0, r5
 800549a:	f000 fbff 	bl	8005c9c <__i2b>
 800549e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054a0:	4604      	mov	r4, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f340 8082 	ble.w	80055ac <_dtoa_r+0x8bc>
 80054a8:	461a      	mov	r2, r3
 80054aa:	4601      	mov	r1, r0
 80054ac:	4628      	mov	r0, r5
 80054ae:	f000 fcb3 	bl	8005e18 <__pow5mult>
 80054b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054b4:	4604      	mov	r4, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	dd7b      	ble.n	80055b2 <_dtoa_r+0x8c2>
 80054ba:	f04f 0800 	mov.w	r8, #0
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80054c4:	6918      	ldr	r0, [r3, #16]
 80054c6:	f000 fb9b 	bl	8005c00 <__hi0bits>
 80054ca:	f1c0 0020 	rsb	r0, r0, #32
 80054ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d0:	4418      	add	r0, r3
 80054d2:	f010 001f 	ands.w	r0, r0, #31
 80054d6:	f000 8092 	beq.w	80055fe <_dtoa_r+0x90e>
 80054da:	f1c0 0320 	rsb	r3, r0, #32
 80054de:	2b04      	cmp	r3, #4
 80054e0:	f340 8085 	ble.w	80055ee <_dtoa_r+0x8fe>
 80054e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e6:	f1c0 001c 	rsb	r0, r0, #28
 80054ea:	4403      	add	r3, r0
 80054ec:	4481      	add	r9, r0
 80054ee:	4407      	add	r7, r0
 80054f0:	9309      	str	r3, [sp, #36]	; 0x24
 80054f2:	f1b9 0f00 	cmp.w	r9, #0
 80054f6:	dd05      	ble.n	8005504 <_dtoa_r+0x814>
 80054f8:	4651      	mov	r1, sl
 80054fa:	464a      	mov	r2, r9
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 fce5 	bl	8005ecc <__lshift>
 8005502:	4682      	mov	sl, r0
 8005504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005506:	2b00      	cmp	r3, #0
 8005508:	dd05      	ble.n	8005516 <_dtoa_r+0x826>
 800550a:	4621      	mov	r1, r4
 800550c:	461a      	mov	r2, r3
 800550e:	4628      	mov	r0, r5
 8005510:	f000 fcdc 	bl	8005ecc <__lshift>
 8005514:	4604      	mov	r4, r0
 8005516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d072      	beq.n	8005602 <_dtoa_r+0x912>
 800551c:	4621      	mov	r1, r4
 800551e:	4650      	mov	r0, sl
 8005520:	f000 fd40 	bl	8005fa4 <__mcmp>
 8005524:	2800      	cmp	r0, #0
 8005526:	da6c      	bge.n	8005602 <_dtoa_r+0x912>
 8005528:	2300      	movs	r3, #0
 800552a:	4651      	mov	r1, sl
 800552c:	220a      	movs	r2, #10
 800552e:	4628      	mov	r0, r5
 8005530:	f000 fb20 	bl	8005b74 <__multadd>
 8005534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005536:	4682      	mov	sl, r0
 8005538:	f10b 3bff 	add.w	fp, fp, #4294967295
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 81ac 	beq.w	800589a <_dtoa_r+0xbaa>
 8005542:	2300      	movs	r3, #0
 8005544:	4631      	mov	r1, r6
 8005546:	220a      	movs	r2, #10
 8005548:	4628      	mov	r0, r5
 800554a:	f000 fb13 	bl	8005b74 <__multadd>
 800554e:	9b06      	ldr	r3, [sp, #24]
 8005550:	4606      	mov	r6, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	f300 8093 	bgt.w	800567e <_dtoa_r+0x98e>
 8005558:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800555a:	2b02      	cmp	r3, #2
 800555c:	dc59      	bgt.n	8005612 <_dtoa_r+0x922>
 800555e:	e08e      	b.n	800567e <_dtoa_r+0x98e>
 8005560:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005562:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005566:	e75d      	b.n	8005424 <_dtoa_r+0x734>
 8005568:	9b08      	ldr	r3, [sp, #32]
 800556a:	1e5c      	subs	r4, r3, #1
 800556c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800556e:	42a3      	cmp	r3, r4
 8005570:	bfbf      	itttt	lt
 8005572:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005574:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005576:	1ae3      	sublt	r3, r4, r3
 8005578:	18d2      	addlt	r2, r2, r3
 800557a:	bfa8      	it	ge
 800557c:	1b1c      	subge	r4, r3, r4
 800557e:	9b08      	ldr	r3, [sp, #32]
 8005580:	bfbe      	ittt	lt
 8005582:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005584:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005586:	2400      	movlt	r4, #0
 8005588:	2b00      	cmp	r3, #0
 800558a:	bfb5      	itete	lt
 800558c:	eba9 0703 	sublt.w	r7, r9, r3
 8005590:	464f      	movge	r7, r9
 8005592:	2300      	movlt	r3, #0
 8005594:	9b08      	ldrge	r3, [sp, #32]
 8005596:	e747      	b.n	8005428 <_dtoa_r+0x738>
 8005598:	464f      	mov	r7, r9
 800559a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800559c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800559e:	e74c      	b.n	800543a <_dtoa_r+0x74a>
 80055a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055a2:	e773      	b.n	800548c <_dtoa_r+0x79c>
 80055a4:	3fe00000 	.word	0x3fe00000
 80055a8:	40240000 	.word	0x40240000
 80055ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	dc18      	bgt.n	80055e4 <_dtoa_r+0x8f4>
 80055b2:	9b04      	ldr	r3, [sp, #16]
 80055b4:	b9b3      	cbnz	r3, 80055e4 <_dtoa_r+0x8f4>
 80055b6:	9b05      	ldr	r3, [sp, #20]
 80055b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055bc:	b993      	cbnz	r3, 80055e4 <_dtoa_r+0x8f4>
 80055be:	9b05      	ldr	r3, [sp, #20]
 80055c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055c4:	0d1b      	lsrs	r3, r3, #20
 80055c6:	051b      	lsls	r3, r3, #20
 80055c8:	b17b      	cbz	r3, 80055ea <_dtoa_r+0x8fa>
 80055ca:	f04f 0801 	mov.w	r8, #1
 80055ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d0:	f109 0901 	add.w	r9, r9, #1
 80055d4:	3301      	adds	r3, #1
 80055d6:	9309      	str	r3, [sp, #36]	; 0x24
 80055d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f47f af6f 	bne.w	80054be <_dtoa_r+0x7ce>
 80055e0:	2001      	movs	r0, #1
 80055e2:	e774      	b.n	80054ce <_dtoa_r+0x7de>
 80055e4:	f04f 0800 	mov.w	r8, #0
 80055e8:	e7f6      	b.n	80055d8 <_dtoa_r+0x8e8>
 80055ea:	4698      	mov	r8, r3
 80055ec:	e7f4      	b.n	80055d8 <_dtoa_r+0x8e8>
 80055ee:	d080      	beq.n	80054f2 <_dtoa_r+0x802>
 80055f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055f2:	331c      	adds	r3, #28
 80055f4:	441a      	add	r2, r3
 80055f6:	4499      	add	r9, r3
 80055f8:	441f      	add	r7, r3
 80055fa:	9209      	str	r2, [sp, #36]	; 0x24
 80055fc:	e779      	b.n	80054f2 <_dtoa_r+0x802>
 80055fe:	4603      	mov	r3, r0
 8005600:	e7f6      	b.n	80055f0 <_dtoa_r+0x900>
 8005602:	9b08      	ldr	r3, [sp, #32]
 8005604:	2b00      	cmp	r3, #0
 8005606:	dc34      	bgt.n	8005672 <_dtoa_r+0x982>
 8005608:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800560a:	2b02      	cmp	r3, #2
 800560c:	dd31      	ble.n	8005672 <_dtoa_r+0x982>
 800560e:	9b08      	ldr	r3, [sp, #32]
 8005610:	9306      	str	r3, [sp, #24]
 8005612:	9b06      	ldr	r3, [sp, #24]
 8005614:	b963      	cbnz	r3, 8005630 <_dtoa_r+0x940>
 8005616:	4621      	mov	r1, r4
 8005618:	2205      	movs	r2, #5
 800561a:	4628      	mov	r0, r5
 800561c:	f000 faaa 	bl	8005b74 <__multadd>
 8005620:	4601      	mov	r1, r0
 8005622:	4604      	mov	r4, r0
 8005624:	4650      	mov	r0, sl
 8005626:	f000 fcbd 	bl	8005fa4 <__mcmp>
 800562a:	2800      	cmp	r0, #0
 800562c:	f73f adbf 	bgt.w	80051ae <_dtoa_r+0x4be>
 8005630:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005632:	9f03      	ldr	r7, [sp, #12]
 8005634:	ea6f 0b03 	mvn.w	fp, r3
 8005638:	f04f 0800 	mov.w	r8, #0
 800563c:	4621      	mov	r1, r4
 800563e:	4628      	mov	r0, r5
 8005640:	f000 fa76 	bl	8005b30 <_Bfree>
 8005644:	2e00      	cmp	r6, #0
 8005646:	f43f aead 	beq.w	80053a4 <_dtoa_r+0x6b4>
 800564a:	f1b8 0f00 	cmp.w	r8, #0
 800564e:	d005      	beq.n	800565c <_dtoa_r+0x96c>
 8005650:	45b0      	cmp	r8, r6
 8005652:	d003      	beq.n	800565c <_dtoa_r+0x96c>
 8005654:	4641      	mov	r1, r8
 8005656:	4628      	mov	r0, r5
 8005658:	f000 fa6a 	bl	8005b30 <_Bfree>
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	f000 fa66 	bl	8005b30 <_Bfree>
 8005664:	e69e      	b.n	80053a4 <_dtoa_r+0x6b4>
 8005666:	2400      	movs	r4, #0
 8005668:	4626      	mov	r6, r4
 800566a:	e7e1      	b.n	8005630 <_dtoa_r+0x940>
 800566c:	46c3      	mov	fp, r8
 800566e:	4626      	mov	r6, r4
 8005670:	e59d      	b.n	80051ae <_dtoa_r+0x4be>
 8005672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80c8 	beq.w	800580a <_dtoa_r+0xb1a>
 800567a:	9b08      	ldr	r3, [sp, #32]
 800567c:	9306      	str	r3, [sp, #24]
 800567e:	2f00      	cmp	r7, #0
 8005680:	dd05      	ble.n	800568e <_dtoa_r+0x99e>
 8005682:	4631      	mov	r1, r6
 8005684:	463a      	mov	r2, r7
 8005686:	4628      	mov	r0, r5
 8005688:	f000 fc20 	bl	8005ecc <__lshift>
 800568c:	4606      	mov	r6, r0
 800568e:	f1b8 0f00 	cmp.w	r8, #0
 8005692:	d05b      	beq.n	800574c <_dtoa_r+0xa5c>
 8005694:	4628      	mov	r0, r5
 8005696:	6871      	ldr	r1, [r6, #4]
 8005698:	f000 fa0a 	bl	8005ab0 <_Balloc>
 800569c:	4607      	mov	r7, r0
 800569e:	b928      	cbnz	r0, 80056ac <_dtoa_r+0x9bc>
 80056a0:	4602      	mov	r2, r0
 80056a2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80056a6:	4b81      	ldr	r3, [pc, #516]	; (80058ac <_dtoa_r+0xbbc>)
 80056a8:	f7ff bb36 	b.w	8004d18 <_dtoa_r+0x28>
 80056ac:	6932      	ldr	r2, [r6, #16]
 80056ae:	f106 010c 	add.w	r1, r6, #12
 80056b2:	3202      	adds	r2, #2
 80056b4:	0092      	lsls	r2, r2, #2
 80056b6:	300c      	adds	r0, #12
 80056b8:	f000 ff9e 	bl	80065f8 <memcpy>
 80056bc:	2201      	movs	r2, #1
 80056be:	4639      	mov	r1, r7
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 fc03 	bl	8005ecc <__lshift>
 80056c6:	46b0      	mov	r8, r6
 80056c8:	4606      	mov	r6, r0
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	9a03      	ldr	r2, [sp, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	9308      	str	r3, [sp, #32]
 80056d2:	9b06      	ldr	r3, [sp, #24]
 80056d4:	4413      	add	r3, r2
 80056d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	930a      	str	r3, [sp, #40]	; 0x28
 80056e0:	9b08      	ldr	r3, [sp, #32]
 80056e2:	4621      	mov	r1, r4
 80056e4:	3b01      	subs	r3, #1
 80056e6:	4650      	mov	r0, sl
 80056e8:	9304      	str	r3, [sp, #16]
 80056ea:	f7ff fa75 	bl	8004bd8 <quorem>
 80056ee:	4641      	mov	r1, r8
 80056f0:	9006      	str	r0, [sp, #24]
 80056f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80056f6:	4650      	mov	r0, sl
 80056f8:	f000 fc54 	bl	8005fa4 <__mcmp>
 80056fc:	4632      	mov	r2, r6
 80056fe:	9009      	str	r0, [sp, #36]	; 0x24
 8005700:	4621      	mov	r1, r4
 8005702:	4628      	mov	r0, r5
 8005704:	f000 fc6a 	bl	8005fdc <__mdiff>
 8005708:	68c2      	ldr	r2, [r0, #12]
 800570a:	4607      	mov	r7, r0
 800570c:	bb02      	cbnz	r2, 8005750 <_dtoa_r+0xa60>
 800570e:	4601      	mov	r1, r0
 8005710:	4650      	mov	r0, sl
 8005712:	f000 fc47 	bl	8005fa4 <__mcmp>
 8005716:	4602      	mov	r2, r0
 8005718:	4639      	mov	r1, r7
 800571a:	4628      	mov	r0, r5
 800571c:	920c      	str	r2, [sp, #48]	; 0x30
 800571e:	f000 fa07 	bl	8005b30 <_Bfree>
 8005722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005726:	9f08      	ldr	r7, [sp, #32]
 8005728:	ea43 0102 	orr.w	r1, r3, r2
 800572c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800572e:	4319      	orrs	r1, r3
 8005730:	d110      	bne.n	8005754 <_dtoa_r+0xa64>
 8005732:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005736:	d029      	beq.n	800578c <_dtoa_r+0xa9c>
 8005738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	dd02      	ble.n	8005744 <_dtoa_r+0xa54>
 800573e:	9b06      	ldr	r3, [sp, #24]
 8005740:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005744:	9b04      	ldr	r3, [sp, #16]
 8005746:	f883 9000 	strb.w	r9, [r3]
 800574a:	e777      	b.n	800563c <_dtoa_r+0x94c>
 800574c:	4630      	mov	r0, r6
 800574e:	e7ba      	b.n	80056c6 <_dtoa_r+0x9d6>
 8005750:	2201      	movs	r2, #1
 8005752:	e7e1      	b.n	8005718 <_dtoa_r+0xa28>
 8005754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005756:	2b00      	cmp	r3, #0
 8005758:	db04      	blt.n	8005764 <_dtoa_r+0xa74>
 800575a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800575c:	430b      	orrs	r3, r1
 800575e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005760:	430b      	orrs	r3, r1
 8005762:	d120      	bne.n	80057a6 <_dtoa_r+0xab6>
 8005764:	2a00      	cmp	r2, #0
 8005766:	dded      	ble.n	8005744 <_dtoa_r+0xa54>
 8005768:	4651      	mov	r1, sl
 800576a:	2201      	movs	r2, #1
 800576c:	4628      	mov	r0, r5
 800576e:	f000 fbad 	bl	8005ecc <__lshift>
 8005772:	4621      	mov	r1, r4
 8005774:	4682      	mov	sl, r0
 8005776:	f000 fc15 	bl	8005fa4 <__mcmp>
 800577a:	2800      	cmp	r0, #0
 800577c:	dc03      	bgt.n	8005786 <_dtoa_r+0xa96>
 800577e:	d1e1      	bne.n	8005744 <_dtoa_r+0xa54>
 8005780:	f019 0f01 	tst.w	r9, #1
 8005784:	d0de      	beq.n	8005744 <_dtoa_r+0xa54>
 8005786:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800578a:	d1d8      	bne.n	800573e <_dtoa_r+0xa4e>
 800578c:	2339      	movs	r3, #57	; 0x39
 800578e:	9a04      	ldr	r2, [sp, #16]
 8005790:	7013      	strb	r3, [r2, #0]
 8005792:	463b      	mov	r3, r7
 8005794:	461f      	mov	r7, r3
 8005796:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800579a:	3b01      	subs	r3, #1
 800579c:	2a39      	cmp	r2, #57	; 0x39
 800579e:	d06b      	beq.n	8005878 <_dtoa_r+0xb88>
 80057a0:	3201      	adds	r2, #1
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	e74a      	b.n	800563c <_dtoa_r+0x94c>
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	dd07      	ble.n	80057ba <_dtoa_r+0xaca>
 80057aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80057ae:	d0ed      	beq.n	800578c <_dtoa_r+0xa9c>
 80057b0:	9a04      	ldr	r2, [sp, #16]
 80057b2:	f109 0301 	add.w	r3, r9, #1
 80057b6:	7013      	strb	r3, [r2, #0]
 80057b8:	e740      	b.n	800563c <_dtoa_r+0x94c>
 80057ba:	9b08      	ldr	r3, [sp, #32]
 80057bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057be:	f803 9c01 	strb.w	r9, [r3, #-1]
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d042      	beq.n	800584c <_dtoa_r+0xb5c>
 80057c6:	4651      	mov	r1, sl
 80057c8:	2300      	movs	r3, #0
 80057ca:	220a      	movs	r2, #10
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 f9d1 	bl	8005b74 <__multadd>
 80057d2:	45b0      	cmp	r8, r6
 80057d4:	4682      	mov	sl, r0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	f04f 020a 	mov.w	r2, #10
 80057de:	4641      	mov	r1, r8
 80057e0:	4628      	mov	r0, r5
 80057e2:	d107      	bne.n	80057f4 <_dtoa_r+0xb04>
 80057e4:	f000 f9c6 	bl	8005b74 <__multadd>
 80057e8:	4680      	mov	r8, r0
 80057ea:	4606      	mov	r6, r0
 80057ec:	9b08      	ldr	r3, [sp, #32]
 80057ee:	3301      	adds	r3, #1
 80057f0:	9308      	str	r3, [sp, #32]
 80057f2:	e775      	b.n	80056e0 <_dtoa_r+0x9f0>
 80057f4:	f000 f9be 	bl	8005b74 <__multadd>
 80057f8:	4631      	mov	r1, r6
 80057fa:	4680      	mov	r8, r0
 80057fc:	2300      	movs	r3, #0
 80057fe:	220a      	movs	r2, #10
 8005800:	4628      	mov	r0, r5
 8005802:	f000 f9b7 	bl	8005b74 <__multadd>
 8005806:	4606      	mov	r6, r0
 8005808:	e7f0      	b.n	80057ec <_dtoa_r+0xafc>
 800580a:	9b08      	ldr	r3, [sp, #32]
 800580c:	9306      	str	r3, [sp, #24]
 800580e:	9f03      	ldr	r7, [sp, #12]
 8005810:	4621      	mov	r1, r4
 8005812:	4650      	mov	r0, sl
 8005814:	f7ff f9e0 	bl	8004bd8 <quorem>
 8005818:	9b03      	ldr	r3, [sp, #12]
 800581a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800581e:	f807 9b01 	strb.w	r9, [r7], #1
 8005822:	1afa      	subs	r2, r7, r3
 8005824:	9b06      	ldr	r3, [sp, #24]
 8005826:	4293      	cmp	r3, r2
 8005828:	dd07      	ble.n	800583a <_dtoa_r+0xb4a>
 800582a:	4651      	mov	r1, sl
 800582c:	2300      	movs	r3, #0
 800582e:	220a      	movs	r2, #10
 8005830:	4628      	mov	r0, r5
 8005832:	f000 f99f 	bl	8005b74 <__multadd>
 8005836:	4682      	mov	sl, r0
 8005838:	e7ea      	b.n	8005810 <_dtoa_r+0xb20>
 800583a:	9b06      	ldr	r3, [sp, #24]
 800583c:	f04f 0800 	mov.w	r8, #0
 8005840:	2b00      	cmp	r3, #0
 8005842:	bfcc      	ite	gt
 8005844:	461f      	movgt	r7, r3
 8005846:	2701      	movle	r7, #1
 8005848:	9b03      	ldr	r3, [sp, #12]
 800584a:	441f      	add	r7, r3
 800584c:	4651      	mov	r1, sl
 800584e:	2201      	movs	r2, #1
 8005850:	4628      	mov	r0, r5
 8005852:	f000 fb3b 	bl	8005ecc <__lshift>
 8005856:	4621      	mov	r1, r4
 8005858:	4682      	mov	sl, r0
 800585a:	f000 fba3 	bl	8005fa4 <__mcmp>
 800585e:	2800      	cmp	r0, #0
 8005860:	dc97      	bgt.n	8005792 <_dtoa_r+0xaa2>
 8005862:	d102      	bne.n	800586a <_dtoa_r+0xb7a>
 8005864:	f019 0f01 	tst.w	r9, #1
 8005868:	d193      	bne.n	8005792 <_dtoa_r+0xaa2>
 800586a:	463b      	mov	r3, r7
 800586c:	461f      	mov	r7, r3
 800586e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005872:	2a30      	cmp	r2, #48	; 0x30
 8005874:	d0fa      	beq.n	800586c <_dtoa_r+0xb7c>
 8005876:	e6e1      	b.n	800563c <_dtoa_r+0x94c>
 8005878:	9a03      	ldr	r2, [sp, #12]
 800587a:	429a      	cmp	r2, r3
 800587c:	d18a      	bne.n	8005794 <_dtoa_r+0xaa4>
 800587e:	2331      	movs	r3, #49	; 0x31
 8005880:	f10b 0b01 	add.w	fp, fp, #1
 8005884:	e797      	b.n	80057b6 <_dtoa_r+0xac6>
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <_dtoa_r+0xbc0>)
 8005888:	f7ff ba9f 	b.w	8004dca <_dtoa_r+0xda>
 800588c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800588e:	2b00      	cmp	r3, #0
 8005890:	f47f aa77 	bne.w	8004d82 <_dtoa_r+0x92>
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <_dtoa_r+0xbc4>)
 8005896:	f7ff ba98 	b.w	8004dca <_dtoa_r+0xda>
 800589a:	9b06      	ldr	r3, [sp, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	dcb6      	bgt.n	800580e <_dtoa_r+0xb1e>
 80058a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	f73f aeb5 	bgt.w	8005612 <_dtoa_r+0x922>
 80058a8:	e7b1      	b.n	800580e <_dtoa_r+0xb1e>
 80058aa:	bf00      	nop
 80058ac:	080072a6 	.word	0x080072a6
 80058b0:	08007206 	.word	0x08007206
 80058b4:	0800722a 	.word	0x0800722a

080058b8 <_free_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4605      	mov	r5, r0
 80058bc:	2900      	cmp	r1, #0
 80058be:	d040      	beq.n	8005942 <_free_r+0x8a>
 80058c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c4:	1f0c      	subs	r4, r1, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bfb8      	it	lt
 80058ca:	18e4      	addlt	r4, r4, r3
 80058cc:	f000 f8e4 	bl	8005a98 <__malloc_lock>
 80058d0:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <_free_r+0x8c>)
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	b933      	cbnz	r3, 80058e4 <_free_r+0x2c>
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	6014      	str	r4, [r2, #0]
 80058da:	4628      	mov	r0, r5
 80058dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058e0:	f000 b8e0 	b.w	8005aa4 <__malloc_unlock>
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d908      	bls.n	80058fa <_free_r+0x42>
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	1821      	adds	r1, r4, r0
 80058ec:	428b      	cmp	r3, r1
 80058ee:	bf01      	itttt	eq
 80058f0:	6819      	ldreq	r1, [r3, #0]
 80058f2:	685b      	ldreq	r3, [r3, #4]
 80058f4:	1809      	addeq	r1, r1, r0
 80058f6:	6021      	streq	r1, [r4, #0]
 80058f8:	e7ed      	b.n	80058d6 <_free_r+0x1e>
 80058fa:	461a      	mov	r2, r3
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	b10b      	cbz	r3, 8005904 <_free_r+0x4c>
 8005900:	42a3      	cmp	r3, r4
 8005902:	d9fa      	bls.n	80058fa <_free_r+0x42>
 8005904:	6811      	ldr	r1, [r2, #0]
 8005906:	1850      	adds	r0, r2, r1
 8005908:	42a0      	cmp	r0, r4
 800590a:	d10b      	bne.n	8005924 <_free_r+0x6c>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	4401      	add	r1, r0
 8005910:	1850      	adds	r0, r2, r1
 8005912:	4283      	cmp	r3, r0
 8005914:	6011      	str	r1, [r2, #0]
 8005916:	d1e0      	bne.n	80058da <_free_r+0x22>
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4408      	add	r0, r1
 800591e:	6010      	str	r0, [r2, #0]
 8005920:	6053      	str	r3, [r2, #4]
 8005922:	e7da      	b.n	80058da <_free_r+0x22>
 8005924:	d902      	bls.n	800592c <_free_r+0x74>
 8005926:	230c      	movs	r3, #12
 8005928:	602b      	str	r3, [r5, #0]
 800592a:	e7d6      	b.n	80058da <_free_r+0x22>
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	1821      	adds	r1, r4, r0
 8005930:	428b      	cmp	r3, r1
 8005932:	bf01      	itttt	eq
 8005934:	6819      	ldreq	r1, [r3, #0]
 8005936:	685b      	ldreq	r3, [r3, #4]
 8005938:	1809      	addeq	r1, r1, r0
 800593a:	6021      	streq	r1, [r4, #0]
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	6054      	str	r4, [r2, #4]
 8005940:	e7cb      	b.n	80058da <_free_r+0x22>
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	20000408 	.word	0x20000408

08005948 <malloc>:
 8005948:	4b02      	ldr	r3, [pc, #8]	; (8005954 <malloc+0xc>)
 800594a:	4601      	mov	r1, r0
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	f000 b823 	b.w	8005998 <_malloc_r>
 8005952:	bf00      	nop
 8005954:	20000064 	.word	0x20000064

08005958 <sbrk_aligned>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4e0e      	ldr	r6, [pc, #56]	; (8005994 <sbrk_aligned+0x3c>)
 800595c:	460c      	mov	r4, r1
 800595e:	6831      	ldr	r1, [r6, #0]
 8005960:	4605      	mov	r5, r0
 8005962:	b911      	cbnz	r1, 800596a <sbrk_aligned+0x12>
 8005964:	f000 fe38 	bl	80065d8 <_sbrk_r>
 8005968:	6030      	str	r0, [r6, #0]
 800596a:	4621      	mov	r1, r4
 800596c:	4628      	mov	r0, r5
 800596e:	f000 fe33 	bl	80065d8 <_sbrk_r>
 8005972:	1c43      	adds	r3, r0, #1
 8005974:	d00a      	beq.n	800598c <sbrk_aligned+0x34>
 8005976:	1cc4      	adds	r4, r0, #3
 8005978:	f024 0403 	bic.w	r4, r4, #3
 800597c:	42a0      	cmp	r0, r4
 800597e:	d007      	beq.n	8005990 <sbrk_aligned+0x38>
 8005980:	1a21      	subs	r1, r4, r0
 8005982:	4628      	mov	r0, r5
 8005984:	f000 fe28 	bl	80065d8 <_sbrk_r>
 8005988:	3001      	adds	r0, #1
 800598a:	d101      	bne.n	8005990 <sbrk_aligned+0x38>
 800598c:	f04f 34ff 	mov.w	r4, #4294967295
 8005990:	4620      	mov	r0, r4
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	2000040c 	.word	0x2000040c

08005998 <_malloc_r>:
 8005998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800599c:	1ccd      	adds	r5, r1, #3
 800599e:	f025 0503 	bic.w	r5, r5, #3
 80059a2:	3508      	adds	r5, #8
 80059a4:	2d0c      	cmp	r5, #12
 80059a6:	bf38      	it	cc
 80059a8:	250c      	movcc	r5, #12
 80059aa:	2d00      	cmp	r5, #0
 80059ac:	4607      	mov	r7, r0
 80059ae:	db01      	blt.n	80059b4 <_malloc_r+0x1c>
 80059b0:	42a9      	cmp	r1, r5
 80059b2:	d905      	bls.n	80059c0 <_malloc_r+0x28>
 80059b4:	230c      	movs	r3, #12
 80059b6:	2600      	movs	r6, #0
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	4630      	mov	r0, r6
 80059bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a94 <_malloc_r+0xfc>
 80059c4:	f000 f868 	bl	8005a98 <__malloc_lock>
 80059c8:	f8d8 3000 	ldr.w	r3, [r8]
 80059cc:	461c      	mov	r4, r3
 80059ce:	bb5c      	cbnz	r4, 8005a28 <_malloc_r+0x90>
 80059d0:	4629      	mov	r1, r5
 80059d2:	4638      	mov	r0, r7
 80059d4:	f7ff ffc0 	bl	8005958 <sbrk_aligned>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	4604      	mov	r4, r0
 80059dc:	d155      	bne.n	8005a8a <_malloc_r+0xf2>
 80059de:	f8d8 4000 	ldr.w	r4, [r8]
 80059e2:	4626      	mov	r6, r4
 80059e4:	2e00      	cmp	r6, #0
 80059e6:	d145      	bne.n	8005a74 <_malloc_r+0xdc>
 80059e8:	2c00      	cmp	r4, #0
 80059ea:	d048      	beq.n	8005a7e <_malloc_r+0xe6>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	4631      	mov	r1, r6
 80059f0:	4638      	mov	r0, r7
 80059f2:	eb04 0903 	add.w	r9, r4, r3
 80059f6:	f000 fdef 	bl	80065d8 <_sbrk_r>
 80059fa:	4581      	cmp	r9, r0
 80059fc:	d13f      	bne.n	8005a7e <_malloc_r+0xe6>
 80059fe:	6821      	ldr	r1, [r4, #0]
 8005a00:	4638      	mov	r0, r7
 8005a02:	1a6d      	subs	r5, r5, r1
 8005a04:	4629      	mov	r1, r5
 8005a06:	f7ff ffa7 	bl	8005958 <sbrk_aligned>
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d037      	beq.n	8005a7e <_malloc_r+0xe6>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	442b      	add	r3, r5
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	f8d8 3000 	ldr.w	r3, [r8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d038      	beq.n	8005a8e <_malloc_r+0xf6>
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	42a2      	cmp	r2, r4
 8005a20:	d12b      	bne.n	8005a7a <_malloc_r+0xe2>
 8005a22:	2200      	movs	r2, #0
 8005a24:	605a      	str	r2, [r3, #4]
 8005a26:	e00f      	b.n	8005a48 <_malloc_r+0xb0>
 8005a28:	6822      	ldr	r2, [r4, #0]
 8005a2a:	1b52      	subs	r2, r2, r5
 8005a2c:	d41f      	bmi.n	8005a6e <_malloc_r+0xd6>
 8005a2e:	2a0b      	cmp	r2, #11
 8005a30:	d917      	bls.n	8005a62 <_malloc_r+0xca>
 8005a32:	1961      	adds	r1, r4, r5
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	6025      	str	r5, [r4, #0]
 8005a38:	bf18      	it	ne
 8005a3a:	6059      	strne	r1, [r3, #4]
 8005a3c:	6863      	ldr	r3, [r4, #4]
 8005a3e:	bf08      	it	eq
 8005a40:	f8c8 1000 	streq.w	r1, [r8]
 8005a44:	5162      	str	r2, [r4, r5]
 8005a46:	604b      	str	r3, [r1, #4]
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f104 060b 	add.w	r6, r4, #11
 8005a4e:	f000 f829 	bl	8005aa4 <__malloc_unlock>
 8005a52:	f026 0607 	bic.w	r6, r6, #7
 8005a56:	1d23      	adds	r3, r4, #4
 8005a58:	1af2      	subs	r2, r6, r3
 8005a5a:	d0ae      	beq.n	80059ba <_malloc_r+0x22>
 8005a5c:	1b9b      	subs	r3, r3, r6
 8005a5e:	50a3      	str	r3, [r4, r2]
 8005a60:	e7ab      	b.n	80059ba <_malloc_r+0x22>
 8005a62:	42a3      	cmp	r3, r4
 8005a64:	6862      	ldr	r2, [r4, #4]
 8005a66:	d1dd      	bne.n	8005a24 <_malloc_r+0x8c>
 8005a68:	f8c8 2000 	str.w	r2, [r8]
 8005a6c:	e7ec      	b.n	8005a48 <_malloc_r+0xb0>
 8005a6e:	4623      	mov	r3, r4
 8005a70:	6864      	ldr	r4, [r4, #4]
 8005a72:	e7ac      	b.n	80059ce <_malloc_r+0x36>
 8005a74:	4634      	mov	r4, r6
 8005a76:	6876      	ldr	r6, [r6, #4]
 8005a78:	e7b4      	b.n	80059e4 <_malloc_r+0x4c>
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	e7cc      	b.n	8005a18 <_malloc_r+0x80>
 8005a7e:	230c      	movs	r3, #12
 8005a80:	4638      	mov	r0, r7
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	f000 f80e 	bl	8005aa4 <__malloc_unlock>
 8005a88:	e797      	b.n	80059ba <_malloc_r+0x22>
 8005a8a:	6025      	str	r5, [r4, #0]
 8005a8c:	e7dc      	b.n	8005a48 <_malloc_r+0xb0>
 8005a8e:	605b      	str	r3, [r3, #4]
 8005a90:	deff      	udf	#255	; 0xff
 8005a92:	bf00      	nop
 8005a94:	20000408 	.word	0x20000408

08005a98 <__malloc_lock>:
 8005a98:	4801      	ldr	r0, [pc, #4]	; (8005aa0 <__malloc_lock+0x8>)
 8005a9a:	f7ff b88d 	b.w	8004bb8 <__retarget_lock_acquire_recursive>
 8005a9e:	bf00      	nop
 8005aa0:	20000404 	.word	0x20000404

08005aa4 <__malloc_unlock>:
 8005aa4:	4801      	ldr	r0, [pc, #4]	; (8005aac <__malloc_unlock+0x8>)
 8005aa6:	f7ff b888 	b.w	8004bba <__retarget_lock_release_recursive>
 8005aaa:	bf00      	nop
 8005aac:	20000404 	.word	0x20000404

08005ab0 <_Balloc>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	69c6      	ldr	r6, [r0, #28]
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	460d      	mov	r5, r1
 8005ab8:	b976      	cbnz	r6, 8005ad8 <_Balloc+0x28>
 8005aba:	2010      	movs	r0, #16
 8005abc:	f7ff ff44 	bl	8005948 <malloc>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	61e0      	str	r0, [r4, #28]
 8005ac4:	b920      	cbnz	r0, 8005ad0 <_Balloc+0x20>
 8005ac6:	216b      	movs	r1, #107	; 0x6b
 8005ac8:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <_Balloc+0x78>)
 8005aca:	4818      	ldr	r0, [pc, #96]	; (8005b2c <_Balloc+0x7c>)
 8005acc:	f000 fda2 	bl	8006614 <__assert_func>
 8005ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ad4:	6006      	str	r6, [r0, #0]
 8005ad6:	60c6      	str	r6, [r0, #12]
 8005ad8:	69e6      	ldr	r6, [r4, #28]
 8005ada:	68f3      	ldr	r3, [r6, #12]
 8005adc:	b183      	cbz	r3, 8005b00 <_Balloc+0x50>
 8005ade:	69e3      	ldr	r3, [r4, #28]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ae6:	b9b8      	cbnz	r0, 8005b18 <_Balloc+0x68>
 8005ae8:	2101      	movs	r1, #1
 8005aea:	fa01 f605 	lsl.w	r6, r1, r5
 8005aee:	1d72      	adds	r2, r6, #5
 8005af0:	4620      	mov	r0, r4
 8005af2:	0092      	lsls	r2, r2, #2
 8005af4:	f000 fdac 	bl	8006650 <_calloc_r>
 8005af8:	b160      	cbz	r0, 8005b14 <_Balloc+0x64>
 8005afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005afe:	e00e      	b.n	8005b1e <_Balloc+0x6e>
 8005b00:	2221      	movs	r2, #33	; 0x21
 8005b02:	2104      	movs	r1, #4
 8005b04:	4620      	mov	r0, r4
 8005b06:	f000 fda3 	bl	8006650 <_calloc_r>
 8005b0a:	69e3      	ldr	r3, [r4, #28]
 8005b0c:	60f0      	str	r0, [r6, #12]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e4      	bne.n	8005ade <_Balloc+0x2e>
 8005b14:	2000      	movs	r0, #0
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	6802      	ldr	r2, [r0, #0]
 8005b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b24:	e7f7      	b.n	8005b16 <_Balloc+0x66>
 8005b26:	bf00      	nop
 8005b28:	08007237 	.word	0x08007237
 8005b2c:	080072b7 	.word	0x080072b7

08005b30 <_Bfree>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	69c6      	ldr	r6, [r0, #28]
 8005b34:	4605      	mov	r5, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	b976      	cbnz	r6, 8005b58 <_Bfree+0x28>
 8005b3a:	2010      	movs	r0, #16
 8005b3c:	f7ff ff04 	bl	8005948 <malloc>
 8005b40:	4602      	mov	r2, r0
 8005b42:	61e8      	str	r0, [r5, #28]
 8005b44:	b920      	cbnz	r0, 8005b50 <_Bfree+0x20>
 8005b46:	218f      	movs	r1, #143	; 0x8f
 8005b48:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <_Bfree+0x3c>)
 8005b4a:	4809      	ldr	r0, [pc, #36]	; (8005b70 <_Bfree+0x40>)
 8005b4c:	f000 fd62 	bl	8006614 <__assert_func>
 8005b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b54:	6006      	str	r6, [r0, #0]
 8005b56:	60c6      	str	r6, [r0, #12]
 8005b58:	b13c      	cbz	r4, 8005b6a <_Bfree+0x3a>
 8005b5a:	69eb      	ldr	r3, [r5, #28]
 8005b5c:	6862      	ldr	r2, [r4, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b64:	6021      	str	r1, [r4, #0]
 8005b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	08007237 	.word	0x08007237
 8005b70:	080072b7 	.word	0x080072b7

08005b74 <__multadd>:
 8005b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b78:	4607      	mov	r7, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	461e      	mov	r6, r3
 8005b7e:	2000      	movs	r0, #0
 8005b80:	690d      	ldr	r5, [r1, #16]
 8005b82:	f101 0c14 	add.w	ip, r1, #20
 8005b86:	f8dc 3000 	ldr.w	r3, [ip]
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	b299      	uxth	r1, r3
 8005b8e:	fb02 6101 	mla	r1, r2, r1, r6
 8005b92:	0c1e      	lsrs	r6, r3, #16
 8005b94:	0c0b      	lsrs	r3, r1, #16
 8005b96:	fb02 3306 	mla	r3, r2, r6, r3
 8005b9a:	b289      	uxth	r1, r1
 8005b9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ba0:	4285      	cmp	r5, r0
 8005ba2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ba6:	f84c 1b04 	str.w	r1, [ip], #4
 8005baa:	dcec      	bgt.n	8005b86 <__multadd+0x12>
 8005bac:	b30e      	cbz	r6, 8005bf2 <__multadd+0x7e>
 8005bae:	68a3      	ldr	r3, [r4, #8]
 8005bb0:	42ab      	cmp	r3, r5
 8005bb2:	dc19      	bgt.n	8005be8 <__multadd+0x74>
 8005bb4:	6861      	ldr	r1, [r4, #4]
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	3101      	adds	r1, #1
 8005bba:	f7ff ff79 	bl	8005ab0 <_Balloc>
 8005bbe:	4680      	mov	r8, r0
 8005bc0:	b928      	cbnz	r0, 8005bce <__multadd+0x5a>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	21ba      	movs	r1, #186	; 0xba
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <__multadd+0x84>)
 8005bc8:	480c      	ldr	r0, [pc, #48]	; (8005bfc <__multadd+0x88>)
 8005bca:	f000 fd23 	bl	8006614 <__assert_func>
 8005bce:	6922      	ldr	r2, [r4, #16]
 8005bd0:	f104 010c 	add.w	r1, r4, #12
 8005bd4:	3202      	adds	r2, #2
 8005bd6:	0092      	lsls	r2, r2, #2
 8005bd8:	300c      	adds	r0, #12
 8005bda:	f000 fd0d 	bl	80065f8 <memcpy>
 8005bde:	4621      	mov	r1, r4
 8005be0:	4638      	mov	r0, r7
 8005be2:	f7ff ffa5 	bl	8005b30 <_Bfree>
 8005be6:	4644      	mov	r4, r8
 8005be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bec:	3501      	adds	r5, #1
 8005bee:	615e      	str	r6, [r3, #20]
 8005bf0:	6125      	str	r5, [r4, #16]
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf8:	080072a6 	.word	0x080072a6
 8005bfc:	080072b7 	.word	0x080072b7

08005c00 <__hi0bits>:
 8005c00:	0c02      	lsrs	r2, r0, #16
 8005c02:	0412      	lsls	r2, r2, #16
 8005c04:	4603      	mov	r3, r0
 8005c06:	b9ca      	cbnz	r2, 8005c3c <__hi0bits+0x3c>
 8005c08:	0403      	lsls	r3, r0, #16
 8005c0a:	2010      	movs	r0, #16
 8005c0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c10:	bf04      	itt	eq
 8005c12:	021b      	lsleq	r3, r3, #8
 8005c14:	3008      	addeq	r0, #8
 8005c16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c1a:	bf04      	itt	eq
 8005c1c:	011b      	lsleq	r3, r3, #4
 8005c1e:	3004      	addeq	r0, #4
 8005c20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c24:	bf04      	itt	eq
 8005c26:	009b      	lsleq	r3, r3, #2
 8005c28:	3002      	addeq	r0, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	db05      	blt.n	8005c3a <__hi0bits+0x3a>
 8005c2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005c32:	f100 0001 	add.w	r0, r0, #1
 8005c36:	bf08      	it	eq
 8005c38:	2020      	moveq	r0, #32
 8005c3a:	4770      	bx	lr
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	e7e5      	b.n	8005c0c <__hi0bits+0xc>

08005c40 <__lo0bits>:
 8005c40:	6803      	ldr	r3, [r0, #0]
 8005c42:	4602      	mov	r2, r0
 8005c44:	f013 0007 	ands.w	r0, r3, #7
 8005c48:	d00b      	beq.n	8005c62 <__lo0bits+0x22>
 8005c4a:	07d9      	lsls	r1, r3, #31
 8005c4c:	d421      	bmi.n	8005c92 <__lo0bits+0x52>
 8005c4e:	0798      	lsls	r0, r3, #30
 8005c50:	bf49      	itett	mi
 8005c52:	085b      	lsrmi	r3, r3, #1
 8005c54:	089b      	lsrpl	r3, r3, #2
 8005c56:	2001      	movmi	r0, #1
 8005c58:	6013      	strmi	r3, [r2, #0]
 8005c5a:	bf5c      	itt	pl
 8005c5c:	2002      	movpl	r0, #2
 8005c5e:	6013      	strpl	r3, [r2, #0]
 8005c60:	4770      	bx	lr
 8005c62:	b299      	uxth	r1, r3
 8005c64:	b909      	cbnz	r1, 8005c6a <__lo0bits+0x2a>
 8005c66:	2010      	movs	r0, #16
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	b2d9      	uxtb	r1, r3
 8005c6c:	b909      	cbnz	r1, 8005c72 <__lo0bits+0x32>
 8005c6e:	3008      	adds	r0, #8
 8005c70:	0a1b      	lsrs	r3, r3, #8
 8005c72:	0719      	lsls	r1, r3, #28
 8005c74:	bf04      	itt	eq
 8005c76:	091b      	lsreq	r3, r3, #4
 8005c78:	3004      	addeq	r0, #4
 8005c7a:	0799      	lsls	r1, r3, #30
 8005c7c:	bf04      	itt	eq
 8005c7e:	089b      	lsreq	r3, r3, #2
 8005c80:	3002      	addeq	r0, #2
 8005c82:	07d9      	lsls	r1, r3, #31
 8005c84:	d403      	bmi.n	8005c8e <__lo0bits+0x4e>
 8005c86:	085b      	lsrs	r3, r3, #1
 8005c88:	f100 0001 	add.w	r0, r0, #1
 8005c8c:	d003      	beq.n	8005c96 <__lo0bits+0x56>
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	4770      	bx	lr
 8005c92:	2000      	movs	r0, #0
 8005c94:	4770      	bx	lr
 8005c96:	2020      	movs	r0, #32
 8005c98:	4770      	bx	lr
	...

08005c9c <__i2b>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	f7ff ff05 	bl	8005ab0 <_Balloc>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	b928      	cbnz	r0, 8005cb6 <__i2b+0x1a>
 8005caa:	f240 1145 	movw	r1, #325	; 0x145
 8005cae:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <__i2b+0x24>)
 8005cb0:	4804      	ldr	r0, [pc, #16]	; (8005cc4 <__i2b+0x28>)
 8005cb2:	f000 fcaf 	bl	8006614 <__assert_func>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	6144      	str	r4, [r0, #20]
 8005cba:	6103      	str	r3, [r0, #16]
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	bf00      	nop
 8005cc0:	080072a6 	.word	0x080072a6
 8005cc4:	080072b7 	.word	0x080072b7

08005cc8 <__multiply>:
 8005cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ccc:	4691      	mov	r9, r2
 8005cce:	690a      	ldr	r2, [r1, #16]
 8005cd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	bfbe      	ittt	lt
 8005cda:	460b      	movlt	r3, r1
 8005cdc:	464c      	movlt	r4, r9
 8005cde:	4699      	movlt	r9, r3
 8005ce0:	6927      	ldr	r7, [r4, #16]
 8005ce2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	6861      	ldr	r1, [r4, #4]
 8005cea:	eb07 060a 	add.w	r6, r7, sl
 8005cee:	42b3      	cmp	r3, r6
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	bfb8      	it	lt
 8005cf4:	3101      	addlt	r1, #1
 8005cf6:	f7ff fedb 	bl	8005ab0 <_Balloc>
 8005cfa:	b930      	cbnz	r0, 8005d0a <__multiply+0x42>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005d02:	4b43      	ldr	r3, [pc, #268]	; (8005e10 <__multiply+0x148>)
 8005d04:	4843      	ldr	r0, [pc, #268]	; (8005e14 <__multiply+0x14c>)
 8005d06:	f000 fc85 	bl	8006614 <__assert_func>
 8005d0a:	f100 0514 	add.w	r5, r0, #20
 8005d0e:	462b      	mov	r3, r5
 8005d10:	2200      	movs	r2, #0
 8005d12:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d16:	4543      	cmp	r3, r8
 8005d18:	d321      	bcc.n	8005d5e <__multiply+0x96>
 8005d1a:	f104 0314 	add.w	r3, r4, #20
 8005d1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d22:	f109 0314 	add.w	r3, r9, #20
 8005d26:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d2a:	9202      	str	r2, [sp, #8]
 8005d2c:	1b3a      	subs	r2, r7, r4
 8005d2e:	3a15      	subs	r2, #21
 8005d30:	f022 0203 	bic.w	r2, r2, #3
 8005d34:	3204      	adds	r2, #4
 8005d36:	f104 0115 	add.w	r1, r4, #21
 8005d3a:	428f      	cmp	r7, r1
 8005d3c:	bf38      	it	cc
 8005d3e:	2204      	movcc	r2, #4
 8005d40:	9201      	str	r2, [sp, #4]
 8005d42:	9a02      	ldr	r2, [sp, #8]
 8005d44:	9303      	str	r3, [sp, #12]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d80c      	bhi.n	8005d64 <__multiply+0x9c>
 8005d4a:	2e00      	cmp	r6, #0
 8005d4c:	dd03      	ble.n	8005d56 <__multiply+0x8e>
 8005d4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d05a      	beq.n	8005e0c <__multiply+0x144>
 8005d56:	6106      	str	r6, [r0, #16]
 8005d58:	b005      	add	sp, #20
 8005d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5e:	f843 2b04 	str.w	r2, [r3], #4
 8005d62:	e7d8      	b.n	8005d16 <__multiply+0x4e>
 8005d64:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d68:	f1ba 0f00 	cmp.w	sl, #0
 8005d6c:	d023      	beq.n	8005db6 <__multiply+0xee>
 8005d6e:	46a9      	mov	r9, r5
 8005d70:	f04f 0c00 	mov.w	ip, #0
 8005d74:	f104 0e14 	add.w	lr, r4, #20
 8005d78:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d7c:	f8d9 1000 	ldr.w	r1, [r9]
 8005d80:	fa1f fb82 	uxth.w	fp, r2
 8005d84:	b289      	uxth	r1, r1
 8005d86:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d8a:	4461      	add	r1, ip
 8005d8c:	f8d9 c000 	ldr.w	ip, [r9]
 8005d90:	0c12      	lsrs	r2, r2, #16
 8005d92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d96:	fb0a c202 	mla	r2, sl, r2, ip
 8005d9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d9e:	b289      	uxth	r1, r1
 8005da0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005da4:	4577      	cmp	r7, lr
 8005da6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005daa:	f849 1b04 	str.w	r1, [r9], #4
 8005dae:	d8e3      	bhi.n	8005d78 <__multiply+0xb0>
 8005db0:	9a01      	ldr	r2, [sp, #4]
 8005db2:	f845 c002 	str.w	ip, [r5, r2]
 8005db6:	9a03      	ldr	r2, [sp, #12]
 8005db8:	3304      	adds	r3, #4
 8005dba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005dbe:	f1b9 0f00 	cmp.w	r9, #0
 8005dc2:	d021      	beq.n	8005e08 <__multiply+0x140>
 8005dc4:	46ae      	mov	lr, r5
 8005dc6:	f04f 0a00 	mov.w	sl, #0
 8005dca:	6829      	ldr	r1, [r5, #0]
 8005dcc:	f104 0c14 	add.w	ip, r4, #20
 8005dd0:	f8bc b000 	ldrh.w	fp, [ip]
 8005dd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005dd8:	b289      	uxth	r1, r1
 8005dda:	fb09 220b 	mla	r2, r9, fp, r2
 8005dde:	4452      	add	r2, sl
 8005de0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005de4:	f84e 1b04 	str.w	r1, [lr], #4
 8005de8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005dec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005df0:	f8be 1000 	ldrh.w	r1, [lr]
 8005df4:	4567      	cmp	r7, ip
 8005df6:	fb09 110a 	mla	r1, r9, sl, r1
 8005dfa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005dfe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e02:	d8e5      	bhi.n	8005dd0 <__multiply+0x108>
 8005e04:	9a01      	ldr	r2, [sp, #4]
 8005e06:	50a9      	str	r1, [r5, r2]
 8005e08:	3504      	adds	r5, #4
 8005e0a:	e79a      	b.n	8005d42 <__multiply+0x7a>
 8005e0c:	3e01      	subs	r6, #1
 8005e0e:	e79c      	b.n	8005d4a <__multiply+0x82>
 8005e10:	080072a6 	.word	0x080072a6
 8005e14:	080072b7 	.word	0x080072b7

08005e18 <__pow5mult>:
 8005e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e1c:	4615      	mov	r5, r2
 8005e1e:	f012 0203 	ands.w	r2, r2, #3
 8005e22:	4606      	mov	r6, r0
 8005e24:	460f      	mov	r7, r1
 8005e26:	d007      	beq.n	8005e38 <__pow5mult+0x20>
 8005e28:	4c25      	ldr	r4, [pc, #148]	; (8005ec0 <__pow5mult+0xa8>)
 8005e2a:	3a01      	subs	r2, #1
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e32:	f7ff fe9f 	bl	8005b74 <__multadd>
 8005e36:	4607      	mov	r7, r0
 8005e38:	10ad      	asrs	r5, r5, #2
 8005e3a:	d03d      	beq.n	8005eb8 <__pow5mult+0xa0>
 8005e3c:	69f4      	ldr	r4, [r6, #28]
 8005e3e:	b97c      	cbnz	r4, 8005e60 <__pow5mult+0x48>
 8005e40:	2010      	movs	r0, #16
 8005e42:	f7ff fd81 	bl	8005948 <malloc>
 8005e46:	4602      	mov	r2, r0
 8005e48:	61f0      	str	r0, [r6, #28]
 8005e4a:	b928      	cbnz	r0, 8005e58 <__pow5mult+0x40>
 8005e4c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005e50:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <__pow5mult+0xac>)
 8005e52:	481d      	ldr	r0, [pc, #116]	; (8005ec8 <__pow5mult+0xb0>)
 8005e54:	f000 fbde 	bl	8006614 <__assert_func>
 8005e58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e5c:	6004      	str	r4, [r0, #0]
 8005e5e:	60c4      	str	r4, [r0, #12]
 8005e60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005e64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e68:	b94c      	cbnz	r4, 8005e7e <__pow5mult+0x66>
 8005e6a:	f240 2171 	movw	r1, #625	; 0x271
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f7ff ff14 	bl	8005c9c <__i2b>
 8005e74:	2300      	movs	r3, #0
 8005e76:	4604      	mov	r4, r0
 8005e78:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e7c:	6003      	str	r3, [r0, #0]
 8005e7e:	f04f 0900 	mov.w	r9, #0
 8005e82:	07eb      	lsls	r3, r5, #31
 8005e84:	d50a      	bpl.n	8005e9c <__pow5mult+0x84>
 8005e86:	4639      	mov	r1, r7
 8005e88:	4622      	mov	r2, r4
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f7ff ff1c 	bl	8005cc8 <__multiply>
 8005e90:	4680      	mov	r8, r0
 8005e92:	4639      	mov	r1, r7
 8005e94:	4630      	mov	r0, r6
 8005e96:	f7ff fe4b 	bl	8005b30 <_Bfree>
 8005e9a:	4647      	mov	r7, r8
 8005e9c:	106d      	asrs	r5, r5, #1
 8005e9e:	d00b      	beq.n	8005eb8 <__pow5mult+0xa0>
 8005ea0:	6820      	ldr	r0, [r4, #0]
 8005ea2:	b938      	cbnz	r0, 8005eb4 <__pow5mult+0x9c>
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7ff ff0d 	bl	8005cc8 <__multiply>
 8005eae:	6020      	str	r0, [r4, #0]
 8005eb0:	f8c0 9000 	str.w	r9, [r0]
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	e7e4      	b.n	8005e82 <__pow5mult+0x6a>
 8005eb8:	4638      	mov	r0, r7
 8005eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ebe:	bf00      	nop
 8005ec0:	08007400 	.word	0x08007400
 8005ec4:	08007237 	.word	0x08007237
 8005ec8:	080072b7 	.word	0x080072b7

08005ecc <__lshift>:
 8005ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4607      	mov	r7, r0
 8005ed4:	4691      	mov	r9, r2
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	6849      	ldr	r1, [r1, #4]
 8005eda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ede:	68a3      	ldr	r3, [r4, #8]
 8005ee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ee4:	f108 0601 	add.w	r6, r8, #1
 8005ee8:	42b3      	cmp	r3, r6
 8005eea:	db0b      	blt.n	8005f04 <__lshift+0x38>
 8005eec:	4638      	mov	r0, r7
 8005eee:	f7ff fddf 	bl	8005ab0 <_Balloc>
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	b948      	cbnz	r0, 8005f0a <__lshift+0x3e>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005efc:	4b27      	ldr	r3, [pc, #156]	; (8005f9c <__lshift+0xd0>)
 8005efe:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <__lshift+0xd4>)
 8005f00:	f000 fb88 	bl	8006614 <__assert_func>
 8005f04:	3101      	adds	r1, #1
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	e7ee      	b.n	8005ee8 <__lshift+0x1c>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f100 0114 	add.w	r1, r0, #20
 8005f10:	f100 0210 	add.w	r2, r0, #16
 8005f14:	4618      	mov	r0, r3
 8005f16:	4553      	cmp	r3, sl
 8005f18:	db33      	blt.n	8005f82 <__lshift+0xb6>
 8005f1a:	6920      	ldr	r0, [r4, #16]
 8005f1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f20:	f104 0314 	add.w	r3, r4, #20
 8005f24:	f019 091f 	ands.w	r9, r9, #31
 8005f28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f30:	d02b      	beq.n	8005f8a <__lshift+0xbe>
 8005f32:	468a      	mov	sl, r1
 8005f34:	2200      	movs	r2, #0
 8005f36:	f1c9 0e20 	rsb	lr, r9, #32
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	fa00 f009 	lsl.w	r0, r0, r9
 8005f40:	4310      	orrs	r0, r2
 8005f42:	f84a 0b04 	str.w	r0, [sl], #4
 8005f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f4a:	459c      	cmp	ip, r3
 8005f4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f50:	d8f3      	bhi.n	8005f3a <__lshift+0x6e>
 8005f52:	ebac 0304 	sub.w	r3, ip, r4
 8005f56:	3b15      	subs	r3, #21
 8005f58:	f023 0303 	bic.w	r3, r3, #3
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	f104 0015 	add.w	r0, r4, #21
 8005f62:	4584      	cmp	ip, r0
 8005f64:	bf38      	it	cc
 8005f66:	2304      	movcc	r3, #4
 8005f68:	50ca      	str	r2, [r1, r3]
 8005f6a:	b10a      	cbz	r2, 8005f70 <__lshift+0xa4>
 8005f6c:	f108 0602 	add.w	r6, r8, #2
 8005f70:	3e01      	subs	r6, #1
 8005f72:	4638      	mov	r0, r7
 8005f74:	4621      	mov	r1, r4
 8005f76:	612e      	str	r6, [r5, #16]
 8005f78:	f7ff fdda 	bl	8005b30 <_Bfree>
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f86:	3301      	adds	r3, #1
 8005f88:	e7c5      	b.n	8005f16 <__lshift+0x4a>
 8005f8a:	3904      	subs	r1, #4
 8005f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f90:	459c      	cmp	ip, r3
 8005f92:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f96:	d8f9      	bhi.n	8005f8c <__lshift+0xc0>
 8005f98:	e7ea      	b.n	8005f70 <__lshift+0xa4>
 8005f9a:	bf00      	nop
 8005f9c:	080072a6 	.word	0x080072a6
 8005fa0:	080072b7 	.word	0x080072b7

08005fa4 <__mcmp>:
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	690a      	ldr	r2, [r1, #16]
 8005fa8:	6900      	ldr	r0, [r0, #16]
 8005faa:	b530      	push	{r4, r5, lr}
 8005fac:	1a80      	subs	r0, r0, r2
 8005fae:	d10d      	bne.n	8005fcc <__mcmp+0x28>
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	3114      	adds	r1, #20
 8005fb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005fb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005fbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fc4:	4295      	cmp	r5, r2
 8005fc6:	d002      	beq.n	8005fce <__mcmp+0x2a>
 8005fc8:	d304      	bcc.n	8005fd4 <__mcmp+0x30>
 8005fca:	2001      	movs	r0, #1
 8005fcc:	bd30      	pop	{r4, r5, pc}
 8005fce:	42a3      	cmp	r3, r4
 8005fd0:	d3f4      	bcc.n	8005fbc <__mcmp+0x18>
 8005fd2:	e7fb      	b.n	8005fcc <__mcmp+0x28>
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd8:	e7f8      	b.n	8005fcc <__mcmp+0x28>
	...

08005fdc <__mdiff>:
 8005fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	4607      	mov	r7, r0
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	4614      	mov	r4, r2
 8005fea:	f7ff ffdb 	bl	8005fa4 <__mcmp>
 8005fee:	1e06      	subs	r6, r0, #0
 8005ff0:	d111      	bne.n	8006016 <__mdiff+0x3a>
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	f7ff fd5b 	bl	8005ab0 <_Balloc>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	b928      	cbnz	r0, 800600a <__mdiff+0x2e>
 8005ffe:	f240 2137 	movw	r1, #567	; 0x237
 8006002:	4b3a      	ldr	r3, [pc, #232]	; (80060ec <__mdiff+0x110>)
 8006004:	483a      	ldr	r0, [pc, #232]	; (80060f0 <__mdiff+0x114>)
 8006006:	f000 fb05 	bl	8006614 <__assert_func>
 800600a:	2301      	movs	r3, #1
 800600c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006010:	4610      	mov	r0, r2
 8006012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006016:	bfa4      	itt	ge
 8006018:	4623      	movge	r3, r4
 800601a:	462c      	movge	r4, r5
 800601c:	4638      	mov	r0, r7
 800601e:	6861      	ldr	r1, [r4, #4]
 8006020:	bfa6      	itte	ge
 8006022:	461d      	movge	r5, r3
 8006024:	2600      	movge	r6, #0
 8006026:	2601      	movlt	r6, #1
 8006028:	f7ff fd42 	bl	8005ab0 <_Balloc>
 800602c:	4602      	mov	r2, r0
 800602e:	b918      	cbnz	r0, 8006038 <__mdiff+0x5c>
 8006030:	f240 2145 	movw	r1, #581	; 0x245
 8006034:	4b2d      	ldr	r3, [pc, #180]	; (80060ec <__mdiff+0x110>)
 8006036:	e7e5      	b.n	8006004 <__mdiff+0x28>
 8006038:	f102 0814 	add.w	r8, r2, #20
 800603c:	46c2      	mov	sl, r8
 800603e:	f04f 0c00 	mov.w	ip, #0
 8006042:	6927      	ldr	r7, [r4, #16]
 8006044:	60c6      	str	r6, [r0, #12]
 8006046:	692e      	ldr	r6, [r5, #16]
 8006048:	f104 0014 	add.w	r0, r4, #20
 800604c:	f105 0914 	add.w	r9, r5, #20
 8006050:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006054:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006058:	3410      	adds	r4, #16
 800605a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800605e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006062:	fa1f f18b 	uxth.w	r1, fp
 8006066:	4461      	add	r1, ip
 8006068:	fa1f fc83 	uxth.w	ip, r3
 800606c:	0c1b      	lsrs	r3, r3, #16
 800606e:	eba1 010c 	sub.w	r1, r1, ip
 8006072:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006076:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800607a:	b289      	uxth	r1, r1
 800607c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006080:	454e      	cmp	r6, r9
 8006082:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006086:	f84a 1b04 	str.w	r1, [sl], #4
 800608a:	d8e6      	bhi.n	800605a <__mdiff+0x7e>
 800608c:	1b73      	subs	r3, r6, r5
 800608e:	3b15      	subs	r3, #21
 8006090:	f023 0303 	bic.w	r3, r3, #3
 8006094:	3515      	adds	r5, #21
 8006096:	3304      	adds	r3, #4
 8006098:	42ae      	cmp	r6, r5
 800609a:	bf38      	it	cc
 800609c:	2304      	movcc	r3, #4
 800609e:	4418      	add	r0, r3
 80060a0:	4443      	add	r3, r8
 80060a2:	461e      	mov	r6, r3
 80060a4:	4605      	mov	r5, r0
 80060a6:	4575      	cmp	r5, lr
 80060a8:	d30e      	bcc.n	80060c8 <__mdiff+0xec>
 80060aa:	f10e 0103 	add.w	r1, lr, #3
 80060ae:	1a09      	subs	r1, r1, r0
 80060b0:	f021 0103 	bic.w	r1, r1, #3
 80060b4:	3803      	subs	r0, #3
 80060b6:	4586      	cmp	lr, r0
 80060b8:	bf38      	it	cc
 80060ba:	2100      	movcc	r1, #0
 80060bc:	440b      	add	r3, r1
 80060be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060c2:	b189      	cbz	r1, 80060e8 <__mdiff+0x10c>
 80060c4:	6117      	str	r7, [r2, #16]
 80060c6:	e7a3      	b.n	8006010 <__mdiff+0x34>
 80060c8:	f855 8b04 	ldr.w	r8, [r5], #4
 80060cc:	fa1f f188 	uxth.w	r1, r8
 80060d0:	4461      	add	r1, ip
 80060d2:	140c      	asrs	r4, r1, #16
 80060d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060d8:	b289      	uxth	r1, r1
 80060da:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80060de:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80060e2:	f846 1b04 	str.w	r1, [r6], #4
 80060e6:	e7de      	b.n	80060a6 <__mdiff+0xca>
 80060e8:	3f01      	subs	r7, #1
 80060ea:	e7e8      	b.n	80060be <__mdiff+0xe2>
 80060ec:	080072a6 	.word	0x080072a6
 80060f0:	080072b7 	.word	0x080072b7

080060f4 <__d2b>:
 80060f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060f6:	2101      	movs	r1, #1
 80060f8:	4617      	mov	r7, r2
 80060fa:	461c      	mov	r4, r3
 80060fc:	9e08      	ldr	r6, [sp, #32]
 80060fe:	f7ff fcd7 	bl	8005ab0 <_Balloc>
 8006102:	4605      	mov	r5, r0
 8006104:	b930      	cbnz	r0, 8006114 <__d2b+0x20>
 8006106:	4602      	mov	r2, r0
 8006108:	f240 310f 	movw	r1, #783	; 0x30f
 800610c:	4b22      	ldr	r3, [pc, #136]	; (8006198 <__d2b+0xa4>)
 800610e:	4823      	ldr	r0, [pc, #140]	; (800619c <__d2b+0xa8>)
 8006110:	f000 fa80 	bl	8006614 <__assert_func>
 8006114:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006118:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800611c:	bb24      	cbnz	r4, 8006168 <__d2b+0x74>
 800611e:	2f00      	cmp	r7, #0
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	d026      	beq.n	8006172 <__d2b+0x7e>
 8006124:	4668      	mov	r0, sp
 8006126:	9700      	str	r7, [sp, #0]
 8006128:	f7ff fd8a 	bl	8005c40 <__lo0bits>
 800612c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006130:	b1e8      	cbz	r0, 800616e <__d2b+0x7a>
 8006132:	f1c0 0320 	rsb	r3, r0, #32
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	430b      	orrs	r3, r1
 800613c:	40c2      	lsrs	r2, r0
 800613e:	616b      	str	r3, [r5, #20]
 8006140:	9201      	str	r2, [sp, #4]
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	bf14      	ite	ne
 8006148:	2102      	movne	r1, #2
 800614a:	2101      	moveq	r1, #1
 800614c:	61ab      	str	r3, [r5, #24]
 800614e:	6129      	str	r1, [r5, #16]
 8006150:	b1bc      	cbz	r4, 8006182 <__d2b+0x8e>
 8006152:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006156:	4404      	add	r4, r0
 8006158:	6034      	str	r4, [r6, #0]
 800615a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800615e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006160:	6018      	str	r0, [r3, #0]
 8006162:	4628      	mov	r0, r5
 8006164:	b003      	add	sp, #12
 8006166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800616c:	e7d7      	b.n	800611e <__d2b+0x2a>
 800616e:	6169      	str	r1, [r5, #20]
 8006170:	e7e7      	b.n	8006142 <__d2b+0x4e>
 8006172:	a801      	add	r0, sp, #4
 8006174:	f7ff fd64 	bl	8005c40 <__lo0bits>
 8006178:	9b01      	ldr	r3, [sp, #4]
 800617a:	2101      	movs	r1, #1
 800617c:	616b      	str	r3, [r5, #20]
 800617e:	3020      	adds	r0, #32
 8006180:	e7e5      	b.n	800614e <__d2b+0x5a>
 8006182:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006186:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800618a:	6030      	str	r0, [r6, #0]
 800618c:	6918      	ldr	r0, [r3, #16]
 800618e:	f7ff fd37 	bl	8005c00 <__hi0bits>
 8006192:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006196:	e7e2      	b.n	800615e <__d2b+0x6a>
 8006198:	080072a6 	.word	0x080072a6
 800619c:	080072b7 	.word	0x080072b7

080061a0 <__ssputs_r>:
 80061a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a4:	461f      	mov	r7, r3
 80061a6:	688e      	ldr	r6, [r1, #8]
 80061a8:	4682      	mov	sl, r0
 80061aa:	42be      	cmp	r6, r7
 80061ac:	460c      	mov	r4, r1
 80061ae:	4690      	mov	r8, r2
 80061b0:	680b      	ldr	r3, [r1, #0]
 80061b2:	d82c      	bhi.n	800620e <__ssputs_r+0x6e>
 80061b4:	898a      	ldrh	r2, [r1, #12]
 80061b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061ba:	d026      	beq.n	800620a <__ssputs_r+0x6a>
 80061bc:	6965      	ldr	r5, [r4, #20]
 80061be:	6909      	ldr	r1, [r1, #16]
 80061c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061c4:	eba3 0901 	sub.w	r9, r3, r1
 80061c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061cc:	1c7b      	adds	r3, r7, #1
 80061ce:	444b      	add	r3, r9
 80061d0:	106d      	asrs	r5, r5, #1
 80061d2:	429d      	cmp	r5, r3
 80061d4:	bf38      	it	cc
 80061d6:	461d      	movcc	r5, r3
 80061d8:	0553      	lsls	r3, r2, #21
 80061da:	d527      	bpl.n	800622c <__ssputs_r+0x8c>
 80061dc:	4629      	mov	r1, r5
 80061de:	f7ff fbdb 	bl	8005998 <_malloc_r>
 80061e2:	4606      	mov	r6, r0
 80061e4:	b360      	cbz	r0, 8006240 <__ssputs_r+0xa0>
 80061e6:	464a      	mov	r2, r9
 80061e8:	6921      	ldr	r1, [r4, #16]
 80061ea:	f000 fa05 	bl	80065f8 <memcpy>
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f8:	81a3      	strh	r3, [r4, #12]
 80061fa:	6126      	str	r6, [r4, #16]
 80061fc:	444e      	add	r6, r9
 80061fe:	6026      	str	r6, [r4, #0]
 8006200:	463e      	mov	r6, r7
 8006202:	6165      	str	r5, [r4, #20]
 8006204:	eba5 0509 	sub.w	r5, r5, r9
 8006208:	60a5      	str	r5, [r4, #8]
 800620a:	42be      	cmp	r6, r7
 800620c:	d900      	bls.n	8006210 <__ssputs_r+0x70>
 800620e:	463e      	mov	r6, r7
 8006210:	4632      	mov	r2, r6
 8006212:	4641      	mov	r1, r8
 8006214:	6820      	ldr	r0, [r4, #0]
 8006216:	f000 f9c5 	bl	80065a4 <memmove>
 800621a:	2000      	movs	r0, #0
 800621c:	68a3      	ldr	r3, [r4, #8]
 800621e:	1b9b      	subs	r3, r3, r6
 8006220:	60a3      	str	r3, [r4, #8]
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	4433      	add	r3, r6
 8006226:	6023      	str	r3, [r4, #0]
 8006228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622c:	462a      	mov	r2, r5
 800622e:	f000 fa35 	bl	800669c <_realloc_r>
 8006232:	4606      	mov	r6, r0
 8006234:	2800      	cmp	r0, #0
 8006236:	d1e0      	bne.n	80061fa <__ssputs_r+0x5a>
 8006238:	4650      	mov	r0, sl
 800623a:	6921      	ldr	r1, [r4, #16]
 800623c:	f7ff fb3c 	bl	80058b8 <_free_r>
 8006240:	230c      	movs	r3, #12
 8006242:	f8ca 3000 	str.w	r3, [sl]
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	f04f 30ff 	mov.w	r0, #4294967295
 800624c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	e7e9      	b.n	8006228 <__ssputs_r+0x88>

08006254 <_svfiprintf_r>:
 8006254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006258:	4698      	mov	r8, r3
 800625a:	898b      	ldrh	r3, [r1, #12]
 800625c:	4607      	mov	r7, r0
 800625e:	061b      	lsls	r3, r3, #24
 8006260:	460d      	mov	r5, r1
 8006262:	4614      	mov	r4, r2
 8006264:	b09d      	sub	sp, #116	; 0x74
 8006266:	d50e      	bpl.n	8006286 <_svfiprintf_r+0x32>
 8006268:	690b      	ldr	r3, [r1, #16]
 800626a:	b963      	cbnz	r3, 8006286 <_svfiprintf_r+0x32>
 800626c:	2140      	movs	r1, #64	; 0x40
 800626e:	f7ff fb93 	bl	8005998 <_malloc_r>
 8006272:	6028      	str	r0, [r5, #0]
 8006274:	6128      	str	r0, [r5, #16]
 8006276:	b920      	cbnz	r0, 8006282 <_svfiprintf_r+0x2e>
 8006278:	230c      	movs	r3, #12
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	e0d0      	b.n	8006424 <_svfiprintf_r+0x1d0>
 8006282:	2340      	movs	r3, #64	; 0x40
 8006284:	616b      	str	r3, [r5, #20]
 8006286:	2300      	movs	r3, #0
 8006288:	9309      	str	r3, [sp, #36]	; 0x24
 800628a:	2320      	movs	r3, #32
 800628c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006290:	2330      	movs	r3, #48	; 0x30
 8006292:	f04f 0901 	mov.w	r9, #1
 8006296:	f8cd 800c 	str.w	r8, [sp, #12]
 800629a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800643c <_svfiprintf_r+0x1e8>
 800629e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062a2:	4623      	mov	r3, r4
 80062a4:	469a      	mov	sl, r3
 80062a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062aa:	b10a      	cbz	r2, 80062b0 <_svfiprintf_r+0x5c>
 80062ac:	2a25      	cmp	r2, #37	; 0x25
 80062ae:	d1f9      	bne.n	80062a4 <_svfiprintf_r+0x50>
 80062b0:	ebba 0b04 	subs.w	fp, sl, r4
 80062b4:	d00b      	beq.n	80062ce <_svfiprintf_r+0x7a>
 80062b6:	465b      	mov	r3, fp
 80062b8:	4622      	mov	r2, r4
 80062ba:	4629      	mov	r1, r5
 80062bc:	4638      	mov	r0, r7
 80062be:	f7ff ff6f 	bl	80061a0 <__ssputs_r>
 80062c2:	3001      	adds	r0, #1
 80062c4:	f000 80a9 	beq.w	800641a <_svfiprintf_r+0x1c6>
 80062c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ca:	445a      	add	r2, fp
 80062cc:	9209      	str	r2, [sp, #36]	; 0x24
 80062ce:	f89a 3000 	ldrb.w	r3, [sl]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80a1 	beq.w	800641a <_svfiprintf_r+0x1c6>
 80062d8:	2300      	movs	r3, #0
 80062da:	f04f 32ff 	mov.w	r2, #4294967295
 80062de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062e2:	f10a 0a01 	add.w	sl, sl, #1
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	9307      	str	r3, [sp, #28]
 80062ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062ee:	931a      	str	r3, [sp, #104]	; 0x68
 80062f0:	4654      	mov	r4, sl
 80062f2:	2205      	movs	r2, #5
 80062f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f8:	4850      	ldr	r0, [pc, #320]	; (800643c <_svfiprintf_r+0x1e8>)
 80062fa:	f7fe fc5f 	bl	8004bbc <memchr>
 80062fe:	9a04      	ldr	r2, [sp, #16]
 8006300:	b9d8      	cbnz	r0, 800633a <_svfiprintf_r+0xe6>
 8006302:	06d0      	lsls	r0, r2, #27
 8006304:	bf44      	itt	mi
 8006306:	2320      	movmi	r3, #32
 8006308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800630c:	0711      	lsls	r1, r2, #28
 800630e:	bf44      	itt	mi
 8006310:	232b      	movmi	r3, #43	; 0x2b
 8006312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006316:	f89a 3000 	ldrb.w	r3, [sl]
 800631a:	2b2a      	cmp	r3, #42	; 0x2a
 800631c:	d015      	beq.n	800634a <_svfiprintf_r+0xf6>
 800631e:	4654      	mov	r4, sl
 8006320:	2000      	movs	r0, #0
 8006322:	f04f 0c0a 	mov.w	ip, #10
 8006326:	9a07      	ldr	r2, [sp, #28]
 8006328:	4621      	mov	r1, r4
 800632a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800632e:	3b30      	subs	r3, #48	; 0x30
 8006330:	2b09      	cmp	r3, #9
 8006332:	d94d      	bls.n	80063d0 <_svfiprintf_r+0x17c>
 8006334:	b1b0      	cbz	r0, 8006364 <_svfiprintf_r+0x110>
 8006336:	9207      	str	r2, [sp, #28]
 8006338:	e014      	b.n	8006364 <_svfiprintf_r+0x110>
 800633a:	eba0 0308 	sub.w	r3, r0, r8
 800633e:	fa09 f303 	lsl.w	r3, r9, r3
 8006342:	4313      	orrs	r3, r2
 8006344:	46a2      	mov	sl, r4
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	e7d2      	b.n	80062f0 <_svfiprintf_r+0x9c>
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	1d19      	adds	r1, r3, #4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	9103      	str	r1, [sp, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	bfbb      	ittet	lt
 8006356:	425b      	neglt	r3, r3
 8006358:	f042 0202 	orrlt.w	r2, r2, #2
 800635c:	9307      	strge	r3, [sp, #28]
 800635e:	9307      	strlt	r3, [sp, #28]
 8006360:	bfb8      	it	lt
 8006362:	9204      	strlt	r2, [sp, #16]
 8006364:	7823      	ldrb	r3, [r4, #0]
 8006366:	2b2e      	cmp	r3, #46	; 0x2e
 8006368:	d10c      	bne.n	8006384 <_svfiprintf_r+0x130>
 800636a:	7863      	ldrb	r3, [r4, #1]
 800636c:	2b2a      	cmp	r3, #42	; 0x2a
 800636e:	d134      	bne.n	80063da <_svfiprintf_r+0x186>
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	3402      	adds	r4, #2
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	9203      	str	r2, [sp, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	bfb8      	it	lt
 800637e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006382:	9305      	str	r3, [sp, #20]
 8006384:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006440 <_svfiprintf_r+0x1ec>
 8006388:	2203      	movs	r2, #3
 800638a:	4650      	mov	r0, sl
 800638c:	7821      	ldrb	r1, [r4, #0]
 800638e:	f7fe fc15 	bl	8004bbc <memchr>
 8006392:	b138      	cbz	r0, 80063a4 <_svfiprintf_r+0x150>
 8006394:	2240      	movs	r2, #64	; 0x40
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	eba0 000a 	sub.w	r0, r0, sl
 800639c:	4082      	lsls	r2, r0
 800639e:	4313      	orrs	r3, r2
 80063a0:	3401      	adds	r4, #1
 80063a2:	9304      	str	r3, [sp, #16]
 80063a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a8:	2206      	movs	r2, #6
 80063aa:	4826      	ldr	r0, [pc, #152]	; (8006444 <_svfiprintf_r+0x1f0>)
 80063ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063b0:	f7fe fc04 	bl	8004bbc <memchr>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d038      	beq.n	800642a <_svfiprintf_r+0x1d6>
 80063b8:	4b23      	ldr	r3, [pc, #140]	; (8006448 <_svfiprintf_r+0x1f4>)
 80063ba:	bb1b      	cbnz	r3, 8006404 <_svfiprintf_r+0x1b0>
 80063bc:	9b03      	ldr	r3, [sp, #12]
 80063be:	3307      	adds	r3, #7
 80063c0:	f023 0307 	bic.w	r3, r3, #7
 80063c4:	3308      	adds	r3, #8
 80063c6:	9303      	str	r3, [sp, #12]
 80063c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ca:	4433      	add	r3, r6
 80063cc:	9309      	str	r3, [sp, #36]	; 0x24
 80063ce:	e768      	b.n	80062a2 <_svfiprintf_r+0x4e>
 80063d0:	460c      	mov	r4, r1
 80063d2:	2001      	movs	r0, #1
 80063d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80063d8:	e7a6      	b.n	8006328 <_svfiprintf_r+0xd4>
 80063da:	2300      	movs	r3, #0
 80063dc:	f04f 0c0a 	mov.w	ip, #10
 80063e0:	4619      	mov	r1, r3
 80063e2:	3401      	adds	r4, #1
 80063e4:	9305      	str	r3, [sp, #20]
 80063e6:	4620      	mov	r0, r4
 80063e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ec:	3a30      	subs	r2, #48	; 0x30
 80063ee:	2a09      	cmp	r2, #9
 80063f0:	d903      	bls.n	80063fa <_svfiprintf_r+0x1a6>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0c6      	beq.n	8006384 <_svfiprintf_r+0x130>
 80063f6:	9105      	str	r1, [sp, #20]
 80063f8:	e7c4      	b.n	8006384 <_svfiprintf_r+0x130>
 80063fa:	4604      	mov	r4, r0
 80063fc:	2301      	movs	r3, #1
 80063fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006402:	e7f0      	b.n	80063e6 <_svfiprintf_r+0x192>
 8006404:	ab03      	add	r3, sp, #12
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	462a      	mov	r2, r5
 800640a:	4638      	mov	r0, r7
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <_svfiprintf_r+0x1f8>)
 800640e:	a904      	add	r1, sp, #16
 8006410:	f7fd fe80 	bl	8004114 <_printf_float>
 8006414:	1c42      	adds	r2, r0, #1
 8006416:	4606      	mov	r6, r0
 8006418:	d1d6      	bne.n	80063c8 <_svfiprintf_r+0x174>
 800641a:	89ab      	ldrh	r3, [r5, #12]
 800641c:	065b      	lsls	r3, r3, #25
 800641e:	f53f af2d 	bmi.w	800627c <_svfiprintf_r+0x28>
 8006422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006424:	b01d      	add	sp, #116	; 0x74
 8006426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642a:	ab03      	add	r3, sp, #12
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	462a      	mov	r2, r5
 8006430:	4638      	mov	r0, r7
 8006432:	4b06      	ldr	r3, [pc, #24]	; (800644c <_svfiprintf_r+0x1f8>)
 8006434:	a904      	add	r1, sp, #16
 8006436:	f7fe f90d 	bl	8004654 <_printf_i>
 800643a:	e7eb      	b.n	8006414 <_svfiprintf_r+0x1c0>
 800643c:	0800740c 	.word	0x0800740c
 8006440:	08007412 	.word	0x08007412
 8006444:	08007416 	.word	0x08007416
 8006448:	08004115 	.word	0x08004115
 800644c:	080061a1 	.word	0x080061a1

08006450 <__sflush_r>:
 8006450:	898a      	ldrh	r2, [r1, #12]
 8006452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006454:	4605      	mov	r5, r0
 8006456:	0710      	lsls	r0, r2, #28
 8006458:	460c      	mov	r4, r1
 800645a:	d457      	bmi.n	800650c <__sflush_r+0xbc>
 800645c:	684b      	ldr	r3, [r1, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	dc04      	bgt.n	800646c <__sflush_r+0x1c>
 8006462:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	dc01      	bgt.n	800646c <__sflush_r+0x1c>
 8006468:	2000      	movs	r0, #0
 800646a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800646c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800646e:	2e00      	cmp	r6, #0
 8006470:	d0fa      	beq.n	8006468 <__sflush_r+0x18>
 8006472:	2300      	movs	r3, #0
 8006474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006478:	682f      	ldr	r7, [r5, #0]
 800647a:	6a21      	ldr	r1, [r4, #32]
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	d032      	beq.n	80064e6 <__sflush_r+0x96>
 8006480:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	075a      	lsls	r2, r3, #29
 8006486:	d505      	bpl.n	8006494 <__sflush_r+0x44>
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	1ac0      	subs	r0, r0, r3
 800648c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800648e:	b10b      	cbz	r3, 8006494 <__sflush_r+0x44>
 8006490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006492:	1ac0      	subs	r0, r0, r3
 8006494:	2300      	movs	r3, #0
 8006496:	4602      	mov	r2, r0
 8006498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800649a:	4628      	mov	r0, r5
 800649c:	6a21      	ldr	r1, [r4, #32]
 800649e:	47b0      	blx	r6
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	d106      	bne.n	80064b4 <__sflush_r+0x64>
 80064a6:	6829      	ldr	r1, [r5, #0]
 80064a8:	291d      	cmp	r1, #29
 80064aa:	d82b      	bhi.n	8006504 <__sflush_r+0xb4>
 80064ac:	4a28      	ldr	r2, [pc, #160]	; (8006550 <__sflush_r+0x100>)
 80064ae:	410a      	asrs	r2, r1
 80064b0:	07d6      	lsls	r6, r2, #31
 80064b2:	d427      	bmi.n	8006504 <__sflush_r+0xb4>
 80064b4:	2200      	movs	r2, #0
 80064b6:	6062      	str	r2, [r4, #4]
 80064b8:	6922      	ldr	r2, [r4, #16]
 80064ba:	04d9      	lsls	r1, r3, #19
 80064bc:	6022      	str	r2, [r4, #0]
 80064be:	d504      	bpl.n	80064ca <__sflush_r+0x7a>
 80064c0:	1c42      	adds	r2, r0, #1
 80064c2:	d101      	bne.n	80064c8 <__sflush_r+0x78>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	b903      	cbnz	r3, 80064ca <__sflush_r+0x7a>
 80064c8:	6560      	str	r0, [r4, #84]	; 0x54
 80064ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064cc:	602f      	str	r7, [r5, #0]
 80064ce:	2900      	cmp	r1, #0
 80064d0:	d0ca      	beq.n	8006468 <__sflush_r+0x18>
 80064d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064d6:	4299      	cmp	r1, r3
 80064d8:	d002      	beq.n	80064e0 <__sflush_r+0x90>
 80064da:	4628      	mov	r0, r5
 80064dc:	f7ff f9ec 	bl	80058b8 <_free_r>
 80064e0:	2000      	movs	r0, #0
 80064e2:	6360      	str	r0, [r4, #52]	; 0x34
 80064e4:	e7c1      	b.n	800646a <__sflush_r+0x1a>
 80064e6:	2301      	movs	r3, #1
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b0      	blx	r6
 80064ec:	1c41      	adds	r1, r0, #1
 80064ee:	d1c8      	bne.n	8006482 <__sflush_r+0x32>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0c5      	beq.n	8006482 <__sflush_r+0x32>
 80064f6:	2b1d      	cmp	r3, #29
 80064f8:	d001      	beq.n	80064fe <__sflush_r+0xae>
 80064fa:	2b16      	cmp	r3, #22
 80064fc:	d101      	bne.n	8006502 <__sflush_r+0xb2>
 80064fe:	602f      	str	r7, [r5, #0]
 8006500:	e7b2      	b.n	8006468 <__sflush_r+0x18>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006508:	81a3      	strh	r3, [r4, #12]
 800650a:	e7ae      	b.n	800646a <__sflush_r+0x1a>
 800650c:	690f      	ldr	r7, [r1, #16]
 800650e:	2f00      	cmp	r7, #0
 8006510:	d0aa      	beq.n	8006468 <__sflush_r+0x18>
 8006512:	0793      	lsls	r3, r2, #30
 8006514:	bf18      	it	ne
 8006516:	2300      	movne	r3, #0
 8006518:	680e      	ldr	r6, [r1, #0]
 800651a:	bf08      	it	eq
 800651c:	694b      	ldreq	r3, [r1, #20]
 800651e:	1bf6      	subs	r6, r6, r7
 8006520:	600f      	str	r7, [r1, #0]
 8006522:	608b      	str	r3, [r1, #8]
 8006524:	2e00      	cmp	r6, #0
 8006526:	dd9f      	ble.n	8006468 <__sflush_r+0x18>
 8006528:	4633      	mov	r3, r6
 800652a:	463a      	mov	r2, r7
 800652c:	4628      	mov	r0, r5
 800652e:	6a21      	ldr	r1, [r4, #32]
 8006530:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006534:	47e0      	blx	ip
 8006536:	2800      	cmp	r0, #0
 8006538:	dc06      	bgt.n	8006548 <__sflush_r+0xf8>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	e790      	b.n	800646a <__sflush_r+0x1a>
 8006548:	4407      	add	r7, r0
 800654a:	1a36      	subs	r6, r6, r0
 800654c:	e7ea      	b.n	8006524 <__sflush_r+0xd4>
 800654e:	bf00      	nop
 8006550:	dfbffffe 	.word	0xdfbffffe

08006554 <_fflush_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	690b      	ldr	r3, [r1, #16]
 8006558:	4605      	mov	r5, r0
 800655a:	460c      	mov	r4, r1
 800655c:	b913      	cbnz	r3, 8006564 <_fflush_r+0x10>
 800655e:	2500      	movs	r5, #0
 8006560:	4628      	mov	r0, r5
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	b118      	cbz	r0, 800656e <_fflush_r+0x1a>
 8006566:	6a03      	ldr	r3, [r0, #32]
 8006568:	b90b      	cbnz	r3, 800656e <_fflush_r+0x1a>
 800656a:	f7fe fa0f 	bl	800498c <__sinit>
 800656e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f3      	beq.n	800655e <_fflush_r+0xa>
 8006576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006578:	07d0      	lsls	r0, r2, #31
 800657a:	d404      	bmi.n	8006586 <_fflush_r+0x32>
 800657c:	0599      	lsls	r1, r3, #22
 800657e:	d402      	bmi.n	8006586 <_fflush_r+0x32>
 8006580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006582:	f7fe fb19 	bl	8004bb8 <__retarget_lock_acquire_recursive>
 8006586:	4628      	mov	r0, r5
 8006588:	4621      	mov	r1, r4
 800658a:	f7ff ff61 	bl	8006450 <__sflush_r>
 800658e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006590:	4605      	mov	r5, r0
 8006592:	07da      	lsls	r2, r3, #31
 8006594:	d4e4      	bmi.n	8006560 <_fflush_r+0xc>
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	059b      	lsls	r3, r3, #22
 800659a:	d4e1      	bmi.n	8006560 <_fflush_r+0xc>
 800659c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659e:	f7fe fb0c 	bl	8004bba <__retarget_lock_release_recursive>
 80065a2:	e7dd      	b.n	8006560 <_fflush_r+0xc>

080065a4 <memmove>:
 80065a4:	4288      	cmp	r0, r1
 80065a6:	b510      	push	{r4, lr}
 80065a8:	eb01 0402 	add.w	r4, r1, r2
 80065ac:	d902      	bls.n	80065b4 <memmove+0x10>
 80065ae:	4284      	cmp	r4, r0
 80065b0:	4623      	mov	r3, r4
 80065b2:	d807      	bhi.n	80065c4 <memmove+0x20>
 80065b4:	1e43      	subs	r3, r0, #1
 80065b6:	42a1      	cmp	r1, r4
 80065b8:	d008      	beq.n	80065cc <memmove+0x28>
 80065ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065c2:	e7f8      	b.n	80065b6 <memmove+0x12>
 80065c4:	4601      	mov	r1, r0
 80065c6:	4402      	add	r2, r0
 80065c8:	428a      	cmp	r2, r1
 80065ca:	d100      	bne.n	80065ce <memmove+0x2a>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065d6:	e7f7      	b.n	80065c8 <memmove+0x24>

080065d8 <_sbrk_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	2300      	movs	r3, #0
 80065dc:	4d05      	ldr	r5, [pc, #20]	; (80065f4 <_sbrk_r+0x1c>)
 80065de:	4604      	mov	r4, r0
 80065e0:	4608      	mov	r0, r1
 80065e2:	602b      	str	r3, [r5, #0]
 80065e4:	f7fb faf4 	bl	8001bd0 <_sbrk>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d102      	bne.n	80065f2 <_sbrk_r+0x1a>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	b103      	cbz	r3, 80065f2 <_sbrk_r+0x1a>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	20000400 	.word	0x20000400

080065f8 <memcpy>:
 80065f8:	440a      	add	r2, r1
 80065fa:	4291      	cmp	r1, r2
 80065fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006600:	d100      	bne.n	8006604 <memcpy+0xc>
 8006602:	4770      	bx	lr
 8006604:	b510      	push	{r4, lr}
 8006606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660a:	4291      	cmp	r1, r2
 800660c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006610:	d1f9      	bne.n	8006606 <memcpy+0xe>
 8006612:	bd10      	pop	{r4, pc}

08006614 <__assert_func>:
 8006614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006616:	4614      	mov	r4, r2
 8006618:	461a      	mov	r2, r3
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <__assert_func+0x2c>)
 800661c:	4605      	mov	r5, r0
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68d8      	ldr	r0, [r3, #12]
 8006622:	b14c      	cbz	r4, 8006638 <__assert_func+0x24>
 8006624:	4b07      	ldr	r3, [pc, #28]	; (8006644 <__assert_func+0x30>)
 8006626:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800662a:	9100      	str	r1, [sp, #0]
 800662c:	462b      	mov	r3, r5
 800662e:	4906      	ldr	r1, [pc, #24]	; (8006648 <__assert_func+0x34>)
 8006630:	f000 f870 	bl	8006714 <fiprintf>
 8006634:	f000 f880 	bl	8006738 <abort>
 8006638:	4b04      	ldr	r3, [pc, #16]	; (800664c <__assert_func+0x38>)
 800663a:	461c      	mov	r4, r3
 800663c:	e7f3      	b.n	8006626 <__assert_func+0x12>
 800663e:	bf00      	nop
 8006640:	20000064 	.word	0x20000064
 8006644:	08007427 	.word	0x08007427
 8006648:	08007434 	.word	0x08007434
 800664c:	08007462 	.word	0x08007462

08006650 <_calloc_r>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	fba1 5402 	umull	r5, r4, r1, r2
 8006656:	b934      	cbnz	r4, 8006666 <_calloc_r+0x16>
 8006658:	4629      	mov	r1, r5
 800665a:	f7ff f99d 	bl	8005998 <_malloc_r>
 800665e:	4606      	mov	r6, r0
 8006660:	b928      	cbnz	r0, 800666e <_calloc_r+0x1e>
 8006662:	4630      	mov	r0, r6
 8006664:	bd70      	pop	{r4, r5, r6, pc}
 8006666:	220c      	movs	r2, #12
 8006668:	2600      	movs	r6, #0
 800666a:	6002      	str	r2, [r0, #0]
 800666c:	e7f9      	b.n	8006662 <_calloc_r+0x12>
 800666e:	462a      	mov	r2, r5
 8006670:	4621      	mov	r1, r4
 8006672:	f7fe fa24 	bl	8004abe <memset>
 8006676:	e7f4      	b.n	8006662 <_calloc_r+0x12>

08006678 <__ascii_mbtowc>:
 8006678:	b082      	sub	sp, #8
 800667a:	b901      	cbnz	r1, 800667e <__ascii_mbtowc+0x6>
 800667c:	a901      	add	r1, sp, #4
 800667e:	b142      	cbz	r2, 8006692 <__ascii_mbtowc+0x1a>
 8006680:	b14b      	cbz	r3, 8006696 <__ascii_mbtowc+0x1e>
 8006682:	7813      	ldrb	r3, [r2, #0]
 8006684:	600b      	str	r3, [r1, #0]
 8006686:	7812      	ldrb	r2, [r2, #0]
 8006688:	1e10      	subs	r0, r2, #0
 800668a:	bf18      	it	ne
 800668c:	2001      	movne	r0, #1
 800668e:	b002      	add	sp, #8
 8006690:	4770      	bx	lr
 8006692:	4610      	mov	r0, r2
 8006694:	e7fb      	b.n	800668e <__ascii_mbtowc+0x16>
 8006696:	f06f 0001 	mvn.w	r0, #1
 800669a:	e7f8      	b.n	800668e <__ascii_mbtowc+0x16>

0800669c <_realloc_r>:
 800669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a0:	4680      	mov	r8, r0
 80066a2:	4614      	mov	r4, r2
 80066a4:	460e      	mov	r6, r1
 80066a6:	b921      	cbnz	r1, 80066b2 <_realloc_r+0x16>
 80066a8:	4611      	mov	r1, r2
 80066aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ae:	f7ff b973 	b.w	8005998 <_malloc_r>
 80066b2:	b92a      	cbnz	r2, 80066c0 <_realloc_r+0x24>
 80066b4:	f7ff f900 	bl	80058b8 <_free_r>
 80066b8:	4625      	mov	r5, r4
 80066ba:	4628      	mov	r0, r5
 80066bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c0:	f000 f841 	bl	8006746 <_malloc_usable_size_r>
 80066c4:	4284      	cmp	r4, r0
 80066c6:	4607      	mov	r7, r0
 80066c8:	d802      	bhi.n	80066d0 <_realloc_r+0x34>
 80066ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066ce:	d812      	bhi.n	80066f6 <_realloc_r+0x5a>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4640      	mov	r0, r8
 80066d4:	f7ff f960 	bl	8005998 <_malloc_r>
 80066d8:	4605      	mov	r5, r0
 80066da:	2800      	cmp	r0, #0
 80066dc:	d0ed      	beq.n	80066ba <_realloc_r+0x1e>
 80066de:	42bc      	cmp	r4, r7
 80066e0:	4622      	mov	r2, r4
 80066e2:	4631      	mov	r1, r6
 80066e4:	bf28      	it	cs
 80066e6:	463a      	movcs	r2, r7
 80066e8:	f7ff ff86 	bl	80065f8 <memcpy>
 80066ec:	4631      	mov	r1, r6
 80066ee:	4640      	mov	r0, r8
 80066f0:	f7ff f8e2 	bl	80058b8 <_free_r>
 80066f4:	e7e1      	b.n	80066ba <_realloc_r+0x1e>
 80066f6:	4635      	mov	r5, r6
 80066f8:	e7df      	b.n	80066ba <_realloc_r+0x1e>

080066fa <__ascii_wctomb>:
 80066fa:	4603      	mov	r3, r0
 80066fc:	4608      	mov	r0, r1
 80066fe:	b141      	cbz	r1, 8006712 <__ascii_wctomb+0x18>
 8006700:	2aff      	cmp	r2, #255	; 0xff
 8006702:	d904      	bls.n	800670e <__ascii_wctomb+0x14>
 8006704:	228a      	movs	r2, #138	; 0x8a
 8006706:	f04f 30ff 	mov.w	r0, #4294967295
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	4770      	bx	lr
 800670e:	2001      	movs	r0, #1
 8006710:	700a      	strb	r2, [r1, #0]
 8006712:	4770      	bx	lr

08006714 <fiprintf>:
 8006714:	b40e      	push	{r1, r2, r3}
 8006716:	b503      	push	{r0, r1, lr}
 8006718:	4601      	mov	r1, r0
 800671a:	ab03      	add	r3, sp, #12
 800671c:	4805      	ldr	r0, [pc, #20]	; (8006734 <fiprintf+0x20>)
 800671e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006722:	6800      	ldr	r0, [r0, #0]
 8006724:	9301      	str	r3, [sp, #4]
 8006726:	f000 f83d 	bl	80067a4 <_vfiprintf_r>
 800672a:	b002      	add	sp, #8
 800672c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006730:	b003      	add	sp, #12
 8006732:	4770      	bx	lr
 8006734:	20000064 	.word	0x20000064

08006738 <abort>:
 8006738:	2006      	movs	r0, #6
 800673a:	b508      	push	{r3, lr}
 800673c:	f000 fa0a 	bl	8006b54 <raise>
 8006740:	2001      	movs	r0, #1
 8006742:	f7fb f9d1 	bl	8001ae8 <_exit>

08006746 <_malloc_usable_size_r>:
 8006746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674a:	1f18      	subs	r0, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	bfbc      	itt	lt
 8006750:	580b      	ldrlt	r3, [r1, r0]
 8006752:	18c0      	addlt	r0, r0, r3
 8006754:	4770      	bx	lr

08006756 <__sfputc_r>:
 8006756:	6893      	ldr	r3, [r2, #8]
 8006758:	b410      	push	{r4}
 800675a:	3b01      	subs	r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	6093      	str	r3, [r2, #8]
 8006760:	da07      	bge.n	8006772 <__sfputc_r+0x1c>
 8006762:	6994      	ldr	r4, [r2, #24]
 8006764:	42a3      	cmp	r3, r4
 8006766:	db01      	blt.n	800676c <__sfputc_r+0x16>
 8006768:	290a      	cmp	r1, #10
 800676a:	d102      	bne.n	8006772 <__sfputc_r+0x1c>
 800676c:	bc10      	pop	{r4}
 800676e:	f000 b933 	b.w	80069d8 <__swbuf_r>
 8006772:	6813      	ldr	r3, [r2, #0]
 8006774:	1c58      	adds	r0, r3, #1
 8006776:	6010      	str	r0, [r2, #0]
 8006778:	7019      	strb	r1, [r3, #0]
 800677a:	4608      	mov	r0, r1
 800677c:	bc10      	pop	{r4}
 800677e:	4770      	bx	lr

08006780 <__sfputs_r>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	4606      	mov	r6, r0
 8006784:	460f      	mov	r7, r1
 8006786:	4614      	mov	r4, r2
 8006788:	18d5      	adds	r5, r2, r3
 800678a:	42ac      	cmp	r4, r5
 800678c:	d101      	bne.n	8006792 <__sfputs_r+0x12>
 800678e:	2000      	movs	r0, #0
 8006790:	e007      	b.n	80067a2 <__sfputs_r+0x22>
 8006792:	463a      	mov	r2, r7
 8006794:	4630      	mov	r0, r6
 8006796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679a:	f7ff ffdc 	bl	8006756 <__sfputc_r>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	d1f3      	bne.n	800678a <__sfputs_r+0xa>
 80067a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067a4 <_vfiprintf_r>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	460d      	mov	r5, r1
 80067aa:	4614      	mov	r4, r2
 80067ac:	4698      	mov	r8, r3
 80067ae:	4606      	mov	r6, r0
 80067b0:	b09d      	sub	sp, #116	; 0x74
 80067b2:	b118      	cbz	r0, 80067bc <_vfiprintf_r+0x18>
 80067b4:	6a03      	ldr	r3, [r0, #32]
 80067b6:	b90b      	cbnz	r3, 80067bc <_vfiprintf_r+0x18>
 80067b8:	f7fe f8e8 	bl	800498c <__sinit>
 80067bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067be:	07d9      	lsls	r1, r3, #31
 80067c0:	d405      	bmi.n	80067ce <_vfiprintf_r+0x2a>
 80067c2:	89ab      	ldrh	r3, [r5, #12]
 80067c4:	059a      	lsls	r2, r3, #22
 80067c6:	d402      	bmi.n	80067ce <_vfiprintf_r+0x2a>
 80067c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ca:	f7fe f9f5 	bl	8004bb8 <__retarget_lock_acquire_recursive>
 80067ce:	89ab      	ldrh	r3, [r5, #12]
 80067d0:	071b      	lsls	r3, r3, #28
 80067d2:	d501      	bpl.n	80067d8 <_vfiprintf_r+0x34>
 80067d4:	692b      	ldr	r3, [r5, #16]
 80067d6:	b99b      	cbnz	r3, 8006800 <_vfiprintf_r+0x5c>
 80067d8:	4629      	mov	r1, r5
 80067da:	4630      	mov	r0, r6
 80067dc:	f000 f93a 	bl	8006a54 <__swsetup_r>
 80067e0:	b170      	cbz	r0, 8006800 <_vfiprintf_r+0x5c>
 80067e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067e4:	07dc      	lsls	r4, r3, #31
 80067e6:	d504      	bpl.n	80067f2 <_vfiprintf_r+0x4e>
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	b01d      	add	sp, #116	; 0x74
 80067ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	0598      	lsls	r0, r3, #22
 80067f6:	d4f7      	bmi.n	80067e8 <_vfiprintf_r+0x44>
 80067f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067fa:	f7fe f9de 	bl	8004bba <__retarget_lock_release_recursive>
 80067fe:	e7f3      	b.n	80067e8 <_vfiprintf_r+0x44>
 8006800:	2300      	movs	r3, #0
 8006802:	9309      	str	r3, [sp, #36]	; 0x24
 8006804:	2320      	movs	r3, #32
 8006806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800680a:	2330      	movs	r3, #48	; 0x30
 800680c:	f04f 0901 	mov.w	r9, #1
 8006810:	f8cd 800c 	str.w	r8, [sp, #12]
 8006814:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80069c4 <_vfiprintf_r+0x220>
 8006818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800681c:	4623      	mov	r3, r4
 800681e:	469a      	mov	sl, r3
 8006820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006824:	b10a      	cbz	r2, 800682a <_vfiprintf_r+0x86>
 8006826:	2a25      	cmp	r2, #37	; 0x25
 8006828:	d1f9      	bne.n	800681e <_vfiprintf_r+0x7a>
 800682a:	ebba 0b04 	subs.w	fp, sl, r4
 800682e:	d00b      	beq.n	8006848 <_vfiprintf_r+0xa4>
 8006830:	465b      	mov	r3, fp
 8006832:	4622      	mov	r2, r4
 8006834:	4629      	mov	r1, r5
 8006836:	4630      	mov	r0, r6
 8006838:	f7ff ffa2 	bl	8006780 <__sfputs_r>
 800683c:	3001      	adds	r0, #1
 800683e:	f000 80a9 	beq.w	8006994 <_vfiprintf_r+0x1f0>
 8006842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006844:	445a      	add	r2, fp
 8006846:	9209      	str	r2, [sp, #36]	; 0x24
 8006848:	f89a 3000 	ldrb.w	r3, [sl]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80a1 	beq.w	8006994 <_vfiprintf_r+0x1f0>
 8006852:	2300      	movs	r3, #0
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800685c:	f10a 0a01 	add.w	sl, sl, #1
 8006860:	9304      	str	r3, [sp, #16]
 8006862:	9307      	str	r3, [sp, #28]
 8006864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006868:	931a      	str	r3, [sp, #104]	; 0x68
 800686a:	4654      	mov	r4, sl
 800686c:	2205      	movs	r2, #5
 800686e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006872:	4854      	ldr	r0, [pc, #336]	; (80069c4 <_vfiprintf_r+0x220>)
 8006874:	f7fe f9a2 	bl	8004bbc <memchr>
 8006878:	9a04      	ldr	r2, [sp, #16]
 800687a:	b9d8      	cbnz	r0, 80068b4 <_vfiprintf_r+0x110>
 800687c:	06d1      	lsls	r1, r2, #27
 800687e:	bf44      	itt	mi
 8006880:	2320      	movmi	r3, #32
 8006882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006886:	0713      	lsls	r3, r2, #28
 8006888:	bf44      	itt	mi
 800688a:	232b      	movmi	r3, #43	; 0x2b
 800688c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006890:	f89a 3000 	ldrb.w	r3, [sl]
 8006894:	2b2a      	cmp	r3, #42	; 0x2a
 8006896:	d015      	beq.n	80068c4 <_vfiprintf_r+0x120>
 8006898:	4654      	mov	r4, sl
 800689a:	2000      	movs	r0, #0
 800689c:	f04f 0c0a 	mov.w	ip, #10
 80068a0:	9a07      	ldr	r2, [sp, #28]
 80068a2:	4621      	mov	r1, r4
 80068a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068a8:	3b30      	subs	r3, #48	; 0x30
 80068aa:	2b09      	cmp	r3, #9
 80068ac:	d94d      	bls.n	800694a <_vfiprintf_r+0x1a6>
 80068ae:	b1b0      	cbz	r0, 80068de <_vfiprintf_r+0x13a>
 80068b0:	9207      	str	r2, [sp, #28]
 80068b2:	e014      	b.n	80068de <_vfiprintf_r+0x13a>
 80068b4:	eba0 0308 	sub.w	r3, r0, r8
 80068b8:	fa09 f303 	lsl.w	r3, r9, r3
 80068bc:	4313      	orrs	r3, r2
 80068be:	46a2      	mov	sl, r4
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	e7d2      	b.n	800686a <_vfiprintf_r+0xc6>
 80068c4:	9b03      	ldr	r3, [sp, #12]
 80068c6:	1d19      	adds	r1, r3, #4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	9103      	str	r1, [sp, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bfbb      	ittet	lt
 80068d0:	425b      	neglt	r3, r3
 80068d2:	f042 0202 	orrlt.w	r2, r2, #2
 80068d6:	9307      	strge	r3, [sp, #28]
 80068d8:	9307      	strlt	r3, [sp, #28]
 80068da:	bfb8      	it	lt
 80068dc:	9204      	strlt	r2, [sp, #16]
 80068de:	7823      	ldrb	r3, [r4, #0]
 80068e0:	2b2e      	cmp	r3, #46	; 0x2e
 80068e2:	d10c      	bne.n	80068fe <_vfiprintf_r+0x15a>
 80068e4:	7863      	ldrb	r3, [r4, #1]
 80068e6:	2b2a      	cmp	r3, #42	; 0x2a
 80068e8:	d134      	bne.n	8006954 <_vfiprintf_r+0x1b0>
 80068ea:	9b03      	ldr	r3, [sp, #12]
 80068ec:	3402      	adds	r4, #2
 80068ee:	1d1a      	adds	r2, r3, #4
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	9203      	str	r2, [sp, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	bfb8      	it	lt
 80068f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80068fc:	9305      	str	r3, [sp, #20]
 80068fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069c8 <_vfiprintf_r+0x224>
 8006902:	2203      	movs	r2, #3
 8006904:	4650      	mov	r0, sl
 8006906:	7821      	ldrb	r1, [r4, #0]
 8006908:	f7fe f958 	bl	8004bbc <memchr>
 800690c:	b138      	cbz	r0, 800691e <_vfiprintf_r+0x17a>
 800690e:	2240      	movs	r2, #64	; 0x40
 8006910:	9b04      	ldr	r3, [sp, #16]
 8006912:	eba0 000a 	sub.w	r0, r0, sl
 8006916:	4082      	lsls	r2, r0
 8006918:	4313      	orrs	r3, r2
 800691a:	3401      	adds	r4, #1
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006922:	2206      	movs	r2, #6
 8006924:	4829      	ldr	r0, [pc, #164]	; (80069cc <_vfiprintf_r+0x228>)
 8006926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800692a:	f7fe f947 	bl	8004bbc <memchr>
 800692e:	2800      	cmp	r0, #0
 8006930:	d03f      	beq.n	80069b2 <_vfiprintf_r+0x20e>
 8006932:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <_vfiprintf_r+0x22c>)
 8006934:	bb1b      	cbnz	r3, 800697e <_vfiprintf_r+0x1da>
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	3307      	adds	r3, #7
 800693a:	f023 0307 	bic.w	r3, r3, #7
 800693e:	3308      	adds	r3, #8
 8006940:	9303      	str	r3, [sp, #12]
 8006942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006944:	443b      	add	r3, r7
 8006946:	9309      	str	r3, [sp, #36]	; 0x24
 8006948:	e768      	b.n	800681c <_vfiprintf_r+0x78>
 800694a:	460c      	mov	r4, r1
 800694c:	2001      	movs	r0, #1
 800694e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006952:	e7a6      	b.n	80068a2 <_vfiprintf_r+0xfe>
 8006954:	2300      	movs	r3, #0
 8006956:	f04f 0c0a 	mov.w	ip, #10
 800695a:	4619      	mov	r1, r3
 800695c:	3401      	adds	r4, #1
 800695e:	9305      	str	r3, [sp, #20]
 8006960:	4620      	mov	r0, r4
 8006962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006966:	3a30      	subs	r2, #48	; 0x30
 8006968:	2a09      	cmp	r2, #9
 800696a:	d903      	bls.n	8006974 <_vfiprintf_r+0x1d0>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0c6      	beq.n	80068fe <_vfiprintf_r+0x15a>
 8006970:	9105      	str	r1, [sp, #20]
 8006972:	e7c4      	b.n	80068fe <_vfiprintf_r+0x15a>
 8006974:	4604      	mov	r4, r0
 8006976:	2301      	movs	r3, #1
 8006978:	fb0c 2101 	mla	r1, ip, r1, r2
 800697c:	e7f0      	b.n	8006960 <_vfiprintf_r+0x1bc>
 800697e:	ab03      	add	r3, sp, #12
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	462a      	mov	r2, r5
 8006984:	4630      	mov	r0, r6
 8006986:	4b13      	ldr	r3, [pc, #76]	; (80069d4 <_vfiprintf_r+0x230>)
 8006988:	a904      	add	r1, sp, #16
 800698a:	f7fd fbc3 	bl	8004114 <_printf_float>
 800698e:	4607      	mov	r7, r0
 8006990:	1c78      	adds	r0, r7, #1
 8006992:	d1d6      	bne.n	8006942 <_vfiprintf_r+0x19e>
 8006994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006996:	07d9      	lsls	r1, r3, #31
 8006998:	d405      	bmi.n	80069a6 <_vfiprintf_r+0x202>
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	059a      	lsls	r2, r3, #22
 800699e:	d402      	bmi.n	80069a6 <_vfiprintf_r+0x202>
 80069a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a2:	f7fe f90a 	bl	8004bba <__retarget_lock_release_recursive>
 80069a6:	89ab      	ldrh	r3, [r5, #12]
 80069a8:	065b      	lsls	r3, r3, #25
 80069aa:	f53f af1d 	bmi.w	80067e8 <_vfiprintf_r+0x44>
 80069ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069b0:	e71c      	b.n	80067ec <_vfiprintf_r+0x48>
 80069b2:	ab03      	add	r3, sp, #12
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	462a      	mov	r2, r5
 80069b8:	4630      	mov	r0, r6
 80069ba:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <_vfiprintf_r+0x230>)
 80069bc:	a904      	add	r1, sp, #16
 80069be:	f7fd fe49 	bl	8004654 <_printf_i>
 80069c2:	e7e4      	b.n	800698e <_vfiprintf_r+0x1ea>
 80069c4:	0800740c 	.word	0x0800740c
 80069c8:	08007412 	.word	0x08007412
 80069cc:	08007416 	.word	0x08007416
 80069d0:	08004115 	.word	0x08004115
 80069d4:	08006781 	.word	0x08006781

080069d8 <__swbuf_r>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	460e      	mov	r6, r1
 80069dc:	4614      	mov	r4, r2
 80069de:	4605      	mov	r5, r0
 80069e0:	b118      	cbz	r0, 80069ea <__swbuf_r+0x12>
 80069e2:	6a03      	ldr	r3, [r0, #32]
 80069e4:	b90b      	cbnz	r3, 80069ea <__swbuf_r+0x12>
 80069e6:	f7fd ffd1 	bl	800498c <__sinit>
 80069ea:	69a3      	ldr	r3, [r4, #24]
 80069ec:	60a3      	str	r3, [r4, #8]
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	071a      	lsls	r2, r3, #28
 80069f2:	d525      	bpl.n	8006a40 <__swbuf_r+0x68>
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	b31b      	cbz	r3, 8006a40 <__swbuf_r+0x68>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	6922      	ldr	r2, [r4, #16]
 80069fc:	b2f6      	uxtb	r6, r6
 80069fe:	1a98      	subs	r0, r3, r2
 8006a00:	6963      	ldr	r3, [r4, #20]
 8006a02:	4637      	mov	r7, r6
 8006a04:	4283      	cmp	r3, r0
 8006a06:	dc04      	bgt.n	8006a12 <__swbuf_r+0x3a>
 8006a08:	4621      	mov	r1, r4
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f7ff fda2 	bl	8006554 <_fflush_r>
 8006a10:	b9e0      	cbnz	r0, 8006a4c <__swbuf_r+0x74>
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	60a3      	str	r3, [r4, #8]
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	6022      	str	r2, [r4, #0]
 8006a1e:	701e      	strb	r6, [r3, #0]
 8006a20:	6962      	ldr	r2, [r4, #20]
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d004      	beq.n	8006a32 <__swbuf_r+0x5a>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	07db      	lsls	r3, r3, #31
 8006a2c:	d506      	bpl.n	8006a3c <__swbuf_r+0x64>
 8006a2e:	2e0a      	cmp	r6, #10
 8006a30:	d104      	bne.n	8006a3c <__swbuf_r+0x64>
 8006a32:	4621      	mov	r1, r4
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7ff fd8d 	bl	8006554 <_fflush_r>
 8006a3a:	b938      	cbnz	r0, 8006a4c <__swbuf_r+0x74>
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a40:	4621      	mov	r1, r4
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 f806 	bl	8006a54 <__swsetup_r>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d0d5      	beq.n	80069f8 <__swbuf_r+0x20>
 8006a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006a50:	e7f4      	b.n	8006a3c <__swbuf_r+0x64>
	...

08006a54 <__swsetup_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4b2a      	ldr	r3, [pc, #168]	; (8006b00 <__swsetup_r+0xac>)
 8006a58:	4605      	mov	r5, r0
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	b118      	cbz	r0, 8006a68 <__swsetup_r+0x14>
 8006a60:	6a03      	ldr	r3, [r0, #32]
 8006a62:	b90b      	cbnz	r3, 8006a68 <__swsetup_r+0x14>
 8006a64:	f7fd ff92 	bl	800498c <__sinit>
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a6e:	0718      	lsls	r0, r3, #28
 8006a70:	d422      	bmi.n	8006ab8 <__swsetup_r+0x64>
 8006a72:	06d9      	lsls	r1, r3, #27
 8006a74:	d407      	bmi.n	8006a86 <__swsetup_r+0x32>
 8006a76:	2309      	movs	r3, #9
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a82:	81a3      	strh	r3, [r4, #12]
 8006a84:	e034      	b.n	8006af0 <__swsetup_r+0x9c>
 8006a86:	0758      	lsls	r0, r3, #29
 8006a88:	d512      	bpl.n	8006ab0 <__swsetup_r+0x5c>
 8006a8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a8c:	b141      	cbz	r1, 8006aa0 <__swsetup_r+0x4c>
 8006a8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a92:	4299      	cmp	r1, r3
 8006a94:	d002      	beq.n	8006a9c <__swsetup_r+0x48>
 8006a96:	4628      	mov	r0, r5
 8006a98:	f7fe ff0e 	bl	80058b8 <_free_r>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	6363      	str	r3, [r4, #52]	; 0x34
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006aa6:	81a3      	strh	r3, [r4, #12]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	6063      	str	r3, [r4, #4]
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	f043 0308 	orr.w	r3, r3, #8
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	6923      	ldr	r3, [r4, #16]
 8006aba:	b94b      	cbnz	r3, 8006ad0 <__swsetup_r+0x7c>
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac6:	d003      	beq.n	8006ad0 <__swsetup_r+0x7c>
 8006ac8:	4621      	mov	r1, r4
 8006aca:	4628      	mov	r0, r5
 8006acc:	f000 f883 	bl	8006bd6 <__smakebuf_r>
 8006ad0:	89a0      	ldrh	r0, [r4, #12]
 8006ad2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ad6:	f010 0301 	ands.w	r3, r0, #1
 8006ada:	d00a      	beq.n	8006af2 <__swsetup_r+0x9e>
 8006adc:	2300      	movs	r3, #0
 8006ade:	60a3      	str	r3, [r4, #8]
 8006ae0:	6963      	ldr	r3, [r4, #20]
 8006ae2:	425b      	negs	r3, r3
 8006ae4:	61a3      	str	r3, [r4, #24]
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	b943      	cbnz	r3, 8006afc <__swsetup_r+0xa8>
 8006aea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006aee:	d1c4      	bne.n	8006a7a <__swsetup_r+0x26>
 8006af0:	bd38      	pop	{r3, r4, r5, pc}
 8006af2:	0781      	lsls	r1, r0, #30
 8006af4:	bf58      	it	pl
 8006af6:	6963      	ldrpl	r3, [r4, #20]
 8006af8:	60a3      	str	r3, [r4, #8]
 8006afa:	e7f4      	b.n	8006ae6 <__swsetup_r+0x92>
 8006afc:	2000      	movs	r0, #0
 8006afe:	e7f7      	b.n	8006af0 <__swsetup_r+0x9c>
 8006b00:	20000064 	.word	0x20000064

08006b04 <_raise_r>:
 8006b04:	291f      	cmp	r1, #31
 8006b06:	b538      	push	{r3, r4, r5, lr}
 8006b08:	4604      	mov	r4, r0
 8006b0a:	460d      	mov	r5, r1
 8006b0c:	d904      	bls.n	8006b18 <_raise_r+0x14>
 8006b0e:	2316      	movs	r3, #22
 8006b10:	6003      	str	r3, [r0, #0]
 8006b12:	f04f 30ff 	mov.w	r0, #4294967295
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006b1a:	b112      	cbz	r2, 8006b22 <_raise_r+0x1e>
 8006b1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b20:	b94b      	cbnz	r3, 8006b36 <_raise_r+0x32>
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 f830 	bl	8006b88 <_getpid_r>
 8006b28:	462a      	mov	r2, r5
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b32:	f000 b817 	b.w	8006b64 <_kill_r>
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d00a      	beq.n	8006b50 <_raise_r+0x4c>
 8006b3a:	1c59      	adds	r1, r3, #1
 8006b3c:	d103      	bne.n	8006b46 <_raise_r+0x42>
 8006b3e:	2316      	movs	r3, #22
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	2001      	movs	r0, #1
 8006b44:	e7e7      	b.n	8006b16 <_raise_r+0x12>
 8006b46:	2400      	movs	r4, #0
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b4e:	4798      	blx	r3
 8006b50:	2000      	movs	r0, #0
 8006b52:	e7e0      	b.n	8006b16 <_raise_r+0x12>

08006b54 <raise>:
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <raise+0xc>)
 8006b56:	4601      	mov	r1, r0
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	f7ff bfd3 	b.w	8006b04 <_raise_r>
 8006b5e:	bf00      	nop
 8006b60:	20000064 	.word	0x20000064

08006b64 <_kill_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	2300      	movs	r3, #0
 8006b68:	4d06      	ldr	r5, [pc, #24]	; (8006b84 <_kill_r+0x20>)
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	4611      	mov	r1, r2
 8006b70:	602b      	str	r3, [r5, #0]
 8006b72:	f7fa ffa9 	bl	8001ac8 <_kill>
 8006b76:	1c43      	adds	r3, r0, #1
 8006b78:	d102      	bne.n	8006b80 <_kill_r+0x1c>
 8006b7a:	682b      	ldr	r3, [r5, #0]
 8006b7c:	b103      	cbz	r3, 8006b80 <_kill_r+0x1c>
 8006b7e:	6023      	str	r3, [r4, #0]
 8006b80:	bd38      	pop	{r3, r4, r5, pc}
 8006b82:	bf00      	nop
 8006b84:	20000400 	.word	0x20000400

08006b88 <_getpid_r>:
 8006b88:	f7fa bf97 	b.w	8001aba <_getpid>

08006b8c <__swhatbuf_r>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	460c      	mov	r4, r1
 8006b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b94:	4615      	mov	r5, r2
 8006b96:	2900      	cmp	r1, #0
 8006b98:	461e      	mov	r6, r3
 8006b9a:	b096      	sub	sp, #88	; 0x58
 8006b9c:	da0c      	bge.n	8006bb8 <__swhatbuf_r+0x2c>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ba6:	bf0c      	ite	eq
 8006ba8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006bac:	2340      	movne	r3, #64	; 0x40
 8006bae:	2000      	movs	r0, #0
 8006bb0:	6031      	str	r1, [r6, #0]
 8006bb2:	602b      	str	r3, [r5, #0]
 8006bb4:	b016      	add	sp, #88	; 0x58
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	466a      	mov	r2, sp
 8006bba:	f000 f849 	bl	8006c50 <_fstat_r>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	dbed      	blt.n	8006b9e <__swhatbuf_r+0x12>
 8006bc2:	9901      	ldr	r1, [sp, #4]
 8006bc4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006bc8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006bcc:	4259      	negs	r1, r3
 8006bce:	4159      	adcs	r1, r3
 8006bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bd4:	e7eb      	b.n	8006bae <__swhatbuf_r+0x22>

08006bd6 <__smakebuf_r>:
 8006bd6:	898b      	ldrh	r3, [r1, #12]
 8006bd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bda:	079d      	lsls	r5, r3, #30
 8006bdc:	4606      	mov	r6, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	d507      	bpl.n	8006bf2 <__smakebuf_r+0x1c>
 8006be2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	6123      	str	r3, [r4, #16]
 8006bea:	2301      	movs	r3, #1
 8006bec:	6163      	str	r3, [r4, #20]
 8006bee:	b002      	add	sp, #8
 8006bf0:	bd70      	pop	{r4, r5, r6, pc}
 8006bf2:	466a      	mov	r2, sp
 8006bf4:	ab01      	add	r3, sp, #4
 8006bf6:	f7ff ffc9 	bl	8006b8c <__swhatbuf_r>
 8006bfa:	9900      	ldr	r1, [sp, #0]
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f7fe feca 	bl	8005998 <_malloc_r>
 8006c04:	b948      	cbnz	r0, 8006c1a <__smakebuf_r+0x44>
 8006c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c0a:	059a      	lsls	r2, r3, #22
 8006c0c:	d4ef      	bmi.n	8006bee <__smakebuf_r+0x18>
 8006c0e:	f023 0303 	bic.w	r3, r3, #3
 8006c12:	f043 0302 	orr.w	r3, r3, #2
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	e7e3      	b.n	8006be2 <__smakebuf_r+0xc>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	6020      	str	r0, [r4, #0]
 8006c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c22:	81a3      	strh	r3, [r4, #12]
 8006c24:	9b00      	ldr	r3, [sp, #0]
 8006c26:	6120      	str	r0, [r4, #16]
 8006c28:	6163      	str	r3, [r4, #20]
 8006c2a:	9b01      	ldr	r3, [sp, #4]
 8006c2c:	b15b      	cbz	r3, 8006c46 <__smakebuf_r+0x70>
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c34:	f000 f81e 	bl	8006c74 <_isatty_r>
 8006c38:	b128      	cbz	r0, 8006c46 <__smakebuf_r+0x70>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	f023 0303 	bic.w	r3, r3, #3
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	81a3      	strh	r3, [r4, #12]
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	431d      	orrs	r5, r3
 8006c4a:	81a5      	strh	r5, [r4, #12]
 8006c4c:	e7cf      	b.n	8006bee <__smakebuf_r+0x18>
	...

08006c50 <_fstat_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	2300      	movs	r3, #0
 8006c54:	4d06      	ldr	r5, [pc, #24]	; (8006c70 <_fstat_r+0x20>)
 8006c56:	4604      	mov	r4, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	602b      	str	r3, [r5, #0]
 8006c5e:	f7fa ff91 	bl	8001b84 <_fstat>
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	d102      	bne.n	8006c6c <_fstat_r+0x1c>
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	b103      	cbz	r3, 8006c6c <_fstat_r+0x1c>
 8006c6a:	6023      	str	r3, [r4, #0]
 8006c6c:	bd38      	pop	{r3, r4, r5, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000400 	.word	0x20000400

08006c74 <_isatty_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	2300      	movs	r3, #0
 8006c78:	4d05      	ldr	r5, [pc, #20]	; (8006c90 <_isatty_r+0x1c>)
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	602b      	str	r3, [r5, #0]
 8006c80:	f7fa ff8f 	bl	8001ba2 <_isatty>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_isatty_r+0x1a>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_isatty_r+0x1a>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	20000400 	.word	0x20000400

08006c94 <_init>:
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	bf00      	nop
 8006c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9a:	bc08      	pop	{r3}
 8006c9c:	469e      	mov	lr, r3
 8006c9e:	4770      	bx	lr

08006ca0 <_fini>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	bf00      	nop
 8006ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca6:	bc08      	pop	{r3}
 8006ca8:	469e      	mov	lr, r3
 8006caa:	4770      	bx	lr
